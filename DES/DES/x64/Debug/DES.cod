; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27024.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?roundKeys@@3PA_KA				; roundKeys
PUBLIC	?sbox1@@3PA_KA					; sbox1
PUBLIC	?sbox2@@3PA_KA					; sbox2
PUBLIC	?sbox3@@3PA_KA					; sbox3
PUBLIC	?sbox4@@3PA_KA					; sbox4
PUBLIC	?sbox5@@3PA_KA					; sbox5
PUBLIC	?sbox6@@3PA_KA					; sbox6
PUBLIC	?sbox7@@3PA_KA					; sbox7
PUBLIC	?sbox8@@3PA_KA					; sbox8
_BSS	SEGMENT
?roundKeys@@3PA_KA DQ 011H DUP (?)			; roundKeys
_BSS	ENDS
msvcjmc	SEGMENT
__9A8CD564_pch@h DB 01H
__EAAC9602_des@pch DB 01H
__122CF1B0_xstddef DB 01H
__E53366A2_utility DB 01H
__F2A749D8_streambuf DB 01H
__375B2D08_ostream DB 01H
__548B1832_istream DB 01H
__FB7583FD_xstring DB 01H
__D6BF080C_des@cpp DB 01H
__04AA828A_time@h DB 01H
__7AAD89C5_string DB 01H
__A2C368DB_fstream DB 01H
__D1FEDD45_ios DB 01H
__BACC91DB_xlocnum DB 01H
__9B0361F4_xiosbase DB 01H
__FD5040F3_system_error DB 01H
__420D52D3_xcall_once@h DB 01H
__244BF7CC_xlocale DB 01H
__223B5856_xfacet DB 01H
__0E7E0F59_memory DB 01H
__A2E616E7_xlocinfo DB 01H
__7B7A869E_ctype@h DB 01H
__C42C8B73_vcruntime_typeinfo@h DB 01H
__F007F164_stdexcept DB 01H
__C334353D_xatomic0@h DB 01H
__1CE3C767_xmemory0 DB 01H
__CDB00636_xutility DB 01H
__7E39D651_iosfwd DB 01H
__B2D003D7_limits DB 01H
__5A74375D_wchar@h DB 01H
__A40A425D_stat@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__7949CB39_exception DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__331E732B_malloc@h DB 01H
__5ECFF36E_type_traits DB 01H
__2140C079_string@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__A452D4A0_stdio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__3736D25A_xtgmath@h DB 01H
__824D367B_cmath DB 01H
__D23EE329_cstdlib DB 01H
__188180DA_corecrt_math@h DB 01H
__A73354DD_stdlib@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?sbox1@@3PA_KA DQ 000000000000000eH			; sbox1
	DQ	0000000000000004H
	DQ	000000000000000dH
	DQ	0000000000000001H
	DQ	0000000000000002H
	DQ	000000000000000fH
	DQ	000000000000000bH
	DQ	0000000000000008H
	DQ	0000000000000003H
	DQ	000000000000000aH
	DQ	0000000000000006H
	DQ	000000000000000cH
	DQ	0000000000000005H
	DQ	0000000000000009H
	DQ	0000000000000000H
	DQ	0000000000000007H
	DQ	0000000000000000H
	DQ	000000000000000fH
	DQ	0000000000000007H
	DQ	0000000000000004H
	DQ	000000000000000eH
	DQ	0000000000000002H
	DQ	000000000000000dH
	DQ	0000000000000001H
	DQ	000000000000000aH
	DQ	0000000000000006H
	DQ	000000000000000cH
	DQ	000000000000000bH
	DQ	0000000000000009H
	DQ	0000000000000005H
	DQ	0000000000000003H
	DQ	0000000000000008H
	DQ	0000000000000004H
	DQ	0000000000000001H
	DQ	000000000000000eH
	DQ	0000000000000008H
	DQ	000000000000000dH
	DQ	0000000000000006H
	DQ	0000000000000002H
	DQ	000000000000000bH
	DQ	000000000000000fH
	DQ	000000000000000cH
	DQ	0000000000000009H
	DQ	0000000000000007H
	DQ	0000000000000003H
	DQ	000000000000000aH
	DQ	0000000000000005H
	DQ	0000000000000000H
	DQ	000000000000000fH
	DQ	000000000000000cH
	DQ	0000000000000008H
	DQ	0000000000000002H
	DQ	0000000000000004H
	DQ	0000000000000009H
	DQ	0000000000000001H
	DQ	0000000000000007H
	DQ	0000000000000005H
	DQ	000000000000000bH
	DQ	0000000000000003H
	DQ	000000000000000eH
	DQ	000000000000000aH
	DQ	0000000000000000H
	DQ	0000000000000006H
	DQ	000000000000000dH
?sbox2@@3PA_KA DQ 000000000000000fH			; sbox2
	DQ	0000000000000001H
	DQ	0000000000000008H
	DQ	000000000000000eH
	DQ	0000000000000006H
	DQ	000000000000000bH
	DQ	0000000000000003H
	DQ	0000000000000004H
	DQ	0000000000000009H
	DQ	0000000000000007H
	DQ	0000000000000002H
	DQ	000000000000000dH
	DQ	000000000000000cH
	DQ	0000000000000000H
	DQ	0000000000000005H
	DQ	000000000000000aH
	DQ	0000000000000003H
	DQ	000000000000000dH
	DQ	0000000000000004H
	DQ	0000000000000007H
	DQ	000000000000000fH
	DQ	0000000000000002H
	DQ	0000000000000008H
	DQ	000000000000000eH
	DQ	000000000000000cH
	DQ	0000000000000000H
	DQ	0000000000000001H
	DQ	000000000000000aH
	DQ	0000000000000006H
	DQ	0000000000000009H
	DQ	000000000000000bH
	DQ	0000000000000005H
	DQ	0000000000000000H
	DQ	000000000000000eH
	DQ	0000000000000007H
	DQ	000000000000000bH
	DQ	000000000000000aH
	DQ	0000000000000004H
	DQ	000000000000000dH
	DQ	0000000000000001H
	DQ	0000000000000005H
	DQ	0000000000000008H
	DQ	000000000000000cH
	DQ	0000000000000006H
	DQ	0000000000000009H
	DQ	0000000000000003H
	DQ	0000000000000002H
	DQ	000000000000000fH
	DQ	000000000000000dH
	DQ	0000000000000008H
	DQ	000000000000000aH
	DQ	0000000000000001H
	DQ	0000000000000003H
	DQ	000000000000000fH
	DQ	0000000000000004H
	DQ	0000000000000002H
	DQ	000000000000000bH
	DQ	0000000000000006H
	DQ	0000000000000007H
	DQ	000000000000000cH
	DQ	0000000000000000H
	DQ	0000000000000005H
	DQ	000000000000000eH
	DQ	0000000000000009H
?sbox3@@3PA_KA DQ 000000000000000aH			; sbox3
	DQ	0000000000000000H
	DQ	0000000000000009H
	DQ	000000000000000eH
	DQ	0000000000000006H
	DQ	0000000000000003H
	DQ	000000000000000fH
	DQ	0000000000000005H
	DQ	0000000000000001H
	DQ	000000000000000dH
	DQ	000000000000000cH
	DQ	0000000000000007H
	DQ	000000000000000bH
	DQ	0000000000000004H
	DQ	0000000000000002H
	DQ	0000000000000008H
	DQ	000000000000000dH
	DQ	0000000000000007H
	DQ	0000000000000000H
	DQ	0000000000000009H
	DQ	0000000000000003H
	DQ	0000000000000004H
	DQ	0000000000000006H
	DQ	000000000000000aH
	DQ	0000000000000002H
	DQ	0000000000000008H
	DQ	0000000000000005H
	DQ	000000000000000eH
	DQ	000000000000000cH
	DQ	000000000000000bH
	DQ	000000000000000fH
	DQ	0000000000000001H
	DQ	000000000000000dH
	DQ	0000000000000006H
	DQ	0000000000000004H
	DQ	0000000000000009H
	DQ	0000000000000008H
	DQ	000000000000000fH
	DQ	0000000000000003H
	DQ	0000000000000000H
	DQ	000000000000000bH
	DQ	0000000000000001H
	DQ	0000000000000002H
	DQ	000000000000000cH
	DQ	0000000000000005H
	DQ	000000000000000aH
	DQ	000000000000000eH
	DQ	0000000000000007H
	DQ	0000000000000001H
	DQ	000000000000000aH
	DQ	000000000000000dH
	DQ	0000000000000000H
	DQ	0000000000000006H
	DQ	0000000000000009H
	DQ	0000000000000008H
	DQ	0000000000000007H
	DQ	0000000000000004H
	DQ	000000000000000fH
	DQ	000000000000000eH
	DQ	0000000000000003H
	DQ	000000000000000bH
	DQ	0000000000000005H
	DQ	0000000000000002H
	DQ	000000000000000cH
?sbox4@@3PA_KA DQ 0000000000000007H			; sbox4
	DQ	000000000000000dH
	DQ	000000000000000eH
	DQ	0000000000000003H
	DQ	0000000000000000H
	DQ	0000000000000006H
	DQ	0000000000000009H
	DQ	000000000000000aH
	DQ	0000000000000001H
	DQ	0000000000000002H
	DQ	0000000000000008H
	DQ	0000000000000005H
	DQ	000000000000000bH
	DQ	000000000000000cH
	DQ	0000000000000004H
	DQ	000000000000000fH
	DQ	000000000000000dH
	DQ	0000000000000008H
	DQ	000000000000000bH
	DQ	0000000000000005H
	DQ	0000000000000006H
	DQ	000000000000000fH
	DQ	0000000000000000H
	DQ	0000000000000003H
	DQ	0000000000000004H
	DQ	0000000000000007H
	DQ	0000000000000002H
	DQ	000000000000000cH
	DQ	0000000000000001H
	DQ	000000000000000aH
	DQ	000000000000000eH
	DQ	0000000000000009H
	DQ	000000000000000aH
	DQ	0000000000000006H
	DQ	0000000000000009H
	DQ	0000000000000000H
	DQ	000000000000000cH
	DQ	000000000000000bH
	DQ	0000000000000007H
	DQ	000000000000000dH
	DQ	000000000000000fH
	DQ	0000000000000001H
	DQ	0000000000000003H
	DQ	000000000000000eH
	DQ	0000000000000005H
	DQ	0000000000000002H
	DQ	0000000000000008H
	DQ	0000000000000004H
	DQ	0000000000000003H
	DQ	000000000000000fH
	DQ	0000000000000000H
	DQ	0000000000000006H
	DQ	000000000000000aH
	DQ	0000000000000001H
	DQ	000000000000000dH
	DQ	0000000000000008H
	DQ	0000000000000009H
	DQ	0000000000000004H
	DQ	0000000000000005H
	DQ	000000000000000bH
	DQ	000000000000000cH
	DQ	0000000000000007H
	DQ	0000000000000002H
	DQ	000000000000000eH
?sbox5@@3PA_KA DQ 0000000000000002H			; sbox5
	DQ	000000000000000cH
	DQ	0000000000000004H
	DQ	0000000000000001H
	DQ	0000000000000007H
	DQ	000000000000000aH
	DQ	000000000000000bH
	DQ	0000000000000006H
	DQ	0000000000000008H
	DQ	0000000000000005H
	DQ	0000000000000003H
	DQ	000000000000000fH
	DQ	000000000000000dH
	DQ	0000000000000000H
	DQ	000000000000000eH
	DQ	0000000000000009H
	DQ	000000000000000eH
	DQ	000000000000000bH
	DQ	0000000000000002H
	DQ	000000000000000cH
	DQ	0000000000000004H
	DQ	0000000000000007H
	DQ	000000000000000dH
	DQ	0000000000000001H
	DQ	0000000000000005H
	DQ	0000000000000000H
	DQ	000000000000000fH
	DQ	000000000000000aH
	DQ	0000000000000003H
	DQ	0000000000000009H
	DQ	0000000000000008H
	DQ	0000000000000006H
	DQ	0000000000000004H
	DQ	0000000000000002H
	DQ	0000000000000001H
	DQ	000000000000000bH
	DQ	000000000000000aH
	DQ	000000000000000dH
	DQ	0000000000000007H
	DQ	0000000000000008H
	DQ	000000000000000fH
	DQ	0000000000000009H
	DQ	000000000000000cH
	DQ	0000000000000005H
	DQ	0000000000000006H
	DQ	0000000000000003H
	DQ	0000000000000000H
	DQ	000000000000000eH
	DQ	000000000000000bH
	DQ	0000000000000008H
	DQ	000000000000000cH
	DQ	0000000000000007H
	DQ	0000000000000001H
	DQ	000000000000000eH
	DQ	0000000000000002H
	DQ	000000000000000dH
	DQ	0000000000000006H
	DQ	000000000000000fH
	DQ	0000000000000000H
	DQ	0000000000000009H
	DQ	000000000000000aH
	DQ	0000000000000004H
	DQ	0000000000000005H
	DQ	0000000000000003H
?sbox6@@3PA_KA DQ 000000000000000cH			; sbox6
	DQ	0000000000000001H
	DQ	000000000000000aH
	DQ	000000000000000fH
	DQ	0000000000000009H
	DQ	0000000000000002H
	DQ	0000000000000006H
	DQ	0000000000000008H
	DQ	0000000000000000H
	DQ	000000000000000dH
	DQ	0000000000000003H
	DQ	0000000000000004H
	DQ	000000000000000eH
	DQ	0000000000000007H
	DQ	0000000000000005H
	DQ	000000000000000bH
	DQ	000000000000000aH
	DQ	000000000000000fH
	DQ	0000000000000004H
	DQ	0000000000000002H
	DQ	0000000000000007H
	DQ	000000000000000cH
	DQ	0000000000000009H
	DQ	0000000000000005H
	DQ	0000000000000006H
	DQ	0000000000000001H
	DQ	000000000000000dH
	DQ	000000000000000eH
	DQ	0000000000000000H
	DQ	000000000000000bH
	DQ	0000000000000003H
	DQ	0000000000000008H
	DQ	0000000000000009H
	DQ	000000000000000eH
	DQ	000000000000000fH
	DQ	0000000000000005H
	DQ	0000000000000002H
	DQ	0000000000000008H
	DQ	000000000000000cH
	DQ	0000000000000003H
	DQ	0000000000000007H
	DQ	0000000000000000H
	DQ	0000000000000004H
	DQ	000000000000000aH
	DQ	0000000000000001H
	DQ	000000000000000dH
	DQ	000000000000000bH
	DQ	0000000000000006H
	DQ	0000000000000004H
	DQ	0000000000000003H
	DQ	0000000000000002H
	DQ	000000000000000cH
	DQ	0000000000000009H
	DQ	0000000000000005H
	DQ	000000000000000fH
	DQ	000000000000000aH
	DQ	000000000000000bH
	DQ	000000000000000eH
	DQ	0000000000000001H
	DQ	0000000000000007H
	DQ	0000000000000006H
	DQ	0000000000000000H
	DQ	0000000000000008H
	DQ	000000000000000dH
?sbox7@@3PA_KA DQ 0000000000000004H			; sbox7
	DQ	000000000000000bH
	DQ	0000000000000002H
	DQ	000000000000000eH
	DQ	000000000000000fH
	DQ	0000000000000000H
	DQ	0000000000000008H
	DQ	000000000000000dH
	DQ	0000000000000003H
	DQ	000000000000000cH
	DQ	0000000000000009H
	DQ	0000000000000007H
	DQ	0000000000000005H
	DQ	000000000000000aH
	DQ	0000000000000006H
	DQ	0000000000000001H
	DQ	000000000000000dH
	DQ	0000000000000000H
	DQ	000000000000000bH
	DQ	0000000000000007H
	DQ	0000000000000004H
	DQ	0000000000000009H
	DQ	0000000000000001H
	DQ	000000000000000aH
	DQ	000000000000000eH
	DQ	0000000000000003H
	DQ	0000000000000005H
	DQ	000000000000000cH
	DQ	0000000000000002H
	DQ	000000000000000fH
	DQ	0000000000000008H
	DQ	0000000000000006H
	DQ	0000000000000001H
	DQ	0000000000000004H
	DQ	000000000000000bH
	DQ	000000000000000dH
	DQ	000000000000000cH
	DQ	0000000000000003H
	DQ	0000000000000007H
	DQ	000000000000000eH
	DQ	000000000000000aH
	DQ	000000000000000fH
	DQ	0000000000000006H
	DQ	0000000000000008H
	DQ	0000000000000000H
	DQ	0000000000000005H
	DQ	0000000000000009H
	DQ	0000000000000002H
	DQ	0000000000000006H
	DQ	000000000000000bH
	DQ	000000000000000dH
	DQ	0000000000000008H
	DQ	0000000000000001H
	DQ	0000000000000004H
	DQ	000000000000000aH
	DQ	0000000000000007H
	DQ	0000000000000009H
	DQ	0000000000000005H
	DQ	0000000000000000H
	DQ	000000000000000fH
	DQ	000000000000000eH
	DQ	0000000000000002H
	DQ	0000000000000003H
	DQ	000000000000000cH
?sbox8@@3PA_KA DQ 000000000000000dH			; sbox8
	DQ	0000000000000002H
	DQ	0000000000000008H
	DQ	0000000000000004H
	DQ	0000000000000006H
	DQ	000000000000000fH
	DQ	000000000000000bH
	DQ	0000000000000001H
	DQ	000000000000000aH
	DQ	0000000000000009H
	DQ	0000000000000003H
	DQ	000000000000000eH
	DQ	0000000000000005H
	DQ	0000000000000000H
	DQ	000000000000000cH
	DQ	0000000000000007H
	DQ	0000000000000001H
	DQ	000000000000000fH
	DQ	000000000000000dH
	DQ	0000000000000008H
	DQ	000000000000000aH
	DQ	0000000000000003H
	DQ	0000000000000007H
	DQ	0000000000000004H
	DQ	000000000000000cH
	DQ	0000000000000005H
	DQ	0000000000000006H
	DQ	000000000000000bH
	DQ	0000000000000000H
	DQ	000000000000000eH
	DQ	0000000000000009H
	DQ	0000000000000002H
	DQ	0000000000000007H
	DQ	000000000000000bH
	DQ	0000000000000004H
	DQ	0000000000000001H
	DQ	0000000000000009H
	DQ	000000000000000cH
	DQ	000000000000000eH
	DQ	0000000000000002H
	DQ	0000000000000000H
	DQ	0000000000000006H
	DQ	000000000000000aH
	DQ	000000000000000dH
	DQ	000000000000000fH
	DQ	0000000000000003H
	DQ	0000000000000005H
	DQ	0000000000000008H
	DQ	0000000000000002H
	DQ	0000000000000001H
	DQ	000000000000000eH
	DQ	0000000000000007H
	DQ	0000000000000004H
	DQ	000000000000000aH
	DQ	0000000000000008H
	DQ	000000000000000dH
	DQ	000000000000000fH
	DQ	000000000000000cH
	DQ	0000000000000009H
	DQ	0000000000000000H
	DQ	0000000000000003H
	DQ	0000000000000005H
	DQ	0000000000000006H
	DQ	000000000000000bH
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	?compare@?$char_traits@D@std@@SAHQEBD0_K@Z	; std::char_traits<char>::compare
PUBLIC	?length@?$char_traits@D@std@@SA_KQEBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAEADAEBD@Z	; std::char_traits<char>::assign
PUBLIC	?to_char_type@?$char_traits@D@std@@SADAEBH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHAEBD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?not_eof@?$char_traits@D@std@@SAHAEBH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??0_Container_proxy@std@@QEAA@XZ		; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QEAA@XZ		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??1_Iterator_base12@std@@QEAA@XZ		; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QEAAXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	??$_Get_size_of_n@$00@std@@YA_K_K@Z		; std::_Get_size_of_n<1>
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64>
PUBLIC	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z		; std::_Min_value<unsigned __int64>
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	??0bad_cast@std@@QEAA@XZ			; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UEAA@XZ			; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QEAA@AEBV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UEAAPEAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??1locale@std@@QEAA@XZ				; std::locale::~locale
PUBLIC	?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z	; std::locale::_Getfacet
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z	; std::_Ungetc<char>
PUBLIC	?charHexValue@@YAEE@Z				; charHexValue
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; prepUserKey
PUBLIC	?makeK0@@YA_K_K@Z				; makeK0
PUBLIC	?compressRoundKeys@@YAXQEA_K@Z			; compressRoundKeys
PUBLIC	?makeRoundKeys@@YAX_KQEA_K@Z			; makeRoundKeys
PUBLIC	?initialP@@YA_K_K@Z				; initialP
PUBLIC	?finalP@@YA_K_K@Z				; finalP
PUBLIC	?desRound@@YA_K_K0@Z				; desRound
PUBLIC	?desEncrypt@@YA_K_K@Z				; desEncrypt
PUBLIC	?desDecrypt@@YA_K_K@Z				; desDecrypt
PUBLIC	main
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
PUBLIC	?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ifstream<char,std::char_traits<char> >::is_open
PUBLIC	?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::is_open
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
PUBLIC	??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit2
PUBLIC	??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
PUBLIC	?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
PUBLIC	?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit2
PUBLIC	??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char *>
PUBLIC	??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z		; std::_Max_value<unsigned __int64>
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBAXQEADQEBD_KD@Z ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
PUBLIC	??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBAXQEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
PUBLIC	??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z		; std::_Refancy<char *,0>
PUBLIC	??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z		; std::_Unfancy<char const >
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
PUBLIC	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
PUBLIC	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z	; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z ; std::_Traits_equal<std::char_traits<char> >
PUBLIC	??$?0PEAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
PUBLIC	??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z ; std::forward<std::_Facet_base * &>
PUBLIC	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BO@PFIBPPKP@Error?3?5Invalid?5hex?5character?4@ ; `string'
PUBLIC	??_C@_0HA@LOPPIJEF@Error?3?5Bad?5Input?4?5Specify?5a?516?5@ ; `string'
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_C@_0GK@LPBMLFBC@Error?3?5Bad?5input?4?5This?5program?5@ ; `string'
PUBLIC	??_C@_02DBLKFNPN@?9d@				; `string'
PUBLIC	??_C@_02KEDOHJFP@?9D@				; `string'
PUBLIC	??_C@_02CIKBGMLM@?9e@				; `string'
PUBLIC	??_C@_02LNCFEIBO@?9E@				; `string'
PUBLIC	??_C@_0GC@JICANFHA@Error?3?5Bad?5input?3?5Action?5must?5b@ ; `string'
PUBLIC	??_C@_03MPBJFLIO@ecb@				; `string'
PUBLIC	??_C@_0FH@MALAPMCE@Error?3?5Bad?5Input?4?5ECB?5mode?5is?5o@ ; `string'
PUBLIC	??_C@_0BM@IBCEKME@Error?3?5File?5cannot?5be?5read?4@ ; `string'
PUBLIC	??_C@_02DMOBEKDI@?5s@				; `string'
PUBLIC	??_C@_01LFCBOECM@?4@				; `string'
PUBLIC	??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
PUBLIC	??_C@_0DF@IMIHIHOP@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0IC@DGJDAAEM@cannot?5dereference?5string?5itera@ ; `string'
PUBLIC	??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0FF@HJKEHIBC@cannot?5dereference?5string?5itera@ ; `string'
PUBLIC	??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	_TI2?AVbad_cast@std@@
PUBLIC	_CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_srand:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp__get_stream_buffer_pointers:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_fflush:PROC
EXTRN	__imp_fgetc:PROC
EXTRN	__imp_fgetpos:PROC
EXTRN	__imp_fputc:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp_fsetpos:PROC
EXTRN	__imp__fseeki64:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp_setvbuf:PROC
EXTRN	__imp_ungetc:PROC
EXTRN	__imp__lock_file:PROC
EXTRN	__imp__unlock_file:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPEBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Ebad_cast@std@@UEAAPEAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	__imp_toupper:PROC
EXTRN	__imp_tolower:PROC
EXTRN	?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__imp_??Bid@locale@std@@QEAA_KXZ:PROC
EXTRN	?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	__imp_?always_noconv@codecvt_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z:PROC
EXTRN	__imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z:PROC
EXTRN	__imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z:PROC
EXTRN	__imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z:PROC
EXTRN	__imp_??Bios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?exceptions@ios_base@std@@QEAAXH@Z:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ:PROC
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEBA?AVlocale@2@XZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z:PROC
EXTRN	__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z:PROC
EXTRN	__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ:PROC
EXTRN	__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAPEAD0PEAH001@Z:PROC
EXTRN	__imp_?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z:PROC
EXTRN	__imp_?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ:PROC
EXTRN	__imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@J@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEAD_J@Z:PROC
EXTRN	__imp_?gcount@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_JXZ:PROC
EXTRN	__imp_?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@_JH@Z:PROC
EXTRN	__imp_?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA?AV?$fpos@U_Mbstatet@@@2@XZ:PROC
EXTRN	?_Fiopen@std@@YAPEAU_iobuf@@PEBDHH@Z:PROC	; std::_Fiopen
EXTRN	__imp_clock:PROC
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A:QWORD
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A DQ 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+151
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?compare@?$char_traits@D@std@@SAHQEBD0_K@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$?compare@?$char_traits@D@std@@SAHQEBD0_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$char_traits@D@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?length@?$char_traits@D@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$char_traits@D@std@@SAXAEADAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?assign@?$char_traits@D@std@@SAXAEADAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_char_type@?$char_traits@D@std@@SADAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?to_char_type@?$char_traits@D@std@@SADAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_int_type@?$char_traits@D@std@@SAHAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?to_int_type@?$char_traits@D@std@@SAHAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+130
	DD	imagerel $unwind$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?not_eof@?$char_traits@D@std@@SAHAEBH@Z DD imagerel $LN7
	DD	imagerel $LN7+160
	DD	imagerel $unwind$?not_eof@?$char_traits@D@std@@SAHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$char_traits@D@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?eof@?$char_traits@D@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+248
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Iterator_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$??0_Iterator_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Iterator_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+166
	DD	imagerel $unwind$??1_Iterator_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DD imagerel $LN6
	DD	imagerel $LN6+301
	DD	imagerel $unwind$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+129
	DD	imagerel $unwind$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DD imagerel $LN15
	DD	imagerel $LN15+313
	DD	imagerel $unwind$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+476
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??$_Convert_size@_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+154
	DD	imagerel $unwind$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@D@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??0?$allocator@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+132
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD imagerel $LN4
	DD	imagerel $LN4+122
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+122
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+107
	DD	imagerel $unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+292
	DD	imagerel $unwind$?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+215
	DD	imagerel $unwind$?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+132
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+259
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+283
	DD	imagerel $unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z DD imagerel $LN12
	DD	imagerel $LN12+237
	DD	imagerel $unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z DD imagerel $LN4
	DD	imagerel $LN4+256
	DD	imagerel $unwind$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ DD imagerel $LN4
	DD	imagerel $LN4+153
	DD	imagerel $unwind$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ@4HA DD imagerel ?dtor$0@?0??front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ@4HA
	DD	imagerel ?dtor$0@?0??front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+243
	DD	imagerel $unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+162
	DD	imagerel $unwind$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+284
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+144
	DD	imagerel $unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+255
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_cast@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??1bad_cast@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_cast@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gbad_cast@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1locale@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+195
	DD	imagerel $unwind$??1locale@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD imagerel $LN10
	DD	imagerel $LN10+256
	DD	imagerel $unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z DD imagerel $LN5
	DD	imagerel $LN5+128
	DD	imagerel $unwind$??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?charHexValue@@YAEE@Z DD imagerel $LN9
	DD	imagerel $LN9+229
	DD	imagerel $unwind$?charHexValue@@YAEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+1045
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN12
	DD	imagerel $LN12+1306
	DD	imagerel $unwind$?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD imagerel ?dtor$0@?0??prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	imagerel ?dtor$0@?0??prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?makeK0@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+2050
	DD	imagerel $unwind$?makeK0@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?compressRoundKeys@@YAXQEA_K@Z DD imagerel $LN771
	DD	imagerel $LN771+35368
	DD	imagerel $unwind$?compressRoundKeys@@YAXQEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?makeRoundKeys@@YAX_KQEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+1872
	DD	imagerel $unwind$?makeRoundKeys@@YAX_KQEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?initialP@@YA_K_K@Z DD imagerel $LN67
	DD	imagerel $LN67+3146
	DD	imagerel $unwind$?initialP@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?finalP@@YA_K_K@Z DD imagerel $LN67
	DD	imagerel $LN67+3146
	DD	imagerel $unwind$?finalP@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?desRound@@YA_K_K0@Z DD imagerel $LN67
	DD	imagerel $LN67+5340
	DD	imagerel $unwind$?desRound@@YA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?desEncrypt@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+798
	DD	imagerel $unwind$?desEncrypt@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?desDecrypt@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+798
	DD	imagerel $unwind$?desDecrypt@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN62
	DD	imagerel $LN62+5092
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$0 DD imagerel main$dtor$0
	DD	imagerel main$dtor$0+36
	DD	imagerel $unwind$main$dtor$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$2 DD imagerel main$dtor$2
	DD	imagerel main$dtor$2+39
	DD	imagerel $unwind$main$dtor$2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$3 DD imagerel main$dtor$3
	DD	imagerel main$dtor$3+39
	DD	imagerel $unwind$main$dtor$3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$4 DD imagerel main$dtor$4
	DD	imagerel main$dtor$4+39
	DD	imagerel $unwind$main$dtor$4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$5 DD imagerel main$dtor$5
	DD	imagerel main$dtor$5+39
	DD	imagerel $unwind$main$dtor$5
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$6 DD imagerel main$dtor$6
	DD	imagerel main$dtor$6+39
	DD	imagerel $unwind$main$dtor$6
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$7 DD imagerel main$dtor$7
	DD	imagerel main$dtor$7+39
	DD	imagerel $unwind$main$dtor$7
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$catch$9 DD imagerel main$catch$9
	DD	imagerel main$catch$9+103
	DD	imagerel $unwind$main$catch$9
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$8 DD imagerel main$dtor$8
	DD	imagerel main$dtor$8+39
	DD	imagerel $unwind$main$dtor$8
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD imagerel $LN9
	DD	imagerel $LN9+396
	DD	imagerel $unwind$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA+67
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA+44
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD imagerel ?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	imagerel ?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA+43
	DD	imagerel $unwind$?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z DD imagerel $LN4
	DD	imagerel $LN4+214
	DD	imagerel $unwind$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+217
	DD	imagerel $unwind$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+132
	DD	imagerel $unwind$?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z DD imagerel $LN4
	DD	imagerel $LN4+141
	DD	imagerel $unwind$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA+40
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+165
	DD	imagerel $unwind$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+110
	DD	imagerel $unwind$?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD imagerel $LN6
	DD	imagerel $LN6+257
	DD	imagerel $unwind$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA DD imagerel ?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA
	DD	imagerel ?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ DD imagerel $LN7
	DD	imagerel $LN7+185
	DD	imagerel $unwind$?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD imagerel $LN18
	DD	imagerel $LN18+763
	DD	imagerel $unwind$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD imagerel $LN13
	DD	imagerel $LN13+498
	DD	imagerel $unwind$?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN7
	DD	imagerel $LN7+296
	DD	imagerel $unwind$?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN21
	DD	imagerel $LN21+923
	DD	imagerel $unwind$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD imagerel ?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	imagerel ?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z DD imagerel $LN9
	DD	imagerel $LN9+442
	DD	imagerel $unwind$?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z DD imagerel $LN9
	DD	imagerel $LN9+430
	DD	imagerel $unwind$?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD imagerel $LN8
	DD	imagerel $LN8+397
	DD	imagerel $unwind$?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD imagerel $LN5
	DD	imagerel $LN5+320
	DD	imagerel $unwind$?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z DD imagerel $LN8
	DD	imagerel $LN8+223
	DD	imagerel $unwind$?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN5
	DD	imagerel $LN5+217
	DD	imagerel $unwind$?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z DD imagerel $LN6
	DD	imagerel $LN6+374
	DD	imagerel $unwind$?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ DD imagerel $LN15
	DD	imagerel $LN15+489
	DD	imagerel $unwind$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+142
	DD	imagerel $unwind$?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+148
	DD	imagerel $unwind$?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+199
	DD	imagerel $unwind$?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+129
	DD	imagerel $unwind$??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD imagerel $LN9
	DD	imagerel $LN9+396
	DD	imagerel $unwind$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA+67
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA+44
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD imagerel ?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	imagerel ?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA+43
	DD	imagerel $unwind$?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z DD imagerel $LN4
	DD	imagerel $LN4+214
	DD	imagerel $unwind$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+217
	DD	imagerel $unwind$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+132
	DD	imagerel $unwind$?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+129
	DD	imagerel $unwind$??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@D@std@@YAPEADPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD imagerel $LN11
	DD	imagerel $LN11+430
	DD	imagerel $unwind$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA+37
	DD	imagerel $unwind$?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+130
	DD	imagerel $unwind$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ DD imagerel $LN30
	DD	imagerel $LN30+532
	DD	imagerel $unwind$??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+231
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+217
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN5
	DD	imagerel $LN5+331
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+119
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+102
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+154
	DD	imagerel $unwind$??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+107
	DD	imagerel $unwind$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBAXQEADQEBD_KD@Z DD imagerel $LN3
	DD	imagerel $LN3+181
	DD	imagerel $unwind$??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBAXQEADQEBD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z DD imagerel $LN6
	DD	imagerel $LN6+572
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBAXQEAD_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBAXQEAD_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+434
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+117
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+164
	DD	imagerel $unwind$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+146
	DD	imagerel $unwind$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+303
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z DD imagerel $LN5
	DD	imagerel $LN5+167
	DD	imagerel $unwind$??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0PEAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$??$?0PEAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD imagerel ??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD imagerel ??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 01H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	imagerel ??_R3bad_cast@std@@8
	DD	imagerel ??_R4bad_cast@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	imagerel ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	0a8H
	DD	04H
	DD	imagerel ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD imagerel ??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD imagerel ??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ios_base@std@@8
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	imagerel ??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	0b0H
	DD	04H
	DD	imagerel ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_cast@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
_CTA2?AVbad_cast@std@@ DD 02H
	DD	imagerel _CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI2?AVbad_cast@std@@
xdata$x	SEGMENT
_TI2?AVbad_cast@std@@ DD 00H
	DD	imagerel ??1bad_cast@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.'
	DB	00H, 'g', 00H, '.', 00H, ' ', 00H, 'a', 00H, 'n', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@HJKEHIBC@cannot?5dereference?5string?5itera@
CONST	SEGMENT
??_C@_0FF@HJKEHIBC@cannot?5dereference?5string?5itera@ DB 'cannot derefer'
	DB	'ence string iterator because it is out of range (e.g. an end '
	DB	'iterator)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'a', 00H
	DB	's', 00H, '"', 00H, ' ', 00H, '"', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.'
	DB	00H, 'g', 00H, '.', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'c', 00H, 'c', 00H
	DB	'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ' ', 00H, 'w', 00H, 'a', 00H, 's', 00H, ' ', 00H, 'd', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'y', 00H, 'e'
	DB	00H, 'd', 00H, ')', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IC@DGJDAAEM@cannot?5dereference?5string?5itera@
CONST	SEGMENT
??_C@_0IC@DGJDAAEM@cannot?5dereference?5string?5itera@ DB 'cannot derefer'
	DB	'ence string iterator because the iterator was invalidated (e.'
	DB	'g. reallocation occurred, or the string was destroyed)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@IMIHIHOP@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DF@IMIHIHOP@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized string iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
CONST	SEGMENT
??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H
	DB	's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '[', 00H, ']', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xstring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ DB 'string subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4@
CONST	SEGMENT
??_C@_01LFCBOECM@?4@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DMOBEKDI@?5s@
CONST	SEGMENT
??_C@_02DMOBEKDI@?5s@ DB ' s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IBCEKME@Error?3?5File?5cannot?5be?5read?4@
CONST	SEGMENT
??_C@_0BM@IBCEKME@Error?3?5File?5cannot?5be?5read?4@ DB 'Error: File cann'
	DB	'ot be read.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@MALAPMCE@Error?3?5Bad?5Input?4?5ECB?5mode?5is?5o@
CONST	SEGMENT
??_C@_0FH@MALAPMCE@Error?3?5Bad?5Input?4?5ECB?5mode?5is?5o@ DB 'Error: Ba'
	DB	'd Input. ECB mode is only accepted. <action> <key> <mode> <in'
	DB	'file> <outfile>', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MPBJFLIO@ecb@
CONST	SEGMENT
??_C@_03MPBJFLIO@ecb@ DB 'ecb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@JICANFHA@Error?3?5Bad?5input?3?5Action?5must?5b@
CONST	SEGMENT
??_C@_0GC@JICANFHA@Error?3?5Bad?5input?3?5Action?5must?5b@ DB 'Error: Bad'
	DB	' input: Action must be specified as -e or -d. <action> <key> '
	DB	'<mode> <infile> <outfile>', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LNCFEIBO@?9E@
CONST	SEGMENT
??_C@_02LNCFEIBO@?9E@ DB '-E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CIKBGMLM@?9e@
CONST	SEGMENT
??_C@_02CIKBGMLM@?9e@ DB '-e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEDOHJFP@?9D@
CONST	SEGMENT
??_C@_02KEDOHJFP@?9D@ DB '-D', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DBLKFNPN@?9d@
CONST	SEGMENT
??_C@_02DBLKFNPN@?9d@ DB '-d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@LPBMLFBC@Error?3?5Bad?5input?4?5This?5program?5@
CONST	SEGMENT
??_C@_0GK@LPBMLFBC@Error?3?5Bad?5input?4?5This?5program?5@ DB 'Error: Bad'
	DB	' input. This program accepts the following arguments: <action'
	DB	'> <key> <mode> <infile> <outfile>', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
	DD	0a8H
CONST	ENDS
;	COMDAT ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
	DD	0b0H
CONST	ENDS
;	COMDAT ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
	DQ	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DQ	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DQ	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ
	DQ	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
	DQ	FLAT:?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
	DQ	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DQ	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DQ	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z
	DQ	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0HA@LOPPIJEF@Error?3?5Bad?5Input?4?5Specify?5a?516?5@
CONST	SEGMENT
??_C@_0HA@LOPPIJEF@Error?3?5Bad?5Input?4?5Specify?5a?516?5@ DB 'Error: Ba'
	DB	'd Input. Specify a 16 digit hex value or a 8 character string'
	DB	' surrounded by single quotes for the key.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFIBPPKP@Error?3?5Invalid?5hex?5character?4@
CONST	SEGMENT
??_C@_0BO@PFIBPPKP@Error?3?5Invalid?5hex?5character?4@ DB 'Error: Invalid'
	DB	' hex character.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DQ FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DQ	FLAT:??_Ebad_cast@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xmemory0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA DD 072H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xutility', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z DD imagerel ??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0PEAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z DD imagerel ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z DD 025054419H
	DD	011d2322H
	DD	070160021H
	DD	05015H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z DD imagerel ??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 035052a01H
	DD	010e3313H
	DD	07007002bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD imagerel ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD imagerel ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ DD imagerel ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070025H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ DD imagerel ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ DD imagerel ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ DD imagerel ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ DD imagerel ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD imagerel ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ DD imagerel ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ DD imagerel ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD imagerel ?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z DD imagerel ??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
	DD	0128H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z DD 025063501H
	DD	0119231eH
	DD	070120020H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z DD imagerel ??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z DD imagerel ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD 025054a19H
	DD	011d2322H
	DD	070160031H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc DD 0a8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0
	ORG $+48
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBAXQEAD_KQEBD@Z DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z DD 035054a19H
	DD	011d3322H
	DD	070160043H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcVarDesc DD 0f8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcName$0
	ORG $+48
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
	DD	00H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBAXQEADQEBD_KD@Z DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z DD imagerel ??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z DD 025053a19H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD imagerel ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	0ffffffffH
	DD	imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z+90
	DD	00H
	DD	imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z+314
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070023H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ DD 035052a01H
	DD	010e3313H
	DD	07007002bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD imagerel ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z+95
	DD	00H
	DD	imagerel ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z+279
	DD	01H
	DD	imagerel ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z+343
	DD	00H
	DD	imagerel ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z+366
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD 025054619H
	DD	010e2313H
	DD	070070043H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
	DD	020aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$0 DB 05fH ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$1 DB 05fH ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DB	050H
	DB	073H
	DB	061H
	DB	076H
	DB	065H
	DB	00H
	ORG $+1
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$2 DB 05fH ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DB	050H
	DB	073H
	DB	061H
	DB	076H
	DB	065H
	DB	05fH
	DB	067H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+3
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcVarDesc DD 0c8H ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DD	08H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$0
	ORG $+144
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcFrameData DD 03H ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DD	00H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcVarDesc
$cppxdata$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
	DD	01f8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD imagerel ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z+139
	DD	00H
	DD	imagerel ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z+188
	DD	01H
	DD	imagerel ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z+287
	DD	02H
	DD	imagerel ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z+379
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
	DD	0108H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD 025054411H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ DD 035053b19H
	DD	010e3313H
	DD	07007003dH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	01d0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+2
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcVarDesc DD 098H ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DD	08H
	DQ	FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$1
	DD	058H
	DD	020H
	DQ	FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$0
	ORG $+96
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcFrameData DD 02H ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DD	00H
	DQ	FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z DD 045054519H
	DD	0118431dH
	DD	070110031H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DB	050H
	DB	062H
	DB	00H
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DB	050H
	DB	06eH
	DB	00H
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$2 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DB	04eH
	DB	072H
	DB	00H
	ORG $+4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcVarDesc DD 088H ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DD	08H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$0
	ORG $+144
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcFrameData DD 03H ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DD	00H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 025052a01H
	DD	010e2313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD 025054a19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
	DB	04fH
	DB	066H
	DB	066H
	DB	00H
	ORG $+11
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcVarDesc DD 028H ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
	DD	08H
	DQ	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcName$0
	ORG $+48
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcFrameData DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
	DD	00H
	DQ	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD 025054a19H
	DD	011d2322H
	DD	070160021H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+2
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcVarDesc DD 028H ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
	DD	08H
	DQ	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcName$0
	ORG $+48
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcFrameData DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
	DD	00H
	DQ	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DD	0ffffffffH
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+303
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+349
	DD	0ffffffffH
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+369
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+746
	DD	0ffffffffH
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+763
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+816
	DD	0ffffffffH
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+833
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+844
	DD	0ffffffffH
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+861
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+876
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 045054619H
	DD	010e4313H
	DD	070070059H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DD	02baH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	043H
	DB	068H
	DB	00H
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$2 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	053H
	DB	072H
	DB	063H
	DB	00H
	ORG $+3
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$3 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	043H
	DB	068H
	DB	00H
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$4 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+2
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc DD 0108H ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DD	08H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$4
	DD	0e4H
	DD	01H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$3
	DD	0a8H
	DD	08H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$2
	DD	068H
	DD	028H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$1
	DD	044H
	DD	01H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0
	ORG $+240
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData DD 05H ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DD	00H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc
$cppxdata$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DD	00H
	DD	00H
	DD	0bH
	DD	imagerel $ip2state$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DD	0288H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 025053b19H
	DD	010e2313H
	DD	070070027H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::underflow
	DB	04dH
	DB	065H
	DB	074H
	DB	061H
	DB	00H
	ORG $+10
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc DD 024H ; std::basic_filebuf<char,std::char_traits<char> >::underflow
	DD	04H
	DQ	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0
	ORG $+48
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::underflow
	DD	00H
	DQ	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD 025052e01H
	DD	01122317H
	DD	0700b002dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD 045053f19H
	DD	01124317H
	DD	0700b0043H
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	0200H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	043H
	DB	068H
	DB	00H
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$2 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	053H
	DB	072H
	DB	063H
	DB	00H
	ORG $+3
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$3 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+6
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcVarDesc DD 0e8H ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DD	08H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$3
	DD	0c8H
	DD	08H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$2
	DD	0a4H
	DD	01H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$1
	DD	068H
	DD	020H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$0
	ORG $+192
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcFrameData DD 04H ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DD	00H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD imagerel ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
	DD	0ffffffffH
	DD	imagerel ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z+200
	DD	00H
	DD	imagerel ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z+228
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
	DD	0138H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD 025054411H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z DD imagerel ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z+84
	DD	00H
	DD	imagerel ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z+124
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD imagerel ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z+139
	DD	00H
	DD	imagerel ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z+188
	DD	01H
	DD	imagerel ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z+287
	DD	02H
	DD	imagerel ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z+379
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
	DD	0108H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD 025054411H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$8 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$catch$9 DD 031019H
	DD	0700c6210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$7 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$6 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$5 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$4 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$3 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$2 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$0 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$main DD imagerel main
	DD	0ffffffffH
	DD	imagerel main+169
	DD	00H
	DD	imagerel main+450
	DD	01H
	DD	imagerel main+470
	DD	02H
	DD	imagerel main+670
	DD	03H
	DD	imagerel main+703
	DD	05H
	DD	imagerel main+788
	DD	06H
	DD	imagerel main+910
	DD	07H
	DD	imagerel main+2470
	DD	00H
	DD	imagerel main+2472
	DD	07H
	DD	imagerel main+2822
	DD	00H
	DD	imagerel main+2824
	DD	07H
	DD	imagerel main+4766
	DD	06H
	DD	imagerel main+4779
	DD	05H
	DD	imagerel main+4792
	DD	04H
	DD	imagerel main+4924
	DD	03H
	DD	imagerel main+4937
	DD	02H
	DD	imagerel main+4950
	DD	01H
	DD	imagerel main+4963
	DD	00H
	DD	imagerel main+4976
	DD	0ffffffffH
	DD	imagerel main+5040
	DD	00H
	DD	imagerel main$catch$9+20
	DD	09H
	DD	imagerel main$catch$9+88
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$main DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	0578H
	DD	imagerel main$catch$9
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$main DD	05H
	DD	07H
	DD	09H
	DD	01H
	DD	imagerel $handlerMap$0$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$main DD 0ffffffffH
	DD	imagerel main$dtor$0
	DD	00H
	DD	imagerel main$dtor$2
	DD	01H
	DD	imagerel main$dtor$3
	DD	02H
	DD	imagerel main$dtor$4
	DD	03H
	DD	imagerel main$dtor$5
	DD	04H
	DD	00H
	DD	05H
	DD	imagerel main$dtor$6
	DD	06H
	DD	imagerel main$dtor$7
	DD	04H
	DD	00H
	DD	08H
	DD	imagerel main$dtor$8
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	035054919H
	DD	01123317H
	DD	0700b013bH
	DD	0500aH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$main
	DD	09cbH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 061H
	DB	072H
	DB	067H
	DB	031H
	DB	00H
	ORG $+3
main$rtcName$1 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
main$rtcName$2 DB 06dH
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+3
main$rtcName$3 DB 069H
	DB	06eH
	DB	066H
	DB	069H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+1
main$rtcName$4 DB 06fH
	DB	075H
	DB	074H
	DB	066H
	DB	069H
	DB	06cH
	DB	065H
	DB	00H
main$rtcName$5 DB 069H
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	054H
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	ORG $+2
main$rtcName$6 DB 062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
main$rtcName$8 DB 065H
	DB	00H
	ORG $+2
main$rtcName$7 DB 06fH
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	054H
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	ORG $+5
main$rtcVarDesc DD 0578H
	DD	018H
	DQ	FLAT:main$rtcName$8
	DD	03d0H
	DD	0108H
	DQ	FLAT:main$rtcName$7
	DD	03a8H
	DD	08H
	DQ	FLAT:main$rtcName$6
	DD	0280H
	DD	0110H
	DQ	FLAT:main$rtcName$5
	DD	01f8H
	DD	028H
	DQ	FLAT:main$rtcName$4
	DD	01b8H
	DD	028H
	DQ	FLAT:main$rtcName$3
	DD	0138H
	DD	028H
	DQ	FLAT:main$rtcName$2
	DD	0f8H
	DD	028H
	DQ	FLAT:main$rtcName$1
	DD	078H
	DD	028H
	DQ	FLAT:main$rtcName$0
	ORG $+432
main$rtcFrameData DD 09H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
$cppxdata$main DD 019930522H
	DD	0aH
	DD	imagerel $stateUnwindMap$main
	DD	01H
	DD	imagerel $tryMap$main
	DD	017H
	DD	imagerel $ip2state$main
	DD	0998H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?desDecrypt@@YA_K_K@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?desEncrypt@@YA_K_K@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?desRound@@YA_K_K0@Z DD 025052f01H
	DD	01132318H
	DD	0700c0041H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?finalP@@YA_K_K@Z DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?initialP@@YA_K_K@Z DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?makeRoundKeys@@YAX_KQEA_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?compressRoundKeys@@YAXQEA_K@Z DD 025052a01H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?makeK0@@YA_K_K@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel ?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	0ffffffffH
	DD	imagerel ?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+53
	DD	00H
	DD	imagerel ?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+1277
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	0148H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 025053511H
	DD	010e2313H
	DD	07007002dH
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0ffffffffH
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+281
	DD	00H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+311
	DD	01H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+924
	DD	00H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+982
	DD	0ffffffffH
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+20
	DD	02H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+65
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025054b19H
	DD	01132318H
	DD	0700c0049H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	023bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 088H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	01H
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	08H
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0218H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?charHexValue@@YAEE@Z DD 025052901H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z DD 025052e01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1locale@std@@QEAA@XZ DD imagerel ??1locale@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1locale@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1locale@std@@QEAA@XZ
	DD	0128H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1locale@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1locale@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_cast@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@AEBV01@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_cast@std@@UEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0bad_cast@std@@QEAA@XZ DD imagerel ??0bad_cast@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0bad_cast@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0bad_cast@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0bad_cast@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007002dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z DD 025054019H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcVarDesc DD 068H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z DD imagerel ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z DD 025053a19H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025054619H
	DD	010e2313H
	DD	070070035H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	DD	019bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc
$cppxdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	DD	0188H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ DD imagerel ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ
	DD	0ffffffffH
	DD	imagerel ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ+105
	DD	00H
	DD	imagerel ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ+124
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ
	DD	0138H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ DD 025053511H
	DD	010e2313H
	DD	07007002dH
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z DD 025052e01H
	DD	01122317H
	DD	0700b0031H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z DD 035052f01H
	DD	01133318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD imagerel ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 025053a19H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z DD 025053401H
	DD	0118231dH
	DD	070110031H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD 025053401H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z+83
	DD	00H
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z+115
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ DD imagerel ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD 025053b19H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	05fH
	DB	061H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+15
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
	DD	01H
	DQ	FLAT:?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
	DD	00H
	DQ	FLAT:?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD 025053b19H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	05fH
	DB	061H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+15
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
	DD	01H
	DQ	FLAT:?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
	DD	00H
	DQ	FLAT:?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD imagerel ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD imagerel ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ+88
	DD	00H
	DD	imagerel ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ+101
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
	DD	0108H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070025H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD imagerel ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD 025053f19H
	DD	0118231dH
	DD	070110025H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$allocator@D@std@@QEAA@XZ DD imagerel ??0?$allocator@D@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$allocator@D@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$allocator@D@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@D@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$allocator@D@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z DD imagerel ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z DD 025053a19H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K@std@@YA_K_K@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 035052f01H
	DD	01133318H
	DD	0700c002fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DD imagerel ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
	DD	0118H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DD 035053519H
	DD	010e3313H
	DD	070070027H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ DD imagerel ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DD imagerel ?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DD 025054b19H
	DD	01132318H
	DD	0700c002dH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
	DD	015bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$0 DB 05fH ; std::_Iterator_base12::_Adopt
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$1 DB 05fH ; std::_Iterator_base12::_Adopt
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcVarDesc DD 064H ; std::_Iterator_base12::_Adopt
	DD	04H
	DQ	FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$0
	ORG $+96
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcFrameData DD 02H ; std::_Iterator_base12::_Adopt
	DD	00H
	DQ	FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcVarDesc
$cppxdata$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
	DD	0148H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Iterator_base12@std@@QEAA@XZ DD imagerel ??1_Iterator_base12@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Iterator_base12@std@@QEAA@XZ DD 025054619H
	DD	010e2313H
	DD	070070025H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??1_Iterator_base12@std@@QEAA@XZ
	DD	011bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1_Iterator_base12@std@@QEAA@XZ$rtcName$0 DB 05fH	; std::_Iterator_base12::~_Iterator_base12
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
??1_Iterator_base12@std@@QEAA@XZ$rtcVarDesc DD 024H	; std::_Iterator_base12::~_Iterator_base12
	DD	04H
	DQ	FLAT:??1_Iterator_base12@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1_Iterator_base12@std@@QEAA@XZ$rtcFrameData DD 01H	; std::_Iterator_base12::~_Iterator_base12
	DD	00H
	DQ	FLAT:??1_Iterator_base12@std@@QEAA@XZ$rtcVarDesc
$cppxdata$??1_Iterator_base12@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1_Iterator_base12@std@@QEAA@XZ
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0_Iterator_base12@std@@QEAA@XZ DD imagerel ??0_Iterator_base12@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0_Iterator_base12@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0_Iterator_base12@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Iterator_base12@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0_Iterator_base12@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel ?_Orphan_all@_Container_base12@std@@QEAAXXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 025054619H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ
	DD	013bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all
	DD	04H
	DQ	FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all
	DD	00H
	DQ	FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcVarDesc
$cppxdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Orphan_all@_Container_base12@std@@QEAAXXZ
	DD	0128H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0_Container_proxy@std@@QEAA@XZ DD imagerel ??0_Container_proxy@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0_Container_proxy@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0_Container_proxy@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0_Container_proxy@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?eof@?$char_traits@D@std@@SAHXZ DD imagerel ?eof@?$char_traits@D@std@@SAHXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?eof@?$char_traits@D@std@@SAHXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?eof@?$char_traits@D@std@@SAHXZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$char_traits@D@std@@SAHXZ DD 025052919H
	DD	010a230fH
	DD	070030021H
	DD	05002H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?eof@?$char_traits@D@std@@SAHXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?not_eof@?$char_traits@D@std@@SAHAEBH@Z DD imagerel ?not_eof@?$char_traits@D@std@@SAHAEBH@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?not_eof@?$char_traits@D@std@@SAHAEBH@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?not_eof@?$char_traits@D@std@@SAHAEBH@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?not_eof@?$char_traits@D@std@@SAHAEBH@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?not_eof@?$char_traits@D@std@@SAHAEBH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z DD imagerel ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?to_int_type@?$char_traits@D@std@@SAHAEBD@Z DD imagerel ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?to_int_type@?$char_traits@D@std@@SAHAEBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?to_int_type@?$char_traits@D@std@@SAHAEBD@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_int_type@?$char_traits@D@std@@SAHAEBD@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?to_int_type@?$char_traits@D@std@@SAHAEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?to_char_type@?$char_traits@D@std@@SADAEBH@Z DD imagerel ?to_char_type@?$char_traits@D@std@@SADAEBH@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?to_char_type@?$char_traits@D@std@@SADAEBH@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?to_char_type@?$char_traits@D@std@@SADAEBH@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_char_type@?$char_traits@D@std@@SADAEBH@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?to_char_type@?$char_traits@D@std@@SADAEBH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?assign@?$char_traits@D@std@@SAXAEADAEBD@Z DD imagerel ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?assign@?$char_traits@D@std@@SAXAEADAEBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?assign@?$char_traits@D@std@@SAXAEADAEBD@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$char_traits@D@std@@SAXAEADAEBD@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?assign@?$char_traits@D@std@@SAXAEADAEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD imagerel ?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD imagerel ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?length@?$char_traits@D@std@@SA_KQEBD@Z DD imagerel ?length@?$char_traits@D@std@@SA_KQEBD@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?length@?$char_traits@D@std@@SA_KQEBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?length@?$char_traits@D@std@@SA_KQEBD@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$char_traits@D@std@@SA_KQEBD@Z DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?length@?$char_traits@D@std@@SA_KQEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?compare@?$char_traits@D@std@@SAHQEBD0_K@Z DD imagerel ?compare@?$char_traits@D@std@@SAHQEBD0_K@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?compare@?$char_traits@D@std@@SAHQEBD0_K@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?compare@?$char_traits@D@std@@SAHQEBD0_K@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?compare@?$char_traits@D@std@@SAHQEBD0_K@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?compare@?$char_traits@D@std@@SAHQEBD0_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel ?max@?$numeric_limits@_J@std@@SA_JXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?max@?$numeric_limits@_J@std@@SA_JXZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 025052919H
	DD	010a230fH
	DD	070030021H
	DD	05002H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?max@?$numeric_limits@_J@std@@SA_JXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1exception@std@@UEAA@XZ DD imagerel ??1exception@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1exception@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1exception@std@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1exception@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0exception@std@@QEAA@AEBV01@@Z DD imagerel ??0exception@std@@QEAA@AEBV01@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0exception@std@@QEAA@AEBV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0exception@std@@QEAA@AEBV01@@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0exception@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0exception@std@@QEAA@QEBDH@Z DD imagerel ??0exception@std@@QEAA@QEBDH@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0exception@std@@QEAA@QEBDH@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0exception@std@@QEAA@QEBDH@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0exception@std@@QEAA@QEBDH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??2@YAPEAX_KPEAX@Z DD imagerel ??2@YAPEAX_KPEAX@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??2@YAPEAX_KPEAX@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??2@YAPEAX_KPEAX@Z
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??2@YAPEAX_KPEAX@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
_TEXT	SEGMENT
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	48 63 41 fc	 movsxd	 rax, DWORD PTR [rcx-4]
  00004	48 2b c8	 sub	 rcx, rax
  00007	e9 00 00 00 00	 jmp	 ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
_TEXT	SEGMENT
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	48 63 41 fc	 movsxd	 rax, DWORD PTR [rcx-4]
  00004	48 2b c8	 sub	 rcx, rax
  00007	e9 00 00 00 00	 jmp	 ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z
_TEXT	SEGMENT
$T1 = 200
_Arg$ = 256
??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z PROC ; std::forward<std::_Facet_base * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
; Line 1573
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5ECFF36E_type_traits
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 1574
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]
; Line 1575
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z ENDP ; std::forward<std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
<_Val2_0>$ = 240
??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 277
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR <_Val2_0>$[rbp]
  00046	e8 00 00 00 00	 call	 ??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z ; std::forward<std::_Facet_base * &>
  0004b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 279
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?0PEAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_Ptr$ = 264
??$?0PEAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
; Line 2144
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0E7E0F59_memory
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 2143
  0003b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	4c 8d 85 08 01
	00 00		 lea	 r8, QWORD PTR _Ptr$[rbp]
  00049	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 ??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
; Line 2145
  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??$?0PEAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z
_TEXT	SEGMENT
$T1 = 200
tv70 = 212
_Left$ = 256
_Left_size$ = 264
_Right$ = 272
_Right_size$ = 280
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z PROC ; std::_Traits_equal<std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 25
$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00039	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0004b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00050	90		 npad	 1
; Line 26
  00051	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR _Right_size$[rbp]
  00058	48 39 85 08 01
	00 00		 cmp	 QWORD PTR _Left_size$[rbp], rax
  0005f	75 2b		 jne	 SHORT $LN3@Traits_equ
  00061	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR _Left_size$[rbp]
  00068	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  0006f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00076	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHQEBD0_K@Z ; std::char_traits<char>::compare
  0007b	90		 npad	 1
  0007c	85 c0		 test	 eax, eax
  0007e	75 0c		 jne	 SHORT $LN3@Traits_equ
  00080	c7 85 d4 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv70[rbp], 1
  0008a	eb 0a		 jmp	 SHORT $LN4@Traits_equ
$LN3@Traits_equ:
  0008c	c7 85 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv70[rbp], 0
$LN4@Traits_equ:
  00096	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR tv70[rbp]
; Line 27
  0009d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a4	5f		 pop	 rdi
  000a5	5d		 pop	 rbp
  000a6	c3		 ret	 0
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z ENDP ; std::_Traits_equal<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
$T1 = 200
_Arg$ = 256
??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
; Line 1573
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5ECFF36E_type_traits
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 1574
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]
; Line 1575
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 8
_Ptr_container$ = 40
_Ptr$ = 72
_Bytes$ = 320
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 92
$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 93
  00036	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  0003d	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  00041	48 89 45 08	 mov	 QWORD PTR _Block_size$[rbp], rax
; Line 94
  00045	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  0004c	48 39 45 08	 cmp	 QWORD PTR _Block_size$[rbp], rax
  00050	77 08		 ja	 SHORT $LN8@Allocate_m
; Line 97
  00052	48 c7 45 08 ff
	ff ff ff	 mov	 QWORD PTR _Block_size$[rbp], -1
$LN8@Allocate_m:
; Line 100
  0005a	48 8b 4d 08	 mov	 rcx, QWORD PTR _Block_size$[rbp]
  0005e	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00063	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Allocate_m:
; Line 101
  00067	48 83 7d 28 00	 cmp	 QWORD PTR _Ptr_container$[rbp], 0
  0006c	74 02		 je	 SHORT $LN9@Allocate_m
  0006e	eb 6b		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00070	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  00077	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0007c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00083	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00088	45 33 c9	 xor	 r9d, r9d
  0008b	41 b8 65 00 00
	00		 mov	 r8d, 101		; 00000065H
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00098	b9 02 00 00 00	 mov	 ecx, 2
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000a3	83 f8 01	 cmp	 eax, 1
  000a6	75 03		 jne	 SHORT $LN12@Allocate_m
  000a8	cc		 int	 3
  000a9	33 c0		 xor	 eax, eax
$LN12@Allocate_m:
  000ab	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000b4	41 b9 65 00 00
	00		 mov	 r9d, 101		; 00000065H
  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000d5	33 c0		 xor	 eax, eax
  000d7	85 c0		 test	 eax, eax
  000d9	75 95		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  000db	33 c0		 xor	 eax, eax
  000dd	85 c0		 test	 eax, eax
  000df	75 86		 jne	 SHORT $LN4@Allocate_m
; Line 103
  000e1	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_container$[rbp]
  000e5	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  000e9	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000ed	48 89 45 48	 mov	 QWORD PTR _Ptr$[rbp], rax
; Line 104
  000f1	b8 08 00 00 00	 mov	 eax, 8
  000f6	48 6b c0 ff	 imul	 rax, rax, -1
  000fa	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000fe	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr_container$[rbp]
  00102	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 107
  00106	b8 08 00 00 00	 mov	 eax, 8
  0010b	48 6b c0 fe	 imul	 rax, rax, -2
  0010f	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00113	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  0011d	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 109
  00121	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr$[rbp]
; Line 110
  00125	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0012c	5f		 pop	 rdi
  0012d	5d		 pop	 rbp
  0012e	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
_TEXT	SEGMENT
$T1 = 200
_Arg$ = 256
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z PROC		; std::forward<char * const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
; Line 1573
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5ECFF36E_type_traits
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 1574
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]
; Line 1575
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
; Line 2212
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0E7E0F59_memory
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
; Line 2211
  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??$?0PEAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
  0005a	90		 npad	 1
; Line 2213
  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
classSize$ = 232
?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  00034	33 c0		 xor	 eax, eax
  00036	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR classSize$[rbp]
  0003d	f3 aa		 rep stosb
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
_TEXT	SEGMENT
_Ans$ = 8
$T1 = 232
this$ = 288
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
; Line 2321
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0E7E0F59_memory
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2322
  00042	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
  0004e	90		 npad	 1
  0004f	48 89 45 08	 mov	 QWORD PTR _Ans$[rbp], rax
; Line 2323
  00053	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
  0005f	90		 npad	 1
  00060	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
; Line 2324
  00067	48 8b 45 08	 mov	 rax, QWORD PTR _Ans$[rbp]
; Line 2325
  0006b	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
; Line 2311
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0E7E0F59_memory
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2312
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
  0004e	90		 npad	 1
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
; Line 2313
  00052	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
tv75 = 216
this$ = 256
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
; Line 2293
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0E7E0F59_memory
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2294
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
  0004e	90		 npad	 1
  0004f	48 85 c0	 test	 rax, rax
  00052	74 34		 je	 SHORT $LN2@unique_ptr
; Line 2296
  00054	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
  00060	90		 npad	 1
  00061	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv75[rbp], rax
  00068	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006f	e8 00 00 00 00	 call	 ?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
  00074	90		 npad	 1
  00075	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv75[rbp]
  0007c	48 8b d1	 mov	 rdx, rcx
  0007f	48 8b c8	 mov	 rcx, rax
  00082	e8 00 00 00 00	 call	 ??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
  00087	90		 npad	 1
$LN2@unique_ptr:
; Line 2298
  00088	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008f	5f		 pop	 rdi
  00090	5d		 pop	 rbp
  00091	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 306
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 307
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
; Line 308
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 301
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 302
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
; Line 303
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 291
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 292
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
; Line 293
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
; Line 2163
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0E7E0F59_memory
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2164
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEBAAEBQEAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
  00051	90		 npad	 1
; Line 2165
  00052	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEBAAEBQEAV_Facet_base@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
; Line 2158
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0E7E0F59_memory
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2159
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAPEAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
  00051	90		 npad	 1
; Line 2160
  00052	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAPEAV_Facet_base@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
; Line 2148
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0E7E0F59_memory
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2149
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
  00051	90		 npad	 1
; Line 2150
  00052	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 264
tv70 = 280
this$ = 320
_Ptr$ = 328
??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
; Line 2081
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002f	48 c7 85 08 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T3[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0E7E0F59_memory
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
; Line 2084
  00047	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  0004e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  00055	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR $T2[rbp]
  0005c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00063	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR $T1[rbp], 0
  0006b	74 22		 je	 SHORT $LN3@operator
  0006d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  00074	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00077	ba 01 00 00 00	 mov	 edx, 1
  0007c	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  00083	ff 10		 call	 QWORD PTR [rax]
  00085	90		 npad	 1
  00086	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  0008d	eb 0b		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0008f	48 c7 85 18 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv70[rbp], 0
$LN4@operator:
; Line 2085
  0009a	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000a1	5f		 pop	 rdi
  000a2	5d		 pop	 rbp
  000a3	c3		 ret	 0
??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Max_possible$ = 8
_Result$ = 40
_Count$ = 288
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 23
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 24
  00036	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  00040	48 89 45 08	 mov	 QWORD PTR _Max_possible$[rbp], rax
; Line 25
  00044	48 6b 85 20 01
	00 00 10	 imul	 rax, QWORD PTR _Count$[rbp], 16
  0004c	48 89 45 28	 mov	 QWORD PTR _Result$[rbp], rax
; Line 26
  00050	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0005a	48 39 85 20 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00061	76 08		 jbe	 SHORT $LN2@Get_size_o
; Line 29
  00063	48 c7 45 28 ff
	ff ff ff	 mov	 QWORD PTR _Result$[rbp], -1
$LN2@Get_size_o:
; Line 32
  0006b	48 8b 45 28	 mov	 rax, QWORD PTR _Result$[rbp]
; Line 33
  0006f	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z PROC		; std::_Unfancy<char const >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; Line 345
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__122CF1B0_xstddef
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 346
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
; Line 347
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z ENDP		; std::_Unfancy<char const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z PROC		; std::_Refancy<char *,0>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 362
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 363
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
; Line 364
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z ENDP		; std::_Refancy<char *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
__formal$ = 264
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 986
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
; Line 987
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z
_TEXT	SEGMENT
$T1 = 200
__formal$ = 256
_Ptr$ = 264
<_Args_0>$ = 272
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 879
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00048	b9 10 00 00 00	 mov	 ecx, 16
  0004d	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00052	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00059	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00060	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ; std::forward<std::_Container_proxy>
  00065	48 8b bd c8 00
	00 00		 mov	 rdi, QWORD PTR $T1[rbp]
  0006c	48 8b f0	 mov	 rsi, rax
  0006f	b9 10 00 00 00	 mov	 ecx, 16
  00074	f3 a4		 rep movsb
; Line 882
  00076	48 8d a5 e0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+224]
  0007d	5f		 pop	 rdi
  0007e	5e		 pop	 rsi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; Line 345
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__122CF1B0_xstddef
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 346
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
; Line 347
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 1212
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1213
  0003b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00041	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00048	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0004f	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
; Line 1214
  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__formal$ = 224
_Ptr$ = 232
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 886
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 888
  0003b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
__formal$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 871
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 873
  00040	48 6b 85 f0 00
	00 00 10	 imul	 rax, QWORD PTR _Count$[rbp], 16
  00048	48 8b d0	 mov	 rdx, rax
  0004b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00052	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
; Line 874
  00057	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 996
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 997
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00042	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ; std::_Get_size_of_n<16>
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; Line 998
  0004f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 224
_Bytes$ = 232
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 199
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 201
  0003b	48 81 bd e8 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  00046	72 13		 jb	 SHORT $LN2@Deallocate
; Line 203
  00048	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR _Bytes$[rbp]
  0004f	48 8d 8d e0 00
	00 00		 lea	 rcx, QWORD PTR _Ptr$[rbp]
  00056	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:
; Line 207
  0005b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Bytes$[rbp]
  00062	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00069	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
; Line 208
  0006e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 180
$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 182
  00036	48 81 bd e0 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  00041	72 0e		 jb	 SHORT $LN2@Allocate
; Line 184
  00043	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  0004a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0004f	eb 1a		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:
; Line 188
  00051	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR _Bytes$[rbp], 0
  00059	74 0e		 je	 SHORT $LN3@Allocate
; Line 190
  0005b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00062	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00067	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:
; Line 193
  00069	33 c0		 xor	 eax, eax
$LN1@Allocate:
; Line 194
  0006b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z
_TEXT	SEGMENT
$T1 = 200
_Val$ = 256
??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z PROC ; std::addressof<std::codecvt<char,char,_Mbstatet> const >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; Line 329
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__122CF1B0_xstddef
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 330
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
; Line 331
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z ENDP ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
$T1 = 200
_Val$ = 256
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; Line 329
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__122CF1B0_xstddef
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 330
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
; Line 331
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z
_TEXT	SEGMENT
$T1 = 200
__formal$ = 256
_Ptr$ = 264
<_Args_0>$ = 272
??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 879
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00040	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00051	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00058	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  0005f	e8 00 00 00 00	 call	 ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ; std::forward<char * const &>
  00064	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  0006b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006e	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 882
  00071	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_capacity$ = 40
_New_capacity$ = 72
_Al$ = 104
_New_ptr$ = 136
__$ArrayPad$ = 344
this$ = 384
_New_size$ = 392
_Fn$ = 400
<_Args_0>$ = 408
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3887
$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00051	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 3889
  00056	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00062	48 39 85 88 01
	00 00		 cmp	 QWORD PTR _New_size$[rbp], rax
  00069	76 05		 jbe	 SHORT $LN2@Reallocate
; Line 3891
  0006b	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:
; Line 3894
  00070	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0007c	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
; Line 3895
  00080	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00084	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00088	48 89 45 28	 mov	 QWORD PTR _Old_capacity$[rbp], rax
; Line 3896
  0008c	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _New_size$[rbp]
  00093	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0009f	48 89 45 48	 mov	 QWORD PTR _New_capacity$[rbp], rax
; Line 3897
  000a3	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000aa	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000af	48 89 45 68	 mov	 QWORD PTR _Al$[rbp], rax
; Line 3898
  000b3	48 8b 45 48	 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000b7	48 83 c0 01	 add	 rax, 1
  000bb	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000c2	48 0f 42 c1	 cmovb	 rax, rcx
  000c6	48 8b d0	 mov	 rdx, rax
  000c9	48 8b 4d 68	 mov	 rcx, QWORD PTR _Al$[rbp]
  000cd	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000d2	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax
; Line 3899
  000d9	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000dd	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
; Line 3900
  000e2	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000e6	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000ed	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
; Line 3901
  000f1	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000f5	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  000f9	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
; Line 3902
  000fd	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00104	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00109	4c 8b 8d 98 01
	00 00		 mov	 r9, QWORD PTR <_Args_0>$[rbp]
  00110	4c 8b 85 88 01
	00 00		 mov	 r8, QWORD PTR _New_size$[rbp]
  00117	48 8b d0	 mov	 rdx, rax
  0011a	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00121	e8 00 00 00 00	 call	 ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBAXQEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
; Line 3903
  00126	48 83 7d 28 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  0012b	72 2c		 jb	 SHORT $LN3@Reallocate
; Line 3905
  0012d	48 8b 45 28	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  00131	48 ff c0	 inc	 rax
  00134	4c 8b c0	 mov	 r8, rax
  00137	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0013b	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0013f	48 8b 4d 68	 mov	 rcx, QWORD PTR _Al$[rbp]
  00143	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
; Line 3906
  00148	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0014c	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00153	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
; Line 3908
  00157	eb 23		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:
; Line 3910
  00159	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0015d	48 83 c0 08	 add	 rax, 8
  00161	48 8b c8	 mov	 rcx, rax
  00164	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
  00169	4c 8d 85 88 00
	00 00		 lea	 r8, QWORD PTR _New_ptr$[rbp]
  00170	48 8b d0	 mov	 rdx, rax
  00173	48 8b 4d 68	 mov	 rcx, QWORD PTR _Al$[rbp]
  00177	e8 00 00 00 00	 call	 ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
$LN4@Reallocate:
; Line 3913
  0017c	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:
; Line 3914
  00183	48 8b f8	 mov	 rdi, rax
  00186	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0018a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData
  00191	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00196	48 8b c7	 mov	 rax, rdi
  00199	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001a0	48 33 cd	 xor	 rcx, rbp
  001a3	e8 00 00 00 00	 call	 __security_check_cookie
  001a8	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  001af	5f		 pop	 rdi
  001b0	5d		 pop	 rbp
  001b1	c3		 ret	 0
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBAXQEAD_KQEBD@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Count$ = 272
_Ptr$ = 280
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBAXQEAD_KQEBD@Z PROC ; <lambda_66f57f934f28d61049862f64df852ff0>::operator(), COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2668
$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 2669
  00045	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0004c	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00053	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0005a	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy
; Line 2670
  0005f	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00066	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0006d	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00074	48 03 c8	 add	 rcx, rax
  00077	48 8b c1	 mov	 rax, rcx
  0007a	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00081	48 8b c8	 mov	 rcx, rax
  00084	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign
; Line 2671
  00089	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00090	5f		 pop	 rdi
  00091	5d		 pop	 rbp
  00092	c3		 ret	 0
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBAXQEAD_KQEBD@Z ENDP ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_New_size$ = 72
_Old_capacity$ = 104
_New_capacity$ = 136
_Al$ = 168
_New_ptr$ = 200
_Raw_new$ = 232
_Old_ptr$4 = 264
__$ArrayPad$ = 472
this$ = 512
_Size_increase$ = 520
_Fn$ = 528
<_Args_0>$ = 536
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3919
$LN6:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00051	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 3921
  00056	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005d	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00062	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
; Line 3922
  00066	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0006a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0006e	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax
; Line 3923
  00072	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00079	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0007e	48 2b 45 28	 sub	 rax, QWORD PTR _Old_size$[rbp]
  00082	48 3b 85 08 02
	00 00		 cmp	 rax, QWORD PTR _Size_increase$[rbp]
  00089	73 05		 jae	 SHORT $LN2@Reallocate
; Line 3925
  0008b	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:
; Line 3928
  00090	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR _Size_increase$[rbp]
  00097	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0009b	48 03 c8	 add	 rcx, rax
  0009e	48 8b c1	 mov	 rax, rcx
  000a1	48 89 45 48	 mov	 QWORD PTR _New_size$[rbp], rax
; Line 3929
  000a5	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000a9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ad	48 89 45 68	 mov	 QWORD PTR _Old_capacity$[rbp], rax
; Line 3930
  000b1	48 8b 55 48	 mov	 rdx, QWORD PTR _New_size$[rbp]
  000b5	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bc	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  000c1	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax
; Line 3931
  000c8	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000cf	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000d4	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Al$[rbp], rax
; Line 3932
  000db	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000e2	48 83 c0 01	 add	 rax, 1
  000e6	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000ed	48 0f 42 c1	 cmovb	 rax, rcx
  000f1	48 8b d0	 mov	 rdx, rax
  000f4	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  000fb	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00100	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax
; Line 3933
  00107	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0010b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
; Line 3934
  00110	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00114	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_size$[rbp]
  00118	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
; Line 3935
  0011c	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00120	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  00127	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
; Line 3936
  0012b	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00132	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00137	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Raw_new$[rbp], rax
; Line 3937
  0013e	48 83 7d 68 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  00143	72 6e		 jb	 SHORT $LN3@Reallocate
; Line 3939
  00145	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00149	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0014d	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Old_ptr$4[rbp], rax
; Line 3940
  00154	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Old_ptr$4[rbp]
  0015b	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00160	0f b6 8d 18 02
	00 00		 movzx	 ecx, BYTE PTR <_Args_0>$[rbp]
  00167	88 4c 24 20	 mov	 BYTE PTR [rsp+32], cl
  0016b	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  0016f	4c 8b c0	 mov	 r8, rax
  00172	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  00179	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00180	e8 00 00 00 00	 call	 ??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBAXQEADQEBD_KD@Z ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()
; Line 3941
  00185	48 8b 45 68	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  00189	48 ff c0	 inc	 rax
  0018c	4c 8b c0	 mov	 r8, rax
  0018f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$4[rbp]
  00196	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0019d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
; Line 3942
  001a2	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001a6	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  001ad	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
; Line 3944
  001b1	eb 53		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:
; Line 3946
  001b3	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001b7	48 83 c0 08	 add	 rax, 8
  001bb	0f b6 8d 18 02
	00 00		 movzx	 ecx, BYTE PTR <_Args_0>$[rbp]
  001c2	88 4c 24 20	 mov	 BYTE PTR [rsp+32], cl
  001c6	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  001ca	4c 8b c0	 mov	 r8, rax
  001cd	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  001d4	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  001db	e8 00 00 00 00	 call	 ??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBAXQEADQEBD_KD@Z ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()
; Line 3947
  001e0	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001e4	48 83 c0 08	 add	 rax, 8
  001e8	48 8b c8	 mov	 rcx, rax
  001eb	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
  001f0	4c 8d 85 c8 00
	00 00		 lea	 r8, QWORD PTR _New_ptr$[rbp]
  001f7	48 8b d0	 mov	 rdx, rax
  001fa	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00201	e8 00 00 00 00	 call	 ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
$LN4@Reallocate:
; Line 3950
  00206	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:
; Line 3951
  0020d	48 8b f8	 mov	 rdi, rax
  00210	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcFrameData
  0021b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00220	48 8b c7	 mov	 rax, rdi
  00223	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0022a	48 33 cd	 xor	 rcx, rbp
  0022d	e8 00 00 00 00	 call	 __security_check_cookie
  00232	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  00239	5f		 pop	 rdi
  0023a	5d		 pop	 rbp
  0023b	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBAXQEADQEBD_KD@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Old_ptr$ = 272
_Old_size$ = 280
_Ch$ = 288
??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBAXQEADQEBD_KD@Z PROC ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator(), COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3241
$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 3242
  00045	4c 8b 85 18 01
	00 00		 mov	 r8, QWORD PTR _Old_size$[rbp]
  0004c	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  00053	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0005a	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy
; Line 3243
  0005f	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR _Old_size$[rbp]
  00066	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0006d	48 03 c8	 add	 rcx, rax
  00070	48 8b c1	 mov	 rax, rcx
  00073	48 8d 95 20 01
	00 00		 lea	 rdx, QWORD PTR _Ch$[rbp]
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign
; Line 3244
  00082	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00089	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _New_ptr$[rbp]
  00090	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00097	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  0009c	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  000a3	48 8b c8	 mov	 rcx, rax
  000a6	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign
; Line 3245
  000ab	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b2	5f		 pop	 rdi
  000b3	5d		 pop	 rbp
  000b4	c3		 ret	 0
??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBAXQEADQEBD_KD@Z ENDP ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ
_TEXT	SEGMENT
this$ = 224
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1651
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1652
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
; Line 1653
  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 224
_Parg$ = 232
_Pstring$ = 240
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1647
$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1646
  00040	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Pstring$[rbp]
  00047	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Parg$[rbp]
  0004e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
; Line 1648
  0005a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00061	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00068	5f		 pop	 rdi
  00069	5d		 pop	 rbp
  0006a	c3		 ret	 0
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
$T2 = 232
tv65 = 248
_Left$ = 288
_Right$ = 296
??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z PROC		; std::_Max_value<unsigned __int64>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; Line 32
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E53366A2_utility
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
; Line 33
  00047	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0004e	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00055	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00058	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0005b	73 10		 jae	 SHORT $LN3@Max_value
  0005d	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00064	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  0006b	eb 0e		 jmp	 SHORT $LN4@Max_value
$LN3@Max_value:
  0006d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00074	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@Max_value:
  0007b	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  00082	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00089	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
; Line 34
  00090	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00097	5f		 pop	 rdi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z ENDP		; std::_Max_value<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z
_TEXT	SEGMENT
__formal$ = 224
_Ptr$ = 232
??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 886
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 888
  0003b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
$T1 = 200
_Val$ = 256
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; Line 329
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__122CF1B0_xstddef
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 330
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
; Line 331
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 277
$LN4:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00041	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; Line 279
  00055	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
; Line 152
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__375B2D08_ostream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 153
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
; Line 154
  00041	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
; Line 135
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__375B2D08_ostream
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 137
  00042	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00047	90		 npad	 1
  00048	0f b6 c0	 movzx	 eax, al
  0004b	85 c0		 test	 eax, eax
  0004d	75 11		 jne	 SHORT $LN2@sentry
; Line 139
  0004f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00056	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0005f	90		 npad	 1
$LN2@sentry:
; Line 144
  00060	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00067	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0006c	90		 npad	 1
  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Ostr$ = 264
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
; Line 121
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__375B2D08_ostream
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 120
  00046	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0004d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00059	90		 npad	 1
; Line 122
  0005a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00061	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00064	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00068	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	48 8b c8	 mov	 rcx, rax
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  0007e	0f b6 c0	 movzx	 eax, al
  00081	85 c0		 test	 eax, eax
  00083	0f 84 83 00 00
	00		 je	 $LN2@sentry
  00089	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00090	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00093	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00097	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0009e	48 03 c8	 add	 rcx, rax
  000a1	48 8b c1	 mov	 rax, rcx
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ad	48 85 c0	 test	 rax, rax
  000b0	74 5a		 je	 SHORT $LN2@sentry
  000b2	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000b9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000bc	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c0	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000c7	48 03 c8	 add	 rcx, rax
  000ca	48 8b c1	 mov	 rax, rcx
  000cd	48 8b c8	 mov	 rcx, rax
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000d6	48 3b 85 08 01
	00 00		 cmp	 rax, QWORD PTR _Ostr$[rbp]
  000dd	74 2d		 je	 SHORT $LN2@sentry
; Line 123
  000df	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e9	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ed	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000f4	48 03 c8	 add	 rcx, rax
  000f7	48 8b c1	 mov	 rax, rcx
  000fa	48 8b c8	 mov	 rcx, rax
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00103	48 8b c8	 mov	 rcx, rax
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
$LN2@sentry:
; Line 124
  0010c	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00113	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00116	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0011a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00121	48 03 c8	 add	 rcx, rax
  00124	48 8b c1	 mov	 rax, rcx
  00127	48 8b c8	 mov	 rcx, rax
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  00130	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00137	88 41 08	 mov	 BYTE PTR [rcx+8], al
; Line 125
  0013a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00141	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00148	5f		 pop	 rdi
  00149	5d		 pop	 rbp
  0014a	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
tv87 = 216
tv72 = 216
tv94 = 224
this$ = 272
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
; Line 105
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__375B2D08_ostream
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 106
  00042	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00053	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  0005a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00061	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  00068	48 03 c8	 add	 rcx, rax
  0006b	48 8b c1	 mov	 rax, rcx
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00077	90		 npad	 1
  00078	48 85 c0	 test	 rax, rax
  0007b	74 52		 je	 SHORT $LN2@Sentry_bas
; Line 107
  0007d	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00087	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv87[rbp], rax
  0008e	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv87[rbp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009c	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv87[rbp]
  000a3	48 03 c8	 add	 rcx, rax
  000a6	48 8b c1	 mov	 rax, rcx
  000a9	48 8b c8	 mov	 rcx, rax
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000b2	90		 npad	 1
  000b3	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  000ba	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR tv94[rbp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR tv94[rbp]
  000cb	ff 50 10	 call	 QWORD PTR [rax+16]
  000ce	90		 npad	 1
$LN2@Sentry_bas:
; Line 108
  000cf	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  000d6	5f		 pop	 rdi
  000d7	5d		 pop	 rbp
  000d8	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
tv88 = 192
tv73 = 192
tv95 = 200
this$ = 240
_Ostr$ = 248
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
; Line 99
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__375B2D08_ostream
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 98
  0003b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00049	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 100
  0004c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00056	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  0005d	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  00064	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00067	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0006b	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  00072	48 03 c8	 add	 rcx, rax
  00075	48 8b c1	 mov	 rax, rcx
  00078	48 8b c8	 mov	 rcx, rax
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00081	48 85 c0	 test	 rax, rax
  00084	74 50		 je	 SHORT $LN2@Sentry_bas
; Line 101
  00086	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00090	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  00097	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv88[rbp]
  0009e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a1	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a5	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv88[rbp]
  000ac	48 03 c8	 add	 rcx, rax
  000af	48 8b c1	 mov	 rax, rcx
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000bb	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv95[rbp], rax
  000c2	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR tv95[rbp]
  000c9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cc	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv95[rbp]
  000d3	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:
; Line 102
  000d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dd	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000e4	5f		 pop	 rdi
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ
_TEXT	SEGMENT
_Mycont$ = 8
_Contptr$ = 40
_Rawptr$ = 72
this$ = 320
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1422
$LN30:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN4@operator:
; Line 1424
  00036	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00042	74 02		 je	 SHORT $LN20@operator
  00044	eb 6b		 jmp	 SHORT $LN21@operator
$LN20@operator:
$LN7@operator:
  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DF@IMIHIHOP@cannot?5dereference?5value?9initia@
  0004d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00059	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005e	45 33 c9	 xor	 r9d, r9d
  00061	41 b8 90 05 00
	00		 mov	 r8d, 1424		; 00000590H
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006e	b9 02 00 00 00	 mov	 ecx, 2
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00079	83 f8 01	 cmp	 eax, 1
  0007c	75 03		 jne	 SHORT $LN27@operator
  0007e	cc		 int	 3
  0007f	33 c0		 xor	 eax, eax
$LN27@operator:
  00081	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008a	41 b9 90 05 00
	00		 mov	 r9d, 1424		; 00000590H
  00090	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000ab	33 c0		 xor	 eax, eax
  000ad	85 c0		 test	 eax, eax
  000af	75 95		 jne	 SHORT $LN7@operator
$LN21@operator:
  000b1	33 c0		 xor	 eax, eax
  000b3	85 c0		 test	 eax, eax
  000b5	0f 85 7b ff ff
	ff		 jne	 $LN4@operator
; Line 1425
  000bb	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c2	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  000c7	48 89 45 08	 mov	 QWORD PTR _Mycont$[rbp], rax
$LN10@operator:
; Line 1426
  000cb	48 83 7d 08 00	 cmp	 QWORD PTR _Mycont$[rbp], 0
  000d0	74 02		 je	 SHORT $LN22@operator
  000d2	eb 6b		 jmp	 SHORT $LN23@operator
$LN22@operator:
$LN13@operator:
  000d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0IC@DGJDAAEM@cannot?5dereference?5string?5itera@
  000db	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  000e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ec	45 33 c9	 xor	 r9d, r9d
  000ef	41 b8 93 05 00
	00		 mov	 r8d, 1427		; 00000593H
  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000fc	b9 02 00 00 00	 mov	 ecx, 2
  00101	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00107	83 f8 01	 cmp	 eax, 1
  0010a	75 03		 jne	 SHORT $LN28@operator
  0010c	cc		 int	 3
  0010d	33 c0		 xor	 eax, eax
$LN28@operator:
  0010f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00118	41 b9 93 05 00
	00		 mov	 r9d, 1427		; 00000593H
  0011e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  00133	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
; Line 1427
  00139	33 c0		 xor	 eax, eax
  0013b	85 c0		 test	 eax, eax
  0013d	75 95		 jne	 SHORT $LN13@operator
$LN23@operator:
  0013f	33 c0		 xor	 eax, eax
  00141	85 c0		 test	 eax, eax
  00143	75 86		 jne	 SHORT $LN10@operator
; Line 1428
  00145	48 8b 4d 08	 mov	 rcx, QWORD PTR _Mycont$[rbp]
  00149	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0014e	48 89 45 28	 mov	 QWORD PTR _Contptr$[rbp], rax
; Line 1429
  00152	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00159	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0015d	e8 00 00 00 00	 call	 ??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z ; std::_Unfancy<char const >
  00162	48 89 45 48	 mov	 QWORD PTR _Rawptr$[rbp], rax
$LN16@operator:
; Line 1430
  00166	48 8b 45 48	 mov	 rax, QWORD PTR _Rawptr$[rbp]
  0016a	48 39 45 28	 cmp	 QWORD PTR _Contptr$[rbp], rax
  0016e	77 1a		 ja	 SHORT $LN24@operator
  00170	48 8b 45 08	 mov	 rax, QWORD PTR _Mycont$[rbp]
  00174	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00178	48 8b 4d 28	 mov	 rcx, QWORD PTR _Contptr$[rbp]
  0017c	48 03 c8	 add	 rcx, rax
  0017f	48 8b c1	 mov	 rax, rcx
  00182	48 39 45 48	 cmp	 QWORD PTR _Rawptr$[rbp], rax
  00186	73 02		 jae	 SHORT $LN24@operator
  00188	eb 6b		 jmp	 SHORT $LN25@operator
$LN24@operator:
$LN19@operator:
  0018a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0FF@HJKEHIBC@cannot?5dereference?5string?5itera@
  00191	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00196	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0019d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a2	45 33 c9	 xor	 r9d, r9d
  001a5	41 b8 97 05 00
	00		 mov	 r8d, 1431		; 00000597H
  001ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  001b2	b9 02 00 00 00	 mov	 ecx, 2
  001b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  001bd	83 f8 01	 cmp	 eax, 1
  001c0	75 03		 jne	 SHORT $LN29@operator
  001c2	cc		 int	 3
  001c3	33 c0		 xor	 eax, eax
$LN29@operator:
  001c5	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  001ce	41 b9 97 05 00
	00		 mov	 r9d, 1431		; 00000597H
  001d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  001db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  001e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  001e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
; Line 1431
  001ef	33 c0		 xor	 eax, eax
  001f1	85 c0		 test	 eax, eax
  001f3	75 95		 jne	 SHORT $LN19@operator
$LN25@operator:
  001f5	33 c0		 xor	 eax, eax
  001f7	85 c0		 test	 eax, eax
  001f9	0f 85 67 ff ff
	ff		 jne	 $LN16@operator
; Line 1435
  001ff	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00206	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
; Line 1436
  0020a	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00211	5f		 pop	 rdi
  00212	5d		 pop	 rbp
  00213	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 224
_Parg$ = 232
_Pstring$ = 240
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1417
$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00040	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::_Iterator_base12
; Line 1416
  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Parg$[rbp]
  0005a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
; Line 1418
  0005e	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Pstring$[rbp]
  00065	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006c	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Line 1419
  00071	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00078	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007f	5f		 pop	 rdi
  00080	5d		 pop	 rbp
  00081	c3		 ret	 0
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Lock$6 = 4
_Psave$7 = 40
_Id$8 = 72
_Pf$9 = 104
_Pfmod$10 = 136
_Psave_guard$11 = 168
$T12 = 392
$T13 = 440
$T14 = 472
__$ArrayPad$ = 488
_Loc$ = 528
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,_Mbstatet> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
; Line 505
$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  0002a	48 c7 85 d8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T14[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 e8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__244BF7CC_xlocale
  0004d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 506
  00052	33 d2		 xor	 edx, edx
  00054	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$6[rbp]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  0005e	90		 npad	 1
; Line 508
  0005f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
  00066	48 89 45 28	 mov	 QWORD PTR _Psave$7[rbp], rax
; Line 510
  0006a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??Bid@locale@std@@QEAA_KXZ
  00077	48 89 45 48	 mov	 QWORD PTR _Id$8[rbp], rax
; Line 511
  0007b	48 8b 55 48	 mov	 rdx, QWORD PTR _Id$8[rbp]
  0007f	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Loc$[rbp]
  00086	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
  0008b	48 89 45 68	 mov	 QWORD PTR _Pf$9[rbp], rax
; Line 513
  0008f	48 83 7d 68 00	 cmp	 QWORD PTR _Pf$9[rbp], 0
  00094	0f 85 c9 00 00
	00		 jne	 $LN2@use_facet
; Line 515
  0009a	48 83 7d 28 00	 cmp	 QWORD PTR _Psave$7[rbp], 0
  0009f	74 0d		 je	 SHORT $LN3@use_facet
; Line 517
  000a1	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$7[rbp]
  000a5	48 89 45 68	 mov	 QWORD PTR _Pf$9[rbp], rax
  000a9	e9 b5 00 00 00	 jmp	 $LN2@use_facet
$LN3@use_facet:
; Line 519
  000ae	48 8b 95 10 02
	00 00		 mov	 rdx, QWORD PTR _Loc$[rbp]
  000b5	48 8d 4d 28	 lea	 rcx, QWORD PTR _Psave$7[rbp]
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
  000bf	48 83 f8 ff	 cmp	 rax, -1
  000c3	75 22		 jne	 SHORT $LN5@use_facet
; Line 522
  000c5	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  000cc	e8 00 00 00 00	 call	 ??0bad_cast@std@@QEAA@XZ ; std::bad_cast::bad_cast
  000d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVbad_cast@std@@
  000d8	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  000df	e8 00 00 00 00	 call	 _CxxThrowException
  000e4	90		 npad	 1
; Line 527
  000e5	eb 7c		 jmp	 SHORT $LN2@use_facet
$LN5@use_facet:
; Line 529
  000e7	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$7[rbp]
  000eb	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Pfmod$10[rbp], rax
; Line 530
  000f2	ba 08 00 00 00	 mov	 edx, 8
  000f7	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  000fe	e8 00 00 00 00	 call	 ?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z
  00103	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR _Pfmod$10[rbp]
  0010a	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  00111	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
  00116	90		 npad	 1
; Line 535
  00117	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Pfmod$10[rbp]
  0011e	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register
; Line 538
  00123	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Pfmod$10[rbp]
  0012a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0012d	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Pfmod$10[rbp]
  00134	ff 50 08	 call	 QWORD PTR [rax+8]
; Line 539
  00137	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$7[rbp]
  0013b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
; Line 540
  00142	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$7[rbp]
  00146	48 89 45 68	 mov	 QWORD PTR _Pf$9[rbp], rax
; Line 542
  0014a	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  00151	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
  00156	90		 npad	 1
; Line 543
  00157	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  0015e	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:
; Line 546
  00163	48 8b 45 68	 mov	 rax, QWORD PTR _Pf$9[rbp]
  00167	48 89 85 b8 01
	00 00		 mov	 QWORD PTR $T13[rbp], rax
  0016e	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$6[rbp]
  00172	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00178	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR $T13[rbp]
; Line 548
  0017f	48 8b f8	 mov	 rdi, rax
  00182	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00186	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcFrameData
  0018d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00192	48 8b c7	 mov	 rax, rdi
  00195	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0019c	48 33 cd	 xor	 rcx, rbp
  0019f	e8 00 00 00 00	 call	 __security_check_cookie
  001a4	48 8d a5 f8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+504]
  001ab	5f		 pop	 rdi
  001ac	5d		 pop	 rbp
  001ad	c3		 ret	 0
$LN10@use_facet:
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$6 = 4
_Psave$7 = 40
_Id$8 = 72
_Pf$9 = 104
_Pfmod$10 = 136
_Psave_guard$11 = 168
$T12 = 392
$T13 = 440
$T14 = 472
__$ArrayPad$ = 488
_Loc$ = 528
?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$6[rbp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$6 = 4
_Psave$7 = 40
_Id$8 = 72
_Pf$9 = 104
_Pfmod$10 = 136
_Psave_guard$11 = 168
$T12 = 392
$T13 = 440
$T14 = 472
__$ArrayPad$ = 488
_Loc$ = 528
?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Lock$6 = 4
_Psave$7 = 40
_Id$8 = 72
_Pf$9 = 104
_Pfmod$10 = 136
_Psave_guard$11 = 168
$T12 = 392
$T13 = 440
$T14 = 472
__$ArrayPad$ = 488
_Loc$ = 528
?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$6[rbp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Lock$6 = 4
_Psave$7 = 40
_Id$8 = 72
_Pf$9 = 104
_Pfmod$10 = 136
_Psave_guard$11 = 168
$T12 = 392
$T13 = 440
$T14 = 472
__$ArrayPad$ = 488
_Loc$ = 528
?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; Line 345
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__122CF1B0_xstddef
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 346
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
; Line 347
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 224
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
; Line 1019
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__375B2D08_ostream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1020
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004b	48 03 c8	 add	 rcx, rax
  0004e	48 8b c1	 mov	 rax, rcx
  00051	b2 0a		 mov	 dl, 10
  00053	48 8b c8	 mov	 rcx, rax
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  0005c	0f b6 d0	 movzx	 edx, al
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
; Line 1021
  0006c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
; Line 1022
  00079	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
; Line 1023
  00080	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00087	5f		 pop	 rdi
  00088	5d		 pop	 rbp
  00089	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00043	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00049	83 e0 01	 and	 eax, 1
  0004c	85 c0		 test	 eax, eax
  0004e	74 1a		 je	 SHORT $LN2@scalar
  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  0005d	ba 08 01 00 00	 mov	 edx, 264		; 00000108H
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  00077	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
classSize$ = 232
?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit2, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  00034	33 c0		 xor	 eax, eax
  00036	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR classSize$[rbp]
  0003d	f3 aa		 rep stosb
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::close, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 1285
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1286
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 c0 08	 add	 rax, 8
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  00049	48 85 c0	 test	 rax, rax
  0004c	75 2c		 jne	 SHORT $LN2@close
; Line 1287
  0004e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00058	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	48 03 c8	 add	 rcx, rax
  00066	48 8b c1	 mov	 rax, rcx
  00069	45 33 c0	 xor	 r8d, r8d
  0006c	ba 02 00 00 00	 mov	 edx, 2
  00071	48 8b c8	 mov	 rcx, rax
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN2@close:
; Line 1288
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 1247
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 80 58 ff
	ff ff		 mov	 rax, QWORD PTR [rax-168]
  00050	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00054	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00062	48 89 94 01 58
	ff ff ff	 mov	 QWORD PTR [rcx+rax-168], rdx
  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8b 80 58 ff
	ff ff		 mov	 rax, QWORD PTR [rax-168]
  00078	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0007c	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  00082	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00089	48 8b 89 58 ff
	ff ff		 mov	 rcx, QWORD PTR [rcx-168]
  00090	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00094	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0009b	89 84 0a 54 ff
	ff ff		 mov	 DWORD PTR [rdx+rcx-172], eax
; Line 1248
  000a2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 2d a0 00 00
	00		 sub	 rax, 160		; 000000a0H
  000af	48 8b c8	 mov	 rcx, rax
  000b2	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  000b7	90		 npad	 1
  000b8	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bf	48 2d 98 00 00
	00		 sub	 rax, 152		; 00000098H
  000c5	48 8b c8	 mov	 rcx, rax
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  000ce	90		 npad	 1
  000cf	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000d6	5f		 pop	 rdi
  000d7	5d		 pop	 rbp
  000d8	c3		 ret	 0
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z
_TEXT	SEGMENT
this$ = 224
_Str$ = 232
_Mode$ = 240
_Prot$ = 248
$initVBases$ = 256
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 1095
$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1094
  00045	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0004c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00051	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR $initVBases$[rbp]
  00057	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0005b	44 8b 8d f8 00
	00 00		 mov	 r9d, DWORD PTR _Prot$[rbp]
  00062	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR _Mode$[rbp]
  00069	48 8b d0	 mov	 rdx, rax
  0006c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
; Line 1095
  00078	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00082	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00086	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00094	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  00098	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a6	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  000ac	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b6	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000ba	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000c1	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax
; Line 1096
  000c5	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cc	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000d3	5f		 pop	 rdi
  000d4	5d		 pop	 rbp
  000d5	c3		 ret	 0
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 1086
$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00039	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  00044	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00055	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0005a	83 bd 40 01 00
	00 00		 cmp	 DWORD PTR $initVBases$[rbp], 0
  00061	74 37		 je	 SHORT $LN2@basic_ofst
  00063	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
  00071	48 89 08	 mov	 QWORD PTR [rax], rcx
  00074	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  00081	48 8b c8	 mov	 rcx, rax
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ
  0008a	90		 npad	 1
  0008b	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  00091	83 c8 01	 or	 eax, 1
  00094	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
$LN2@basic_ofst:
; Line 1085
  0009a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	48 83 c0 08	 add	 rax, 8
  000a5	45 33 c9	 xor	 r9d, r9d
  000a8	45 33 c0	 xor	 r8d, r8d
  000ab	48 8b d0	 mov	 rdx, rax
  000ae	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  000bb	90		 npad	 1
; Line 1086
  000bc	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ca	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  000d8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  000dc	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e6	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ea	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  000f0	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000fa	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000fe	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00105	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax
  00109	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00110	48 83 c0 08	 add	 rax, 8
  00114	33 d2		 xor	 edx, edx
  00116	48 8b c8	 mov	 rcx, rax
  00119	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  0011e	90		 npad	 1
; Line 1087
  0011f	8b 85 30 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00125	83 c8 02	 or	 eax, 2
  00128	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012f	48 83 c1 08	 add	 rcx, 8
  00133	44 8b 8d 38 01
	00 00		 mov	 r9d, DWORD PTR _Prot$[rbp]
  0013a	44 8b c0	 mov	 r8d, eax
  0013d	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Filename$[rbp]
  00144	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  00149	48 85 c0	 test	 rax, rax
  0014c	75 2d		 jne	 SHORT $LN3@basic_ofst
; Line 1088
  0014e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00155	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00158	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0015c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00163	48 03 c8	 add	 rcx, rax
  00166	48 8b c1	 mov	 rax, rcx
  00169	45 33 c0	 xor	 r8d, r8d
  0016c	ba 02 00 00 00	 mov	 edx, 2
  00171	48 8b c8	 mov	 rcx, rax
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0017a	90		 npad	 1
$LN3@basic_ofst:
; Line 1089
  0017b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00182	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00189	5f		 pop	 rdi
  0018a	5d		 pop	 rbp
  0018b	c3		 ret	 0
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN6@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 a8 00
	00 00		 add	 rcx, 168		; 000000a8H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN6@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 10	 add	 rcx, 16
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 08	 add	 rcx, 8
  0001f	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN6@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 a8 00
	00 00		 add	 rcx, 168		; 000000a8H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN6@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 10	 add	 rcx, 16
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 08	 add	 rcx, 8
  0001f	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 05 b0 00 00
	00		 add	 rax, 176		; 000000b0H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 05 b0 00 00
	00		 add	 rax, 176		; 000000b0H
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 2d b0 00 00
	00		 sub	 rax, 176		; 000000b0H
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00043	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00049	83 e0 01	 and	 eax, 1
  0004c	85 c0		 test	 eax, eax
  0004e	74 1a		 je	 SHORT $LN2@scalar
  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 2d b0 00 00
	00		 sub	 rax, 176		; 000000b0H
  0005d	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 2d b0 00 00
	00		 sub	 rax, 176		; 000000b0H
  00077	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
classSize$ = 232
?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit2, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  00034	33 c0		 xor	 eax, eax
  00036	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR classSize$[rbp]
  0003d	f3 aa		 rep stosb
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 98 00 00 00	 mov	 edx, 152		; 00000098H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 809
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 810
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00043	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004a	48 83 c1 70	 add	 rcx, 112		; 00000070H
  0004e	48 3b c1	 cmp	 rax, rcx
  00051	74 36		 je	 SHORT $LN2@Set_back
; Line 812
  00053	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00060	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00067	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax
; Line 813
  0006e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0007b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00082	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
$LN2@Set_back:
; Line 815
  00089	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00090	48 83 c0 71	 add	 rax, 113		; 00000071H
  00094	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009b	48 83 c1 70	 add	 rcx, 112		; 00000070H
  0009f	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000a6	48 83 c2 70	 add	 rdx, 112		; 00000070H
  000aa	4c 8b c8	 mov	 r9, rax
  000ad	4c 8b c1	 mov	 r8, rcx
  000b0	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
; Line 816
  000bd	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000c4	5f		 pop	 rdi
  000c5	5d		 pop	 rbp
  000c6	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 803
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 804
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00043	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004a	48 83 c1 70	 add	 rcx, 112		; 00000070H
  0004e	48 3b c1	 cmp	 rax, rcx
  00051	75 37		 jne	 SHORT $LN2@Reset_back
; Line 805
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	4c 8b 88 90 00
	00 00		 mov	 r9, QWORD PTR [rax+144]
  00061	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00068	4c 8b 80 88 00
	00 00		 mov	 r8, QWORD PTR [rax+136]
  0006f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00076	48 8b 90 88 00
	00 00		 mov	 rdx, QWORD PTR [rax+136]
  0007d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN2@Reset_back:
; Line 806
  0008a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00091	5f		 pop	 rdi
  00092	5d		 pop	 rbp
  00093	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z
_TEXT	SEGMENT
this$ = 224
_Newcvt$ = 232
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 784
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 785
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Newcvt$[rbp]
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?always_noconv@codecvt_base@std@@QEBA_NXZ
  00048	0f b6 c0	 movzx	 eax, al
  0004b	85 c0		 test	 eax, eax
  0004d	74 11		 je	 SHORT $LN2@Initcvt
; Line 786
  0004f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00056	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
; Line 787
  0005e	eb 24		 jmp	 SHORT $LN3@Initcvt
$LN2@Initcvt:
; Line 789
  00060	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Newcvt$[rbp]
  00067	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
  0006c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
; Line 790
  00077	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ
$LN3@Initcvt:
; Line 792
  00084	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
_TEXT	SEGMENT
_Codecvt_temp_buf$ = 8
_Str$ = 40
_Dest$ = 104
_Count$5 = 136
$T6 = 356
$T7 = 388
tv140 = 404
tv94 = 404
tv146 = 408
__$ArrayPad$ = 416
this$ = 464
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 744
$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR [rsp+520]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 a0 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 745
  00047	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00053	74 0f		 je	 SHORT $LN5@Endwrite
  00055	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005c	0f b6 40 71	 movzx	 eax, BYTE PTR [rax+113]
  00060	85 c0		 test	 eax, eax
  00062	75 07		 jne	 SHORT $LN4@Endwrite
$LN5@Endwrite:
; Line 747
  00064	b0 01		 mov	 al, 1
  00066	e9 4f 01 00 00	 jmp	 $LN1@Endwrite
$LN4@Endwrite:
; Line 751
  0006b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00070	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0007a	48 89 8d 98 01
	00 00		 mov	 QWORD PTR tv146[rbp], rcx
  00081	8b d0		 mov	 edx, eax
  00083	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008a	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR tv146[rbp]
  00091	ff 50 18	 call	 QWORD PTR [rax+24]
  00094	89 85 64 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  0009a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0009f	89 85 84 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  000a5	48 8d 95 64 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  000ac	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000b3	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  000b8	0f b6 c0	 movzx	 eax, al
  000bb	85 c0		 test	 eax, eax
  000bd	74 07		 je	 SHORT $LN6@Endwrite
; Line 753
  000bf	32 c0		 xor	 al, al
  000c1	e9 f4 00 00 00	 jmp	 $LN1@Endwrite
$LN6@Endwrite:
; Line 756
  000c6	48 c7 45 08 20
	00 00 00	 mov	 QWORD PTR _Codecvt_temp_buf$[rbp], 32 ; 00000020H
; Line 759
  000ce	48 8d 45 48	 lea	 rax, QWORD PTR _Str$[rbp+32]
  000d2	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d9	48 83 c1 74	 add	 rcx, 116		; 00000074H
  000dd	48 8d 55 68	 lea	 rdx, QWORD PTR _Dest$[rbp]
  000e1	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  000e6	4c 8b c8	 mov	 r9, rax
  000e9	4c 8d 45 28	 lea	 r8, QWORD PTR _Str$[rbp]
  000ed	48 8b d1	 mov	 rdx, rcx
  000f0	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f7	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
  00101	89 85 94 01 00
	00		 mov	 DWORD PTR tv94[rbp], eax
  00107	83 bd 94 01 00
	00 00		 cmp	 DWORD PTR tv94[rbp], 0
  0010e	74 1b		 je	 SHORT $LN7@Endwrite
  00110	83 bd 94 01 00
	00 01		 cmp	 DWORD PTR tv94[rbp], 1
  00117	74 1d		 je	 SHORT $LN8@Endwrite
  00119	83 bd 94 01 00
	00 03		 cmp	 DWORD PTR tv94[rbp], 3
  00120	0f 84 8e 00 00
	00		 je	 $LN10@Endwrite
  00126	e9 8d 00 00 00	 jmp	 $LN11@Endwrite
$LN7@Endwrite:
; Line 762
  0012b	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00132	c6 40 71 00	 mov	 BYTE PTR [rax+113], 0
$LN8@Endwrite:
; Line 766
  00136	48 8d 45 28	 lea	 rax, QWORD PTR _Str$[rbp]
  0013a	48 8b 4d 68	 mov	 rcx, QWORD PTR _Dest$[rbp]
  0013e	48 2b c8	 sub	 rcx, rax
  00141	48 8b c1	 mov	 rax, rcx
  00144	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Count$5[rbp], rax
; Line 767
  0014b	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR _Count$5[rbp], 0
  00153	76 31		 jbe	 SHORT $LN9@Endwrite
  00155	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0015c	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  00163	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Count$5[rbp]
  0016a	ba 01 00 00 00	 mov	 edx, 1
  0016f	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00173	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  00179	48 39 85 88 00
	00 00		 cmp	 QWORD PTR _Count$5[rbp], rax
  00180	74 04		 je	 SHORT $LN9@Endwrite
; Line 769
  00182	32 c0		 xor	 al, al
  00184	eb 34		 jmp	 SHORT $LN1@Endwrite
$LN9@Endwrite:
; Line 772
  00186	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0018d	0f b6 40 71	 movzx	 eax, BYTE PTR [rax+113]
  00191	85 c0		 test	 eax, eax
  00193	75 0c		 jne	 SHORT $LN13@Endwrite
  00195	c7 85 94 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv140[rbp], 1
  0019f	eb 0a		 jmp	 SHORT $LN14@Endwrite
$LN13@Endwrite:
  001a1	c7 85 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv140[rbp], 0
$LN14@Endwrite:
  001ab	0f b6 85 94 01
	00 00		 movzx	 eax, BYTE PTR tv140[rbp]
  001b2	eb 06		 jmp	 SHORT $LN1@Endwrite
$LN10@Endwrite:
; Line 776
  001b4	b0 01		 mov	 al, 1
  001b6	eb 02		 jmp	 SHORT $LN1@Endwrite
$LN11@Endwrite:
; Line 779
  001b8	32 c0		 xor	 al, al
$LN1@Endwrite:
; Line 781
  001ba	48 8b f8	 mov	 rdi, rax
  001bd	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcFrameData
  001c8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001cd	48 8b c7	 mov	 rax, rdi
  001d0	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001d7	48 33 cd	 xor	 rcx, rbp
  001da	e8 00 00 00 00	 call	 __security_check_cookie
  001df	48 8d a5 b8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+440]
  001e6	5f		 pop	 rdi
  001e7	5d		 pop	 rbp
  001e8	c3		 ret	 0
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
_Pb$6 = 8
_Pn$7 = 40
_Nr$8 = 72
_Nw$9 = 104
tv66 = 308
__$ArrayPad$ = 312
this$ = 352
_File$ = 360
_Which$ = 368
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 714
$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00018	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c5	 xor	 rax, rbp
  0003e	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  0004c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 717
  00051	83 bd 70 01 00
	00 01		 cmp	 DWORD PTR _Which$[rbp], 1
  00058	75 0c		 jne	 SHORT $LN4@Init
  0005a	c7 85 34 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00064	eb 0a		 jmp	 SHORT $LN5@Init
$LN4@Init:
  00066	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN5@Init:
  00070	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	0f b6 8d 34 01
	00 00		 movzx	 ecx, BYTE PTR tv66[rbp]
  0007e	88 48 7c	 mov	 BYTE PTR [rax+124], cl
; Line 718
  00081	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00088	c6 40 71 00	 mov	 BYTE PTR [rax+113], 0
; Line 720
  0008c	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ
; Line 722
  00099	48 83 bd 68 01
	00 00 00	 cmp	 QWORD PTR _File$[rbp], 0
  000a1	74 74		 je	 SHORT $LN2@Init
  000a3	33 c0		 xor	 eax, eax
  000a5	83 f8 01	 cmp	 eax, 1
  000a8	74 6d		 je	 SHORT $LN2@Init
; Line 724
  000aa	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Pb$6[rbp], 0
; Line 725
  000b2	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _Pn$7[rbp], 0
; Line 726
  000ba	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR _Nr$8[rbp], 0
; Line 728
  000c2	4c 8d 4d 48	 lea	 r9, QWORD PTR _Nr$8[rbp]
  000c6	4c 8d 45 28	 lea	 r8, QWORD PTR _Pn$7[rbp]
  000ca	48 8d 55 08	 lea	 rdx, QWORD PTR _Pb$6[rbp]
  000ce	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _File$[rbp]
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_stream_buffer_pointers
; Line 733
  000db	48 8b 45 48	 mov	 rax, QWORD PTR _Nr$8[rbp]
  000df	48 89 45 68	 mov	 QWORD PTR _Nw$9[rbp], rax
; Line 735
  000e3	48 8b 45 68	 mov	 rax, QWORD PTR _Nw$9[rbp]
  000e7	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000ec	48 8b 45 28	 mov	 rax, QWORD PTR _Pn$7[rbp]
  000f0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000f5	48 8b 45 08	 mov	 rax, QWORD PTR _Pb$6[rbp]
  000f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fe	4c 8b 4d 48	 mov	 r9, QWORD PTR _Nr$8[rbp]
  00102	4c 8b 45 28	 mov	 r8, QWORD PTR _Pn$7[rbp]
  00106	48 8b 55 08	 mov	 rdx, QWORD PTR _Pb$6[rbp]
  0010a	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAPEAD0PEAH001@Z
$LN2@Init:
; Line 738
  00117	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0011e	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _File$[rbp]
  00125	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
; Line 739
  0012c	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00133	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
  0013a	48 89 48 74	 mov	 QWORD PTR [rax+116], rcx
; Line 740
  0013e	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00145	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
; Line 741
  0014d	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  00151	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcFrameData
  00158	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0015d	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00164	48 33 cd	 xor	 rcx, rbp
  00167	e8 00 00 00 00	 call	 __security_check_cookie
  0016c	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00173	5f		 pop	 rdi
  00174	5d		 pop	 rbp
  00175	c3		 ret	 0
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
_TEXT	SEGMENT
this$ = 224
_Loc$ = 232
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 709
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 710
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Loc$[rbp]
  00042	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  00047	48 8b d0	 mov	 rdx, rax
  0004a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
; Line 711
  00056	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
tv88 = 248
tv86 = 256
this$ = 304
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 702
$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 703
  00036	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00045	74 78		 je	 SHORT $LN3@sync
  00047	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0004c	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00056	48 89 8d f8 00
	00 00		 mov	 QWORD PTR tv88[rbp], rcx
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv88[rbp]
  0006d	ff 50 18	 call	 QWORD PTR [rax+24]
  00070	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00076	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0007b	89 85 e4 00 00
	00		 mov	 DWORD PTR $T2[rbp], eax
  00081	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00088	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  0008f	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00094	0f b6 c0	 movzx	 eax, al
  00097	85 c0		 test	 eax, eax
  00099	75 24		 jne	 SHORT $LN3@sync
  0009b	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a2	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
  000af	85 c0		 test	 eax, eax
  000b1	7d 0c		 jge	 SHORT $LN3@sync
  000b3	c7 85 00 01 00
	00 ff ff ff ff	 mov	 DWORD PTR tv86[rbp], -1
  000bd	eb 0a		 jmp	 SHORT $LN4@sync
$LN3@sync:
  000bf	c7 85 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv86[rbp], 0
$LN4@sync:
  000c9	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR tv86[rbp]
; Line 706
  000cf	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  000d6	5f		 pop	 rdi
  000d7	5d		 pop	 rbp
  000d8	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z
_TEXT	SEGMENT
tv70 = 192
this$ = 240
_Buffer$ = 248
_Count$ = 256
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 689
$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 690
  00040	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0004f	74 57		 je	 SHORT $LN4@setbuf
  00051	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR _Buffer$[rbp], 0
  00059	75 16		 jne	 SHORT $LN6@setbuf
  0005b	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  00063	75 0c		 jne	 SHORT $LN6@setbuf
  00065	c7 85 c0 00 00
	00 04 00 00 00	 mov	 DWORD PTR tv70[rbp], 4
  0006f	eb 0a		 jmp	 SHORT $LN7@setbuf
$LN6@setbuf:
  00071	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv70[rbp], 0
$LN7@setbuf:
  0007b	4c 8b 8d 00 01
	00 00		 mov	 r9, QWORD PTR _Count$[rbp]
  00082	44 8b 85 c0 00
	00 00		 mov	 r8d, DWORD PTR tv70[rbp]
  00089	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _Buffer$[rbp]
  00090	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00097	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setvbuf
  000a4	85 c0		 test	 eax, eax
  000a6	74 06		 je	 SHORT $LN2@setbuf
$LN4@setbuf:
; Line 693
  000a8	33 c0		 xor	 eax, eax
  000aa	eb 29		 jmp	 SHORT $LN1@setbuf
; Line 694
  000ac	eb 27		 jmp	 SHORT $LN3@setbuf
$LN2@setbuf:
; Line 696
  000ae	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bb	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  000c2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c9	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
; Line 697
  000ce	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN3@setbuf:
$LN1@setbuf:
; Line 699
  000d5	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000dc	5f		 pop	 rdi
  000dd	5d		 pop	 rbp
  000de	c3		 ret	 0
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
_Off$ = 8
$T4 = 228
__$ArrayPad$ = 248
this$ = 288
__$ReturnUdt$ = 296
_Pos$ = 304
__formal$ = 312
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 675
$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00051	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 676
  00056	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Pos$[rbp]
  0005d	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ; std::fpos<_Mbstatet>::operator __int64
  00062	48 89 45 08	 mov	 QWORD PTR _Off$[rbp], rax
; Line 678
  00066	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00075	74 2f		 je	 SHORT $LN3@seekpos
  00077	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007e	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00083	0f b6 c0	 movzx	 eax, al
  00086	85 c0		 test	 eax, eax
  00088	74 1c		 je	 SHORT $LN3@seekpos
  0008a	48 8d 55 08	 lea	 rdx, QWORD PTR _Off$[rbp]
  0008e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00095	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fsetpos
  000a2	85 c0		 test	 eax, eax
  000a4	74 1c		 je	 SHORT $LN2@seekpos
$LN3@seekpos:
; Line 680
  000a6	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  000ad	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000b4	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000b9	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  000c0	eb 4f		 jmp	 SHORT $LN1@seekpos
$LN2@seekpos:
; Line 683
  000c2	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000c9	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Pos$[rbp]
  000d0	e8 00 00 00 00	 call	 ?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
  000d5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d8	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000df	48 89 41 74	 mov	 QWORD PTR [rcx+116], rax
; Line 684
  000e3	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ea	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
; Line 685
  000ef	4c 8b 45 08	 mov	 r8, QWORD PTR _Off$[rbp]
  000f3	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fa	48 8b 50 74	 mov	 rdx, QWORD PTR [rax+116]
  000fe	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00105	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  0010a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@seekpos:
; Line 686
  00111	48 8b f8	 mov	 rdi, rax
  00114	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00118	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcFrameData
  0011f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00124	48 8b c7	 mov	 rax, rdi
  00127	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0012e	48 33 cd	 xor	 rcx, rbp
  00131	e8 00 00 00 00	 call	 __security_check_cookie
  00136	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0013d	5f		 pop	 rdi
  0013e	5d		 pop	 rbp
  0013f	c3		 ret	 0
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
_Fileposition$ = 8
__$ArrayPad$ = 216
this$ = 256
__$ReturnUdt$ = 264
_Off$ = 272
_Way$ = 280
__formal$ = 288
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 652
$LN8:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 d8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00051	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 657
  00056	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	48 83 c1 70	 add	 rcx, 112		; 00000070H
  0006e	48 3b c1	 cmp	 rax, rcx
  00071	75 28		 jne	 SHORT $LN2@seekoff
  00073	83 bd 18 01 00
	00 01		 cmp	 DWORD PTR _Way$[rbp], 1
  0007a	75 1f		 jne	 SHORT $LN2@seekoff
  0007c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00083	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00088	75 11		 jne	 SHORT $LN2@seekoff
; Line 659
  0008a	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  00091	48 ff c8	 dec	 rax
  00094	48 89 85 10 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax
$LN2@seekoff:
; Line 665
  0009b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a2	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000aa	74 68		 je	 SHORT $LN4@seekoff
  000ac	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b3	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  000b8	0f b6 c0	 movzx	 eax, al
  000bb	85 c0		 test	 eax, eax
  000bd	74 55		 je	 SHORT $LN4@seekoff
  000bf	48 83 bd 10 01
	00 00 00	 cmp	 QWORD PTR _Off$[rbp], 0
  000c7	75 09		 jne	 SHORT $LN6@seekoff
  000c9	83 bd 18 01 00
	00 01		 cmp	 DWORD PTR _Way$[rbp], 1
  000d0	74 26		 je	 SHORT $LN5@seekoff
$LN6@seekoff:
  000d2	44 8b 85 18 01
	00 00		 mov	 r8d, DWORD PTR _Way$[rbp]
  000d9	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  000e0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e7	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
  000f4	85 c0		 test	 eax, eax
  000f6	75 1c		 jne	 SHORT $LN4@seekoff
$LN5@seekoff:
  000f8	48 8d 55 08	 lea	 rdx, QWORD PTR _Fileposition$[rbp]
  000fc	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00103	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0010a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgetpos
  00110	85 c0		 test	 eax, eax
  00112	74 1c		 je	 SHORT $LN3@seekoff
$LN4@seekoff:
; Line 667
  00114	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0011b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00122	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00127	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0012e	eb 2e		 jmp	 SHORT $LN1@seekoff
$LN3@seekoff:
; Line 670
  00130	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00137	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
; Line 671
  0013c	4c 8b 45 08	 mov	 r8, QWORD PTR _Fileposition$[rbp]
  00140	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00147	48 8b 50 74	 mov	 rdx, QWORD PTR [rax+116]
  0014b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00152	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00157	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@seekoff:
; Line 672
  0015e	48 8b f8	 mov	 rdi, rax
  00161	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00165	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcFrameData
  0016c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00171	48 8b c7	 mov	 rax, rdi
  00174	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0017b	48 33 cd	 xor	 rcx, rbp
  0017e	e8 00 00 00 00	 call	 __security_check_cookie
  00183	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0018a	5f		 pop	 rdi
  0018b	5d		 pop	 rbp
  0018c	c3		 ret	 0
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
_TEXT	SEGMENT
_Start_count$1 = 8
_Size$2 = 40
this$ = 288
_Ptr$ = 296
_Count$ = 304
?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::xsputn, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 612
$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 613
  00040	33 c0		 xor	 eax, eax
  00042	83 f8 01	 cmp	 eax, 1
  00045	0f 84 3e 01 00
	00		 je	 $LN2@xsputn
; Line 615
  0004b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00052	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00057	74 20		 je	 SHORT $LN4@xsputn
; Line 617
  00059	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00060	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00067	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
  00074	e9 2b 01 00 00	 jmp	 $LN1@xsputn
$LN4@xsputn:
; Line 620
  00079	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00080	48 89 45 08	 mov	 QWORD PTR _Start_count$1[rbp], rax
; Line 621
  00084	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
  00091	48 89 45 28	 mov	 QWORD PTR _Size$2[rbp], rax
; Line 622
  00095	48 83 bd 30 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  0009d	7e 7f		 jle	 SHORT $LN5@xsputn
  0009f	48 83 7d 28 00	 cmp	 QWORD PTR _Size$2[rbp], 0
  000a4	7e 78		 jle	 SHORT $LN5@xsputn
; Line 624
  000a6	48 8b 45 28	 mov	 rax, QWORD PTR _Size$2[rbp]
  000aa	48 39 85 30 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  000b1	7d 0b		 jge	 SHORT $LN6@xsputn
; Line 626
  000b3	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000ba	48 89 45 28	 mov	 QWORD PTR _Size$2[rbp], rax
$LN6@xsputn:
; Line 629
  000be	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000cb	4c 8b 45 28	 mov	 r8, QWORD PTR _Size$2[rbp]
  000cf	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  000d6	48 8b c8	 mov	 rcx, rax
  000d9	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy
; Line 630
  000de	48 8b 45 28	 mov	 rax, QWORD PTR _Size$2[rbp]
  000e2	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000e9	48 03 c8	 add	 rcx, rax
  000ec	48 8b c1	 mov	 rax, rcx
  000ef	48 89 85 28 01
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
; Line 631
  000f6	48 8b 45 28	 mov	 rax, QWORD PTR _Size$2[rbp]
  000fa	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00101	48 2b c8	 sub	 rcx, rax
  00104	48 8b c1	 mov	 rax, rcx
  00107	48 89 85 30 01
	00 00		 mov	 QWORD PTR _Count$[rbp], rax
; Line 632
  0010e	8b 55 28	 mov	 edx, DWORD PTR _Size$2[rbp]
  00111	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z
$LN5@xsputn:
; Line 635
  0011e	48 83 bd 30 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  00126	7e 4c		 jle	 SHORT $LN7@xsputn
  00128	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0012f	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00137	74 3b		 je	 SHORT $LN7@xsputn
; Line 637
  00139	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00140	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  00147	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0014e	ba 01 00 00 00	 mov	 edx, 1
  00153	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  00160	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00167	48 2b c8	 sub	 rcx, rax
  0016a	48 8b c1	 mov	 rax, rcx
  0016d	48 89 85 30 01
	00 00		 mov	 QWORD PTR _Count$[rbp], rax
$LN7@xsputn:
; Line 640
  00174	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0017b	48 8b 4d 08	 mov	 rcx, QWORD PTR _Start_count$1[rbp]
  0017f	48 2b c8	 sub	 rcx, rax
  00182	48 8b c1	 mov	 rax, rcx
  00185	eb 1d		 jmp	 SHORT $LN1@xsputn
; Line 642
  00187	eb 1b		 jmp	 SHORT $LN3@xsputn
$LN2@xsputn:
; Line 644
  00189	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00190	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00197	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0019e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
$LN3@xsputn:
$LN1@xsputn:
; Line 646
  001a4	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  001ab	5f		 pop	 rdi
  001ac	5d		 pop	 rbp
  001ad	c3		 ret	 0
?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
_TEXT	SEGMENT
_Start_count$1 = 8
_Size$2 = 40
this$ = 288
_Ptr$ = 296
_Count$ = 304
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 574
$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 575
  00040	33 c0		 xor	 eax, eax
  00042	83 f8 01	 cmp	 eax, 1
  00045	0f 84 4a 01 00
	00		 je	 $LN2@xsgetn
; Line 577
  0004b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00052	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00057	74 20		 je	 SHORT $LN4@xsgetn
; Line 579
  00059	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00060	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00067	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
  00074	e9 37 01 00 00	 jmp	 $LN1@xsgetn
$LN4@xsgetn:
; Line 582
  00079	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00080	48 89 45 08	 mov	 QWORD PTR _Start_count$1[rbp], rax
; Line 583
  00084	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
  00091	48 89 45 28	 mov	 QWORD PTR _Size$2[rbp], rax
; Line 584
  00095	48 83 bd 30 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  0009d	7e 7f		 jle	 SHORT $LN5@xsgetn
  0009f	48 83 7d 28 00	 cmp	 QWORD PTR _Size$2[rbp], 0
  000a4	7e 78		 jle	 SHORT $LN5@xsgetn
; Line 586
  000a6	48 8b 45 28	 mov	 rax, QWORD PTR _Size$2[rbp]
  000aa	48 39 85 30 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  000b1	7d 0b		 jge	 SHORT $LN6@xsgetn
; Line 588
  000b3	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000ba	48 89 45 28	 mov	 QWORD PTR _Size$2[rbp], rax
$LN6@xsgetn:
; Line 591
  000be	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000cb	4c 8b 45 28	 mov	 r8, QWORD PTR _Size$2[rbp]
  000cf	48 8b d0	 mov	 rdx, rax
  000d2	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000d9	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy
; Line 592
  000de	48 8b 45 28	 mov	 rax, QWORD PTR _Size$2[rbp]
  000e2	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000e9	48 03 c8	 add	 rcx, rax
  000ec	48 8b c1	 mov	 rax, rcx
  000ef	48 89 85 28 01
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
; Line 593
  000f6	48 8b 45 28	 mov	 rax, QWORD PTR _Size$2[rbp]
  000fa	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00101	48 2b c8	 sub	 rcx, rax
  00104	48 8b c1	 mov	 rax, rcx
  00107	48 89 85 30 01
	00 00		 mov	 QWORD PTR _Count$[rbp], rax
; Line 594
  0010e	8b 55 28	 mov	 edx, DWORD PTR _Size$2[rbp]
  00111	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z
$LN5@xsgetn:
; Line 597
  0011e	48 83 bd 30 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  00126	7e 58		 jle	 SHORT $LN7@xsgetn
  00128	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0012f	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00137	74 47		 je	 SHORT $LN7@xsgetn
; Line 599
  00139	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00140	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
; Line 600
  00145	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0014c	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  00153	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0015a	ba 01 00 00 00	 mov	 edx, 1
  0015f	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  0016c	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00173	48 2b c8	 sub	 rcx, rax
  00176	48 8b c1	 mov	 rax, rcx
  00179	48 89 85 30 01
	00 00		 mov	 QWORD PTR _Count$[rbp], rax
$LN7@xsgetn:
; Line 603
  00180	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00187	48 8b 4d 08	 mov	 rcx, QWORD PTR _Start_count$1[rbp]
  0018b	48 2b c8	 sub	 rcx, rax
  0018e	48 8b c1	 mov	 rax, rcx
  00191	eb 1d		 jmp	 SHORT $LN1@xsgetn
; Line 605
  00193	eb 1b		 jmp	 SHORT $LN3@xsgetn
$LN2@xsgetn:
; Line 607
  00195	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0019c	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  001a3	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
$LN3@xsgetn:
$LN1@xsgetn:
; Line 609
  001b0	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  001b7	5f		 pop	 rdi
  001b8	5d		 pop	 rbp
  001b9	c3		 ret	 0
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
_Ch$8 = 4
_Str$ = 40
_Src$9 = 104
_Meta$10 = 132
_Ch$11 = 164
_Dest$12 = 200
_Nleft$13 = 232
$T14 = 452
$T15 = 484
$T16 = 516
$T17 = 548
$T18 = 584
tv139 = 596
tv172 = 600
tv154 = 600
tv76 = 600
tv159 = 608
tv162 = 616
tv169 = 624
__$ArrayPad$ = 632
this$ = 672
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 508
$LN21:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 02
	00 00		 sub	 rsp, 712		; 000002c8H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 b2 00 00 00	 mov	 ecx, 178		; 000000b2H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+744]
  0002a	48 c7 85 48 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T18[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 78 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  0004d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 509
  00052	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0005f	48 85 c0	 test	 rax, rax
  00062	74 47		 je	 SHORT $LN9@uflow
  00064	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00071	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00078	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00085	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  0008c	48 3b c8	 cmp	 rcx, rax
  0008f	73 1a		 jae	 SHORT $LN9@uflow
; Line 511
  00091	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
  0009e	48 8b c8	 mov	 rcx, rax
  000a1	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  000a6	e9 c1 02 00 00	 jmp	 $LN1@uflow
$LN9@uflow:
; Line 514
  000ab	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000ba	75 0a		 jne	 SHORT $LN10@uflow
; Line 516
  000bc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000c1	e9 a6 02 00 00	 jmp	 $LN1@uflow
$LN10@uflow:
; Line 519
  000c6	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000cd	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
; Line 520
  000d2	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d9	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000de	75 45		 jne	 SHORT $LN11@uflow
; Line 523
  000e0	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e7	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  000ee	48 8d 4d 04	 lea	 rcx, QWORD PTR _Ch$8[rbp]
  000f2	e8 00 00 00 00	 call	 ??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z ; std::_Fgetc<char>
  000f7	0f b6 c0	 movzx	 eax, al
  000fa	85 c0		 test	 eax, eax
  000fc	74 11		 je	 SHORT $LN18@uflow
  000fe	48 8d 4d 04	 lea	 rcx, QWORD PTR _Ch$8[rbp]
  00102	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  00107	89 85 54 02 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  0010d	eb 0b		 jmp	 SHORT $LN19@uflow
$LN18@uflow:
  0010f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00114	89 85 54 02 00
	00		 mov	 DWORD PTR tv139[rbp], eax
$LN19@uflow:
  0011a	8b 85 54 02 00
	00		 mov	 eax, DWORD PTR tv139[rbp]
  00120	e9 47 02 00 00	 jmp	 $LN1@uflow
$LN11@uflow:
; Line 527
  00125	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00129	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012e	90		 npad	 1
$LN2@uflow:
; Line 532
  0012f	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00136	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0013d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgetc
  00143	89 85 84 00 00
	00		 mov	 DWORD PTR _Meta$10[rbp], eax
; Line 534
  00149	83 bd 84 00 00
	00 ff		 cmp	 DWORD PTR _Meta$10[rbp], -1
  00150	75 1f		 jne	 SHORT $LN12@uflow
; Line 536
  00152	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00157	89 85 c4 01 00
	00		 mov	 DWORD PTR $T14[rbp], eax
  0015d	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00161	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00166	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR $T14[rbp]
  0016c	e9 fb 01 00 00	 jmp	 $LN1@uflow
$LN12@uflow:
; Line 539
  00171	0f b6 95 84 00
	00 00		 movzx	 edx, BYTE PTR _Meta$10[rbp]
  00178	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  0017c	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; Line 543
  00181	48 8d 85 a5 00
	00 00		 lea	 rax, QWORD PTR _Ch$11[rbp+1]
  00188	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv154[rbp], rax
  0018f	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00193	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00198	48 89 85 60 02
	00 00		 mov	 QWORD PTR tv159[rbp], rax
  0019f	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  001a3	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001a8	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR tv159[rbp]
  001af	48 03 c8	 add	 rcx, rax
  001b2	48 8b c1	 mov	 rax, rcx
  001b5	48 89 85 68 02
	00 00		 mov	 QWORD PTR tv162[rbp], rax
  001bc	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  001c0	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  001c5	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cc	48 83 c1 74	 add	 rcx, 116		; 00000074H
  001d0	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR _Dest$12[rbp]
  001d7	48 89 54 24 38	 mov	 QWORD PTR [rsp+56], rdx
  001dc	48 8b 95 58 02
	00 00		 mov	 rdx, QWORD PTR tv154[rbp]
  001e3	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  001e8	48 8d 95 a4 00
	00 00		 lea	 rdx, QWORD PTR _Ch$11[rbp]
  001ef	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  001f4	48 8d 55 68	 lea	 rdx, QWORD PTR _Src$9[rbp]
  001f8	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  001fd	48 8b 95 68 02
	00 00		 mov	 rdx, QWORD PTR tv162[rbp]
  00204	4c 8b ca	 mov	 r9, rdx
  00207	4c 8b c0	 mov	 r8, rax
  0020a	48 8b d1	 mov	 rdx, rcx
  0020d	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00214	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00218	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z
  0021e	89 85 70 02 00
	00		 mov	 DWORD PTR tv169[rbp], eax
  00224	83 bd 70 02 00
	00 00		 cmp	 DWORD PTR tv169[rbp], 0
  0022b	0f 8c 10 01 00
	00		 jl	 $LN16@uflow
  00231	83 bd 70 02 00
	00 01		 cmp	 DWORD PTR tv169[rbp], 1
  00238	7e 12		 jle	 SHORT $LN13@uflow
  0023a	83 bd 70 02 00
	00 03		 cmp	 DWORD PTR tv169[rbp], 3
  00241	0f 84 d7 00 00
	00		 je	 $LN15@uflow
  00247	e9 f5 00 00 00	 jmp	 $LN16@uflow
$LN13@uflow:
; Line 547
  0024c	48 8d 85 a4 00
	00 00		 lea	 rax, QWORD PTR _Ch$11[rbp]
  00253	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR _Dest$12[rbp], rax
  0025a	0f 84 9b 00 00
	00		 je	 $LN14@uflow
; Line 549
  00260	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00264	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00269	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv172[rbp], rax
  00270	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00274	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00279	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR tv172[rbp]
  00280	48 03 c8	 add	 rcx, rax
  00283	48 8b c1	 mov	 rax, rcx
  00286	48 2b 45 68	 sub	 rax, QWORD PTR _Src$9[rbp]
  0028a	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Nleft$13[rbp], rax
$LN7@uflow:
; Line 550
  00291	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Nleft$13[rbp], 0
  00299	7e 3d		 jle	 SHORT $LN8@uflow
; Line 552
  0029b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Nleft$13[rbp]
  002a2	48 ff c8	 dec	 rax
  002a5	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Nleft$13[rbp], rax
  002ac	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Nleft$13[rbp]
  002b3	48 8b 4d 68	 mov	 rcx, QWORD PTR _Src$9[rbp]
  002b7	48 03 c8	 add	 rcx, rax
  002ba	48 8b c1	 mov	 rax, rcx
  002bd	0f be 00	 movsx	 eax, BYTE PTR [rax]
  002c0	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002c7	48 8b 91 80 00
	00 00		 mov	 rdx, QWORD PTR [rcx+128]
  002ce	8b c8		 mov	 ecx, eax
  002d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ungetc
; Line 553
  002d6	eb b9		 jmp	 SHORT $LN7@uflow
$LN8@uflow:
; Line 555
  002d8	48 8d 8d a4 00
	00 00		 lea	 rcx, QWORD PTR _Ch$11[rbp]
  002df	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  002e4	89 85 e4 01 00
	00		 mov	 DWORD PTR $T15[rbp], eax
  002ea	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  002ee	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002f3	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR $T15[rbp]
  002f9	eb 71		 jmp	 SHORT $LN1@uflow
$LN14@uflow:
; Line 558
  002fb	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  002ff	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00304	48 8b 4d 68	 mov	 rcx, QWORD PTR _Src$9[rbp]
  00308	48 2b c8	 sub	 rcx, rax
  0030b	48 8b c1	 mov	 rax, rcx
  0030e	4c 8b c0	 mov	 r8, rax
  00311	33 d2		 xor	 edx, edx
  00313	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00317	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Line 559
  0031c	eb 3f		 jmp	 SHORT $LN5@uflow
$LN15@uflow:
; Line 563
  0031e	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00322	e8 00 00 00 00	 call	 ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
  00327	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0032a	89 85 04 02 00
	00		 mov	 DWORD PTR $T16[rbp], eax
  00330	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00334	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00339	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR $T16[rbp]
  0033f	eb 2b		 jmp	 SHORT $LN1@uflow
$LN16@uflow:
; Line 566
  00341	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00346	89 85 24 02 00
	00		 mov	 DWORD PTR $T17[rbp], eax
  0034c	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00350	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00355	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR $T17[rbp]
  0035b	eb 0f		 jmp	 SHORT $LN1@uflow
$LN5@uflow:
; Line 568
  0035d	e9 cd fd ff ff	 jmp	 $LN2@uflow
; Line 569
  00362	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00366	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0036b	90		 npad	 1
$LN1@uflow:
  0036c	48 8b f8	 mov	 rdi, rax
  0036f	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  00373	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData
  0037a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0037f	48 8b c7	 mov	 rax, rdi
  00382	48 8b 8d 78 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00389	48 33 cd	 xor	 rcx, rbp
  0038c	e8 00 00 00 00	 call	 __security_check_cookie
  00391	48 8d a5 88 02
	00 00		 lea	 rsp, QWORD PTR [rbp+648]
  00398	5f		 pop	 rdi
  00399	5d		 pop	 rbp
  0039a	c3		 ret	 0
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ch$8 = 4
_Str$ = 40
_Src$9 = 104
_Meta$10 = 132
_Ch$11 = 164
_Dest$12 = 200
_Nleft$13 = 232
$T14 = 452
$T15 = 484
$T16 = 516
$T17 = 548
$T18 = 584
tv139 = 596
tv172 = 600
tv154 = 600
tv76 = 600
tv159 = 608
tv162 = 616
tv169 = 624
__$ArrayPad$ = 632
this$ = 672
?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Ch$8 = 4
_Str$ = 40
_Src$9 = 104
_Meta$10 = 132
_Ch$11 = 164
_Dest$12 = 200
_Nleft$13 = 232
$T14 = 452
$T15 = 484
$T16 = 516
$T17 = 548
$T18 = 584
tv139 = 596
tv172 = 600
tv154 = 600
tv76 = 600
tv159 = 608
tv162 = 616
tv169 = 624
__$ArrayPad$ = 632
this$ = 672
?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
_Meta$ = 4
$T4 = 228
tv76 = 248
__$ArrayPad$ = 256
this$ = 304
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 493
$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 00 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 496
  00047	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00054	48 85 c0	 test	 rax, rax
  00057	74 46		 je	 SHORT $LN2@underflow
  00059	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00066	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  0006d	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0007a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00081	48 3b c8	 cmp	 rcx, rax
  00084	73 19		 jae	 SHORT $LN2@underflow
; Line 497
  00086	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00093	48 8b c8	 mov	 rcx, rax
  00096	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  0009b	eb 5c		 jmp	 SHORT $LN1@underflow
  0009d	eb 5a		 jmp	 SHORT $LN3@underflow
$LN2@underflow:
; Line 498
  0009f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b0	ff 50 38	 call	 QWORD PTR [rax+56]
  000b3	89 45 04	 mov	 DWORD PTR _Meta$[rbp], eax
  000b6	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000bb	89 85 e4 00 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  000c1	48 8d 55 04	 lea	 rdx, QWORD PTR _Meta$[rbp]
  000c5	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  000cc	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  000d1	0f b6 c0	 movzx	 eax, al
  000d4	85 c0		 test	 eax, eax
  000d6	74 07		 je	 SHORT $LN4@underflow
; Line 499
  000d8	8b 45 04	 mov	 eax, DWORD PTR _Meta$[rbp]
  000db	eb 1c		 jmp	 SHORT $LN1@underflow
; Line 500
  000dd	eb 1a		 jmp	 SHORT $LN5@underflow
$LN4@underflow:
; Line 502
  000df	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e9	8b 55 04	 mov	 edx, DWORD PTR _Meta$[rbp]
  000ec	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f3	ff 50 20	 call	 QWORD PTR [rax+32]
; Line 503
  000f6	8b 45 04	 mov	 eax, DWORD PTR _Meta$[rbp]
$LN5@underflow:
$LN3@underflow:
$LN1@underflow:
; Line 505
  000f9	48 8b f8	 mov	 rdi, rax
  000fc	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData
  00107	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010c	48 8b c7	 mov	 rax, rdi
  0010f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00116	48 33 cd	 xor	 rcx, rbp
  00119	e8 00 00 00 00	 call	 __security_check_cookie
  0011e	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  00125	5f		 pop	 rdi
  00126	5d		 pop	 rbp
  00127	c3		 ret	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
tv76 = 312
this$ = 352
_Meta$ = 360
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 468
$LN13:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 471
  0003a	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00047	48 85 c0	 test	 rax, rax
  0004a	0f 84 ba 00 00
	00		 je	 $LN2@pbackfail
  00050	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0005d	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00064	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00071	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00078	48 3b c8	 cmp	 rcx, rax
  0007b	0f 83 89 00 00
	00		 jae	 $LN2@pbackfail
  00081	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00086	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  0008c	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  00093	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0009a	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  0009f	0f b6 c0	 movzx	 eax, al
  000a2	85 c0		 test	 eax, eax
  000a4	75 41		 jne	 SHORT $LN4@pbackfail
  000a6	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000b3	b9 01 00 00 00	 mov	 ecx, 1
  000b8	48 6b c9 ff	 imul	 rcx, rcx, -1
  000bc	48 03 c1	 add	 rax, rcx
  000bf	48 8b c8	 mov	 rcx, rax
  000c2	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  000c7	89 85 e4 00 00
	00		 mov	 DWORD PTR $T2[rbp], eax
  000cd	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  000d4	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000db	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  000e0	0f b6 c0	 movzx	 eax, al
  000e3	85 c0		 test	 eax, eax
  000e5	74 23		 je	 SHORT $LN2@pbackfail
$LN4@pbackfail:
; Line 475
  000e7	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
; Line 476
  000f4	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  000fb	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHAEBH@Z ; std::char_traits<char>::not_eof
  00100	e9 e3 00 00 00	 jmp	 $LN1@pbackfail
  00105	e9 de 00 00 00	 jmp	 $LN3@pbackfail
$LN2@pbackfail:
; Line 478
  0010a	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00111	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00119	74 25		 je	 SHORT $LN7@pbackfail
  0011b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00120	89 85 04 01 00
	00		 mov	 DWORD PTR $T3[rbp], eax
  00126	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  0012d	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00134	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00139	0f b6 c0	 movzx	 eax, al
  0013c	85 c0		 test	 eax, eax
  0013e	74 0f		 je	 SHORT $LN5@pbackfail
$LN7@pbackfail:
; Line 479
  00140	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00145	e9 9e 00 00 00	 jmp	 $LN1@pbackfail
  0014a	e9 99 00 00 00	 jmp	 $LN6@pbackfail
$LN5@pbackfail:
; Line 480
  0014f	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00156	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0015b	75 3d		 jne	 SHORT $LN8@pbackfail
  0015d	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  00164	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  00169	88 85 24 01 00
	00		 mov	 BYTE PTR $T4[rbp], al
  0016f	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00176	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  0017d	48 8d 8d 24 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00184	e8 00 00 00 00	 call	 ??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z ; std::_Ungetc<char>
  00189	0f b6 c0	 movzx	 eax, al
  0018c	85 c0		 test	 eax, eax
  0018e	74 0a		 je	 SHORT $LN8@pbackfail
; Line 481
  00190	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  00196	eb 50		 jmp	 SHORT $LN1@pbackfail
  00198	eb 4e		 jmp	 SHORT $LN9@pbackfail
$LN8@pbackfail:
; Line 482
  0019a	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  001a7	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ae	48 83 c1 70	 add	 rcx, 112		; 00000070H
  001b2	48 3b c1	 cmp	 rax, rcx
  001b5	74 2c		 je	 SHORT $LN10@pbackfail
; Line 484
  001b7	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  001be	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  001c3	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ca	88 41 70	 mov	 BYTE PTR [rcx+112], al
; Line 485
  001cd	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001d4	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
; Line 486
  001d9	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  001df	eb 07		 jmp	 SHORT $LN1@pbackfail
; Line 488
  001e1	eb 05		 jmp	 SHORT $LN11@pbackfail
$LN10@pbackfail:
; Line 489
  001e3	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
$LN11@pbackfail:
$LN9@pbackfail:
$LN6@pbackfail:
$LN3@pbackfail:
$LN1@pbackfail:
; Line 490
  001e8	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001ef	5f		 pop	 rdi
  001f0	5d		 pop	 rbp
  001f1	c3		 ret	 0
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
_TEXT	SEGMENT
_Codecvt_temp_buf$ = 8
_Str$ = 40
_Ch$ = 100
_Src$ = 136
_Dest$ = 168
_Count$7 = 200
$T8 = 420
tv184 = 436
tv178 = 436
tv163 = 436
tv147 = 436
tv84 = 440
__$ArrayPad$ = 448
this$ = 496
_Meta$ = 504
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 408
$LN18:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  00012	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c5	 xor	 rax, rbp
  00038	48 89 85 c0 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 409
  0004b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00050	89 85 a4 01 00
	00		 mov	 DWORD PTR $T8[rbp], eax
  00056	48 8d 95 f8 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  0005d	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00064	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00069	0f b6 c0	 movzx	 eax, al
  0006c	85 c0		 test	 eax, eax
  0006e	74 11		 je	 SHORT $LN4@overflow
; Line 411
  00070	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  00077	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHAEBH@Z ; std::char_traits<char>::not_eof
  0007c	e9 4b 02 00 00	 jmp	 $LN1@overflow
$LN4@overflow:
; Line 414
  00081	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0008e	48 85 c0	 test	 rax, rax
  00091	74 60		 je	 SHORT $LN5@overflow
  00093	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000a0	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv84[rbp], rax
  000a7	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000b4	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR tv84[rbp]
  000bb	48 3b c8	 cmp	 rcx, rax
  000be	73 33		 jae	 SHORT $LN5@overflow
; Line 416
  000c0	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  000c7	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  000cc	88 85 b4 01 00
	00		 mov	 BYTE PTR tv178[rbp], al
  000d2	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
  000df	0f b6 8d b4 01
	00 00		 movzx	 ecx, BYTE PTR tv178[rbp]
  000e6	88 08		 mov	 BYTE PTR [rax], cl
; Line 417
  000e8	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  000ee	e9 d9 01 00 00	 jmp	 $LN1@overflow
$LN5@overflow:
; Line 420
  000f3	48 8b 85 f0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fa	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00102	75 0a		 jne	 SHORT $LN6@overflow
; Line 422
  00104	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00109	e9 be 01 00 00	 jmp	 $LN1@overflow
$LN6@overflow:
; Line 425
  0010e	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00115	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
; Line 426
  0011a	48 8b 85 f0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00121	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00126	75 4d		 jne	 SHORT $LN7@overflow
; Line 428
  00128	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  0012f	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  00134	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0013b	48 8b 91 80 00
	00 00		 mov	 rdx, QWORD PTR [rcx+128]
  00142	0f b6 c8	 movzx	 ecx, al
  00145	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z ; std::_Fputc<char>
  0014a	0f b6 c0	 movzx	 eax, al
  0014d	85 c0		 test	 eax, eax
  0014f	74 0e		 je	 SHORT $LN14@overflow
  00151	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  00157	89 85 b4 01 00
	00		 mov	 DWORD PTR tv147[rbp], eax
  0015d	eb 0b		 jmp	 SHORT $LN15@overflow
$LN14@overflow:
  0015f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00164	89 85 b4 01 00
	00		 mov	 DWORD PTR tv147[rbp], eax
$LN15@overflow:
  0016a	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR tv147[rbp]
  00170	e9 57 01 00 00	 jmp	 $LN1@overflow
$LN7@overflow:
; Line 432
  00175	48 c7 45 08 20
	00 00 00	 mov	 QWORD PTR _Codecvt_temp_buf$[rbp], 32 ; 00000020H
; Line 434
  0017d	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  00184	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  00189	88 45 64	 mov	 BYTE PTR _Ch$[rbp], al
; Line 437
  0018c	48 8d 45 48	 lea	 rax, QWORD PTR _Str$[rbp+32]
  00190	48 8d 4d 65	 lea	 rcx, QWORD PTR _Ch$[rbp+1]
  00194	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0019b	48 83 c2 74	 add	 rdx, 116		; 00000074H
  0019f	4c 8d 85 a8 00
	00 00		 lea	 r8, QWORD PTR _Dest$[rbp]
  001a6	4c 89 44 24 38	 mov	 QWORD PTR [rsp+56], r8
  001ab	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  001b0	48 8d 45 28	 lea	 rax, QWORD PTR _Str$[rbp]
  001b4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001b9	48 8d 85 88 00
	00 00		 lea	 rax, QWORD PTR _Src$[rbp]
  001c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c5	4c 8b c9	 mov	 r9, rcx
  001c8	4c 8d 45 64	 lea	 r8, QWORD PTR _Ch$[rbp]
  001cc	48 8b 85 f0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d3	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  001d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z
  001dd	89 85 b4 01 00
	00		 mov	 DWORD PTR tv163[rbp], eax
  001e3	83 bd b4 01 00
	00 00		 cmp	 DWORD PTR tv163[rbp], 0
  001ea	0f 8c d7 00 00
	00		 jl	 $LN12@overflow
  001f0	83 bd b4 01 00
	00 01		 cmp	 DWORD PTR tv163[rbp], 1
  001f7	7e 12		 jle	 SHORT $LN8@overflow
  001f9	83 bd b4 01 00
	00 03		 cmp	 DWORD PTR tv163[rbp], 3
  00200	0f 84 82 00 00
	00		 je	 $LN11@overflow
  00206	e9 bc 00 00 00	 jmp	 $LN12@overflow
$LN8@overflow:
; Line 442
  0020b	48 8d 45 28	 lea	 rax, QWORD PTR _Str$[rbp]
  0020f	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Dest$[rbp]
  00216	48 2b c8	 sub	 rcx, rax
  00219	48 8b c1	 mov	 rax, rcx
  0021c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _Count$7[rbp], rax
; Line 443
  00223	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR _Count$7[rbp], 0
  0022b	76 34		 jbe	 SHORT $LN9@overflow
  0022d	48 8b 85 f0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00234	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  0023b	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR _Count$7[rbp]
  00242	ba 01 00 00 00	 mov	 edx, 1
  00247	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$[rbp]
  0024b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  00251	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR _Count$7[rbp], rax
  00258	74 07		 je	 SHORT $LN9@overflow
; Line 445
  0025a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0025f	eb 6b		 jmp	 SHORT $LN1@overflow
$LN9@overflow:
; Line 448
  00261	48 8b 85 f0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00268	c6 40 71 01	 mov	 BYTE PTR [rax+113], 1
; Line 449
  0026c	48 8d 45 64	 lea	 rax, QWORD PTR _Ch$[rbp]
  00270	48 39 85 88 00
	00 00		 cmp	 QWORD PTR _Src$[rbp], rax
  00277	74 08		 je	 SHORT $LN10@overflow
; Line 451
  00279	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  0027f	eb 4b		 jmp	 SHORT $LN1@overflow
$LN10@overflow:
; Line 454
  00281	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00286	eb 44		 jmp	 SHORT $LN1@overflow
$LN11@overflow:
; Line 459
  00288	48 8b 85 f0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0028f	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  00296	0f b6 4d 64	 movzx	 ecx, BYTE PTR _Ch$[rbp]
  0029a	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z ; std::_Fputc<char>
  0029f	0f b6 c0	 movzx	 eax, al
  002a2	85 c0		 test	 eax, eax
  002a4	74 0e		 je	 SHORT $LN16@overflow
  002a6	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  002ac	89 85 b4 01 00
	00		 mov	 DWORD PTR tv184[rbp], eax
  002b2	eb 0b		 jmp	 SHORT $LN17@overflow
$LN16@overflow:
  002b4	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  002b9	89 85 b4 01 00
	00		 mov	 DWORD PTR tv184[rbp], eax
$LN17@overflow:
  002bf	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR tv184[rbp]
  002c5	eb 05		 jmp	 SHORT $LN1@overflow
$LN12@overflow:
; Line 462
  002c7	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
$LN1@overflow:
; Line 464
  002cc	48 8b f8	 mov	 rdi, rax
  002cf	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  002d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcFrameData
  002da	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002df	48 8b c7	 mov	 rax, rdi
  002e2	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002e9	48 33 cd	 xor	 rcx, rbp
  002ec	e8 00 00 00 00	 call	 __security_check_cookie
  002f1	48 8d a5 d8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+472]
  002f8	5f		 pop	 rdi
  002f9	5d		 pop	 rbp
  002fa	c3		 ret	 0
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 401
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 402
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00045	74 14		 je	 SHORT $LN2@Unlock
; Line 403
  00047	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__unlock_file
$LN2@Unlock:
; Line 404
  0005b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 395
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 396
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00045	74 14		 je	 SHORT $LN2@Lock
; Line 397
  00047	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lock_file
$LN2@Lock:
; Line 398
  0005b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ
_TEXT	SEGMENT
_Ans$ = 8
this$ = 256
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 379
$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 380
  00036	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 89 45 08	 mov	 QWORD PTR _Ans$[rbp], rax
; Line 381
  00041	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00050	75 0a		 jne	 SHORT $LN2@close
; Line 382
  00052	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Ans$[rbp], 0
; Line 383
  0005a	eb 3b		 jmp	 SHORT $LN3@close
$LN2@close:
; Line 385
  0005c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00068	0f b6 c0	 movzx	 eax, al
  0006b	85 c0		 test	 eax, eax
  0006d	75 08		 jne	 SHORT $LN4@close
; Line 386
  0006f	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Ans$[rbp], 0
$LN4@close:
; Line 387
  00077	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007e	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
  0008b	85 c0		 test	 eax, eax
  0008d	74 08		 je	 SHORT $LN5@close
; Line 388
  0008f	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Ans$[rbp], 0
$LN5@close:
$LN3@close:
; Line 390
  00097	41 b8 02 00 00
	00		 mov	 r8d, 2
  0009d	33 d2		 xor	 edx, edx
  0009f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a6	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
; Line 391
  000ab	48 8b 45 08	 mov	 rax, QWORD PTR _Ans$[rbp]
; Line 392
  000af	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b6	5f		 pop	 rdi
  000b7	5d		 pop	 rbp
  000b8	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
_TEXT	SEGMENT
_File$ = 8
$T1 = 232
$T2 = 280
tv90 = 296
tv89 = 304
this$ = 352
_Filename$ = 360
_Mode$ = 368
_Prot$ = 376
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 286
$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  00039	48 c7 85 18 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  0004b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 288
  00050	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0005f	75 24		 jne	 SHORT $LN3@open
  00061	44 8b 85 78 01
	00 00		 mov	 r8d, DWORD PTR _Prot$[rbp]
  00068	8b 95 70 01 00
	00		 mov	 edx, DWORD PTR _Mode$[rbp]
  0006e	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Filename$[rbp]
  00075	e8 00 00 00 00	 call	 ?_Fiopen@std@@YAPEAU_iobuf@@PEBDHH@Z ; std::_Fiopen
  0007a	48 89 45 08	 mov	 QWORD PTR _File$[rbp], rax
  0007e	48 83 7d 08 00	 cmp	 QWORD PTR _File$[rbp], 0
  00083	75 04		 jne	 SHORT $LN2@open
$LN3@open:
; Line 289
  00085	33 c0		 xor	 eax, eax
  00087	eb 6e		 jmp	 SHORT $LN1@open
$LN2@open:
; Line 291
  00089	41 b8 01 00 00
	00		 mov	 r8d, 1
  0008f	48 8b 55 08	 mov	 rdx, QWORD PTR _File$[rbp]
  00093	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009a	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
; Line 292
  0009f	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  000a6	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEBA?AVlocale@2@XZ
  000b3	48 89 85 28 01
	00 00		 mov	 QWORD PTR tv90[rbp], rax
  000ba	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR tv90[rbp]
  000c1	48 89 85 30 01
	00 00		 mov	 QWORD PTR tv89[rbp], rax
  000c8	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR tv89[rbp]
  000cf	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  000d4	48 8b d0	 mov	 rdx, rax
  000d7	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000de	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  000e3	90		 npad	 1
  000e4	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  000eb	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
; Line 293
  000f0	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN1@open:
; Line 294
  000f7	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000fe	5f		 pop	 rdi
  000ff	5d		 pop	 rbp
  00100	c3		 ret	 0
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_File$ = 8
$T1 = 232
$T2 = 280
tv90 = 296
tv89 = 304
this$ = 352
_Filename$ = 360
_Mode$ = 368
_Prot$ = 376
?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::open'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0001b	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::open'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_File$ = 8
$T1 = 232
$T2 = 280
tv90 = 296
tv89 = 304
this$ = 352
_Filename$ = 360
_Mode$ = 368
_Prot$ = 376
?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::open'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0001b	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::open'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::is_open, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 279
$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 280
  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00045	74 0c		 je	 SHORT $LN3@is_open
  00047	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00051	eb 0a		 jmp	 SHORT $LN4@is_open
$LN3@is_open:
  00053	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@is_open:
  0005d	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]
; Line 281
  00064	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006b	5f		 pop	 rdi
  0006c	5d		 pop	 rbp
  0006d	c3		 ret	 0
?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::is_open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 172
$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 173
  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00062	74 0d		 je	 SHORT $LN2@basic_file
; Line 174
  00064	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
  00070	90		 npad	 1
$LN2@basic_file:
; Line 175
  00071	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00078	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  0007c	85 c0		 test	 eax, eax
  0007e	74 0d		 je	 SHORT $LN3@basic_file
; Line 176
  00080	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00087	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  0008c	90		 npad	 1
$LN3@basic_file:
; Line 177
  0008d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0009a	90		 npad	 1
  0009b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a2	5f		 pop	 rdi
  000a3	5d		 pop	 rbp
  000a4	c3		 ret	 0
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_File$ = 264
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 167
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 166
  00046	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ
  00053	90		 npad	 1
; Line 167
  00054	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  00062	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 168
  00065	45 33 c0	 xor	 r8d, r8d
  00068	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _File$[rbp]
  0006f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
  0007b	90		 npad	 1
; Line 169
  0007c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00083	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008a	5f		 pop	 rdi
  0008b	5d		 pop	 rbp
  0008c	c3		 ret	 0
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_File$ = 264
?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_File$ = 264
?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::close, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 1049
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1050
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 c0 10	 add	 rax, 16
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  00049	48 85 c0	 test	 rax, rax
  0004c	75 2c		 jne	 SHORT $LN2@close
; Line 1051
  0004e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00058	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	48 03 c8	 add	 rcx, rax
  00066	48 8b c1	 mov	 rax, rcx
  00069	45 33 c0	 xor	 r8d, r8d
  0006c	ba 02 00 00 00	 mov	 edx, 2
  00071	48 8b c8	 mov	 rcx, rax
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN2@close:
; Line 1052
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::is_open, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 1020
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1021
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 c0 10	 add	 rax, 16
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::is_open
; Line 1022
  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::is_open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 1011
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 80 50 ff
	ff ff		 mov	 rax, QWORD PTR [rax-176]
  00050	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00054	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00062	48 89 94 01 50
	ff ff ff	 mov	 QWORD PTR [rcx+rax-176], rdx
  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8b 80 50 ff
	ff ff		 mov	 rax, QWORD PTR [rax-176]
  00078	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0007c	48 2d b0 00 00
	00		 sub	 rax, 176		; 000000b0H
  00082	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00089	48 8b 89 50 ff
	ff ff		 mov	 rcx, QWORD PTR [rcx-176]
  00090	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00094	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0009b	89 84 0a 4c ff
	ff ff		 mov	 DWORD PTR [rdx+rcx-180], eax
; Line 1012
  000a2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 2d a0 00 00
	00		 sub	 rax, 160		; 000000a0H
  000af	48 8b c8	 mov	 rcx, rax
  000b2	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  000b7	90		 npad	 1
  000b8	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bf	48 2d 98 00 00
	00		 sub	 rax, 152		; 00000098H
  000c5	48 8b c8	 mov	 rcx, rax
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  000ce	90		 npad	 1
  000cf	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000d6	5f		 pop	 rdi
  000d7	5d		 pop	 rbp
  000d8	c3		 ret	 0
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z
_TEXT	SEGMENT
this$ = 224
_Str$ = 232
_Mode$ = 240
_Prot$ = 248
$initVBases$ = 256
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 859
$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 858
  00045	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0004c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00051	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR $initVBases$[rbp]
  00057	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0005b	44 8b 8d f8 00
	00 00		 mov	 r9d, DWORD PTR _Prot$[rbp]
  00062	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR _Mode$[rbp]
  00069	48 8b d0	 mov	 rdx, rax
  0006c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
; Line 859
  00078	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00082	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00086	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00094	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  00098	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a6	48 2d b0 00 00
	00		 sub	 rax, 176		; 000000b0H
  000ac	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b6	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000ba	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000c1	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax
; Line 860
  000c5	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cc	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000d3	5f		 pop	 rdi
  000d4	5d		 pop	 rbp
  000d5	c3		 ret	 0
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 850
$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00039	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  00044	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00055	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0005a	83 bd 40 01 00
	00 00		 cmp	 DWORD PTR $initVBases$[rbp], 0
  00061	74 37		 je	 SHORT $LN2@basic_ifst
  00063	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
  00071	48 89 08	 mov	 QWORD PTR [rax], rcx
  00074	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	48 05 b0 00 00
	00		 add	 rax, 176		; 000000b0H
  00081	48 8b c8	 mov	 rcx, rax
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ
  0008a	90		 npad	 1
  0008b	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  00091	83 c8 01	 or	 eax, 1
  00094	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
$LN2@basic_ifst:
; Line 849
  0009a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	48 83 c0 10	 add	 rax, 16
  000a5	45 33 c9	 xor	 r9d, r9d
  000a8	45 33 c0	 xor	 r8d, r8d
  000ab	48 8b d0	 mov	 rdx, rax
  000ae	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  000bb	90		 npad	 1
; Line 850
  000bc	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ca	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  000d8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  000dc	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e6	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ea	48 2d b0 00 00
	00		 sub	 rax, 176		; 000000b0H
  000f0	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000fa	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000fe	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00105	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax
  00109	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00110	48 83 c0 10	 add	 rax, 16
  00114	33 d2		 xor	 edx, edx
  00116	48 8b c8	 mov	 rcx, rax
  00119	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  0011e	90		 npad	 1
; Line 851
  0011f	8b 85 30 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00125	83 c8 01	 or	 eax, 1
  00128	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012f	48 83 c1 10	 add	 rcx, 16
  00133	44 8b 8d 38 01
	00 00		 mov	 r9d, DWORD PTR _Prot$[rbp]
  0013a	44 8b c0	 mov	 r8d, eax
  0013d	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Filename$[rbp]
  00144	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  00149	48 85 c0	 test	 rax, rax
  0014c	75 2d		 jne	 SHORT $LN3@basic_ifst
; Line 852
  0014e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00155	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00158	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0015c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00163	48 03 c8	 add	 rcx, rax
  00166	48 8b c1	 mov	 rax, rcx
  00169	45 33 c0	 xor	 r8d, r8d
  0016c	ba 02 00 00 00	 mov	 edx, 2
  00171	48 8b c8	 mov	 rcx, rax
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0017a	90		 npad	 1
$LN3@basic_ifst:
; Line 853
  0017b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00182	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00189	5f		 pop	 rdi
  0018a	5d		 pop	 rbp
  0018b	c3		 ret	 0
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN6@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 b0 00
	00 00		 add	 rcx, 176		; 000000b0H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN6@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 18	 add	 rcx, 24
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 10	 add	 rcx, 16
  0001f	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN6@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 b0 00
	00 00		 add	 rcx, 176		; 000000b0H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN6@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 18	 add	 rcx, 24
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Filename$ = 296
_Mode$ = 304
_Prot$ = 312
$initVBases$ = 320
?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 10	 add	 rcx, 16
  0001f	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z
_TEXT	SEGMENT
tv69 = 192
_Left$ = 240
_Right$ = 248
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 4249
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 4250
  0003b	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00049	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0004e	0f b6 c0	 movzx	 eax, al
  00051	85 c0		 test	 eax, eax
  00053	75 0c		 jne	 SHORT $LN3@operator
  00055	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv69[rbp], 1
  0005f	eb 0a		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00061	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv69[rbp], 0
$LN4@operator:
  0006b	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]
; Line 4251
  00072	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 4219
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 4220
  0003b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
; Line 4221
  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT main
_TEXT	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main	PROC						; COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 1573
$LN62:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec d8 09
	00 00		 sub	 rsp, 2520		; 000009d8H
  00012	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 76 02 00 00	 mov	 ecx, 630		; 00000276H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	8b 8c 24 f8 09
	00 00		 mov	 ecx, DWORD PTR [rsp+2552]
  0002d	48 c7 85 68 09
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T28[rbp], -2
  00038	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003f	48 33 c5	 xor	 rax, rbp
  00042	48 89 85 98 09
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00050	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1574
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clock
  0005b	89 45 04	 mov	 DWORD PTR start$[rbp], eax
; Line 1578
  0005e	8b 85 c0 09 00
	00		 mov	 eax, DWORD PTR argc$[rbp]
  00064	89 45 24	 mov	 DWORD PTR length$[rbp], eax
; Line 1579
  00067	83 7d 24 06	 cmp	 DWORD PTR length$[rbp], 6
  0006b	74 1e		 je	 SHORT $LN13@main
; Line 1580
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GK@LPBMLFBC@Error?3?5Bad?5input?4?5This?5program?5@
  00074	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0007b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
; Line 1581
  00080	b9 01 00 00 00	 mov	 ecx, 1
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN13@main:
; Line 1585
  0008b	b8 08 00 00 00	 mov	 eax, 8
  00090	48 6b c0 01	 imul	 rax, rax, 1
  00094	48 8b 8d c8 09
	00 00		 mov	 rcx, QWORD PTR argv$[rbp]
  0009b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0009f	48 8d 4d 48	 lea	 rcx, QWORD PTR arg1$[rbp]
  000a3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a8	90		 npad	 1
; Line 1586
  000a9	c6 85 84 00 00
	00 01		 mov	 BYTE PTR isEncrypt$[rbp], 1
; Line 1587
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DBLKFNPN@?9d@
  000b7	48 8d 4d 48	 lea	 rcx, QWORD PTR arg1$[rbp]
  000bb	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000c0	0f b6 c0	 movzx	 eax, al
  000c3	85 c0		 test	 eax, eax
  000c5	75 17		 jne	 SHORT $LN16@main
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KEDOHJFP@?9D@
  000ce	48 8d 4d 48	 lea	 rcx, QWORD PTR arg1$[rbp]
  000d2	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000d7	0f b6 c0	 movzx	 eax, al
  000da	85 c0		 test	 eax, eax
  000dc	74 09		 je	 SHORT $LN14@main
$LN16@main:
; Line 1588
  000de	c6 85 84 00 00
	00 00		 mov	 BYTE PTR isEncrypt$[rbp], 0
  000e5	eb 4c		 jmp	 SHORT $LN15@main
$LN14@main:
; Line 1589
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02CIKBGMLM@?9e@
  000ee	48 8d 4d 48	 lea	 rcx, QWORD PTR arg1$[rbp]
  000f2	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  000f7	0f b6 c0	 movzx	 eax, al
  000fa	85 c0		 test	 eax, eax
  000fc	74 35		 je	 SHORT $LN15@main
  000fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02LNCFEIBO@?9E@
  00105	48 8d 4d 48	 lea	 rcx, QWORD PTR arg1$[rbp]
  00109	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0010e	0f b6 c0	 movzx	 eax, al
  00111	85 c0		 test	 eax, eax
  00113	74 1e		 je	 SHORT $LN15@main
; Line 1591
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GC@JICANFHA@Error?3?5Bad?5input?3?5Action?5must?5b@
  0011c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00123	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
; Line 1592
  00128	b9 01 00 00 00	 mov	 ecx, 1
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN15@main:
; Line 1596
  00133	48 8d 85 98 08
	00 00		 lea	 rax, QWORD PTR $T23[rbp]
  0013a	48 89 85 d8 08
	00 00		 mov	 QWORD PTR $T24[rbp], rax
  00141	b8 08 00 00 00	 mov	 eax, 8
  00146	48 6b c0 02	 imul	 rax, rax, 2
  0014a	48 8b 8d c8 09
	00 00		 mov	 rcx, QWORD PTR argv$[rbp]
  00151	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00155	48 8b 8d d8 08
	00 00		 mov	 rcx, QWORD PTR $T24[rbp]
  0015c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00161	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv802[rbp], rax
  00168	48 8b 8d 78 09
	00 00		 mov	 rcx, QWORD PTR tv802[rbp]
  0016f	e8 00 00 00 00	 call	 ?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; prepUserKey
  00174	48 89 85 a8 00
	00 00		 mov	 QWORD PTR key$[rbp], rax
; Line 1598
  0017b	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00182	e8 00 00 00 00	 call	 ?makeK0@@YA_K_K@Z	; makeK0
  00187	48 89 85 a8 00
	00 00		 mov	 QWORD PTR key$[rbp], rax
; Line 1600
  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00195	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  0019c	e8 00 00 00 00	 call	 ?makeRoundKeys@@YAX_KQEA_K@Z ; makeRoundKeys
; Line 1603
  001a1	b8 08 00 00 00	 mov	 eax, 8
  001a6	48 6b c0 03	 imul	 rax, rax, 3
  001aa	48 8b 8d c8 09
	00 00		 mov	 rcx, QWORD PTR argv$[rbp]
  001b1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001b5	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR temp$[rbp]
  001bc	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001c1	90		 npad	 1
; Line 1604
  001c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
  001c9	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR mode$[rbp]
  001d0	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001d5	90		 npad	 1
; Line 1605
  001d6	c6 85 44 01 00
	00 01		 mov	 BYTE PTR isECB$[rbp], 1
; Line 1606
  001dd	33 c0		 xor	 eax, eax
  001df	66 89 85 64 01
	00 00		 mov	 WORD PTR i$12[rbp], ax
  001e6	eb 11		 jmp	 SHORT $LN4@main
$LN2@main:
  001e8	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR i$12[rbp]
  001ef	66 ff c0	 inc	 ax
  001f2	66 89 85 64 01
	00 00		 mov	 WORD PTR i$12[rbp], ax
$LN4@main:
  001f9	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR temp$[rbp]
  00200	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  00205	48 0f bf 8d 64
	01 00 00	 movsx	 rcx, WORD PTR i$12[rbp]
  0020d	48 3b c8	 cmp	 rcx, rax
  00210	73 33		 jae	 SHORT $LN3@main
; Line 1607
  00212	48 0f bf 85 64
	01 00 00	 movsx	 rax, WORD PTR i$12[rbp]
  0021a	48 8b d0	 mov	 rdx, rax
  0021d	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR temp$[rbp]
  00224	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00229	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0022c	8b c8		 mov	 ecx, eax
  0022e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  00234	0f b6 d0	 movzx	 edx, al
  00237	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR mode$[rbp]
  0023e	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  00243	eb a3		 jmp	 SHORT $LN2@main
$LN3@main:
; Line 1609
  00245	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03MPBJFLIO@ecb@
  0024c	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR mode$[rbp]
  00253	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00258	0f b6 c0	 movzx	 eax, al
  0025b	85 c0		 test	 eax, eax
  0025d	74 1e		 je	 SHORT $LN18@main
; Line 1611
  0025f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FH@MALAPMCE@Error?3?5Bad?5Input?4?5ECB?5mode?5is?5o@
  00266	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0026d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
; Line 1612
  00272	b9 01 00 00 00	 mov	 ecx, 1
  00277	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN18@main:
; Line 1616
  0027d	b8 08 00 00 00	 mov	 eax, 8
  00282	48 6b c0 04	 imul	 rax, rax, 4
  00286	48 8b 8d c8 09
	00 00		 mov	 rcx, QWORD PTR argv$[rbp]
  0028d	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00291	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR infile$[rbp]
  00298	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0029d	90		 npad	 1
; Line 1617
  0029e	b8 08 00 00 00	 mov	 eax, 8
  002a3	48 6b c0 05	 imul	 rax, rax, 5
  002a7	48 8b 8d c8 09
	00 00		 mov	 rcx, QWORD PTR argv$[rbp]
  002ae	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002b2	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR outfile$[rbp]
  002b9	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  002be	90		 npad	 1
; Line 1620
  002bf	48 c7 85 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR temp1$13[rbp], 0
; Line 1621
  002ca	48 c7 85 28 02
	00 00 00 00 00
	00		 mov	 QWORD PTR fileLength$14[rbp], 0
; Line 1623
  002d5	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  002da	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  002e1	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
  002e6	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  002ee	41 b9 40 00 00
	00		 mov	 r9d, 64			; 00000040H
  002f4	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  002fa	48 8d 95 88 01
	00 00		 lea	 rdx, QWORD PTR infile$[rbp]
  00301	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  00308	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
  0030d	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv187[rbp], rax
; Line 1625
  00314	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  0031b	e8 00 00 00 00	 call	 ?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ifstream<char,std::char_traits<char> >::is_open
  00320	88 85 74 09 00
	00		 mov	 BYTE PTR tv181[rbp], al
  00326	0f b6 85 74 09
	00 00		 movzx	 eax, BYTE PTR tv181[rbp]
  0032d	85 c0		 test	 eax, eax
  0032f	75 1e		 jne	 SHORT $LN20@main
; Line 1627
  00331	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@IBCEKME@Error?3?5File?5cannot?5be?5read?4@
  00338	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0033f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
; Line 1628
  00344	b9 01 00 00 00	 mov	 ecx, 1
  00349	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN20@main:
; Line 1632
  0034f	ba 08 01 00 00	 mov	 edx, 264		; 00000108H
  00354	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  0035b	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
  00360	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00368	41 b9 40 00 00
	00		 mov	 r9d, 64			; 00000040H
  0036e	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00374	48 8d 95 c8 01
	00 00		 lea	 rdx, QWORD PTR outfile$[rbp]
  0037b	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  00382	e8 00 00 00 00	 call	 ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
  00387	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv154[rbp], rax
; Line 1633
  0038e	48 8b 85 a0 03
	00 00		 mov	 rax, QWORD PTR outputText$17[rbp]
  00395	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00399	48 8d 84 05 a0
	03 00 00	 lea	 rax, QWORD PTR outputText$17[rbp+rax]
  003a1	ba 06 00 00 00	 mov	 edx, 6
  003a6	48 8b c8	 mov	 rcx, rax
  003a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?exceptions@ios_base@std@@QEAAXH@Z
; Line 1636
  003af	0f b6 85 84 00
	00 00		 movzx	 eax, BYTE PTR isEncrypt$[rbp]
  003b6	85 c0		 test	 eax, eax
  003b8	0f 84 da 09 00
	00		 je	 $LN21@main
; Line 1639
  003be	41 b8 02 00 00
	00		 mov	 r8d, 2
  003c4	33 d2		 xor	 edx, edx
  003c6	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  003cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@_JH@Z
; Line 1640
  003d3	48 8d 95 f8 08
	00 00		 lea	 rdx, QWORD PTR $T25[rbp]
  003da	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  003e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA?AV?$fpos@U_Mbstatet@@@2@XZ
  003e7	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv148[rbp], rax
  003ee	48 8b 8d 78 09
	00 00		 mov	 rcx, QWORD PTR tv148[rbp]
  003f5	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ; std::fpos<_Mbstatet>::operator __int64
  003fa	48 89 85 80 09
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  00401	48 8b 85 80 09
	00 00		 mov	 rax, QWORD PTR tv70[rbp]
  00408	48 89 85 28 02
	00 00		 mov	 QWORD PTR fileLength$14[rbp], rax
; Line 1641
  0040f	45 33 c0	 xor	 r8d, r8d
  00412	33 d2		 xor	 edx, edx
  00414	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  0041b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@_JH@Z
; Line 1643
  00421	8b 4d 04	 mov	 ecx, DWORD PTR start$[rbp]
  00424	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand
; Line 1644
  0042a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00430	48 98		 cdqe
  00432	33 d2		 xor	 edx, edx
  00434	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00439	48 f7 f1	 div	 rcx
  0043c	48 8b c2	 mov	 rax, rdx
  0043f	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv276[rbp], rax
  00446	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  0044c	48 98		 cdqe
  0044e	33 d2		 xor	 edx, edx
  00450	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00455	48 f7 f1	 div	 rcx
  00458	48 8b c2	 mov	 rax, rdx
  0045b	48 c1 e0 08	 shl	 rax, 8
  0045f	48 89 85 80 09
	00 00		 mov	 QWORD PTR tv272[rbp], rax
  00466	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  0046c	48 98		 cdqe
  0046e	33 d2		 xor	 edx, edx
  00470	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00475	48 f7 f1	 div	 rcx
  00478	48 8b c2	 mov	 rax, rdx
  0047b	48 c1 e0 10	 shl	 rax, 16
  0047f	48 89 85 88 09
	00 00		 mov	 QWORD PTR tv267[rbp], rax
  00486	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  0048c	48 98		 cdqe
  0048e	33 d2		 xor	 edx, edx
  00490	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00495	48 f7 f1	 div	 rcx
  00498	48 8b c2	 mov	 rax, rdx
  0049b	48 c1 e0 18	 shl	 rax, 24
  0049f	48 89 85 90 09
	00 00		 mov	 QWORD PTR tv262[rbp], rax
  004a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  004ac	48 98		 cdqe
  004ae	33 d2		 xor	 edx, edx
  004b0	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  004b5	48 f7 f1	 div	 rcx
  004b8	48 8b c2	 mov	 rax, rdx
  004bb	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  004bf	48 8b 8d 90 09
	00 00		 mov	 rcx, QWORD PTR tv262[rbp]
  004c6	48 0b c1	 or	 rax, rcx
  004c9	48 8b 8d 88 09
	00 00		 mov	 rcx, QWORD PTR tv267[rbp]
  004d0	48 0b c1	 or	 rax, rcx
  004d3	48 8b 8d 80 09
	00 00		 mov	 rcx, QWORD PTR tv272[rbp]
  004da	48 0b c1	 or	 rax, rcx
  004dd	48 8b 8d 78 09
	00 00		 mov	 rcx, QWORD PTR tv276[rbp]
  004e4	48 0b c1	 or	 rax, rcx
  004e7	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  004eb	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1646
  004f2	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR fileLength$14[rbp]
  004f9	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00500	48 0b c8	 or	 rcx, rax
  00503	48 8b c1	 mov	 rax, rcx
  00506	48 89 85 c8 04
	00 00		 mov	 QWORD PTR fileLengthNGarbage$18[rbp], rax
; Line 1647
  0050d	48 8b 8d c8 04
	00 00		 mov	 rcx, QWORD PTR fileLengthNGarbage$18[rbp]
  00514	e8 00 00 00 00	 call	 ?desEncrypt@@YA_K_K@Z	; desEncrypt
  00519	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv811[rbp], rax
  00520	48 8b 85 78 09
	00 00		 mov	 rax, QWORD PTR tv811[rbp]
  00527	48 89 85 c8 04
	00 00		 mov	 QWORD PTR fileLengthNGarbage$18[rbp], rax
; Line 1650
  0052e	48 8b 85 c8 04
	00 00		 mov	 rax, QWORD PTR fileLengthNGarbage$18[rbp]
  00535	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  00539	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0053f	b9 01 00 00 00	 mov	 ecx, 1
  00544	48 6b c9 00	 imul	 rcx, rcx, 0
  00548	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1651
  0054f	48 8b 85 c8 04
	00 00		 mov	 rax, QWORD PTR fileLengthNGarbage$18[rbp]
  00556	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  0055a	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00560	b9 01 00 00 00	 mov	 ecx, 1
  00565	48 6b c9 01	 imul	 rcx, rcx, 1
  00569	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1652
  00570	48 8b 85 c8 04
	00 00		 mov	 rax, QWORD PTR fileLengthNGarbage$18[rbp]
  00577	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  0057b	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00581	b9 01 00 00 00	 mov	 ecx, 1
  00586	48 6b c9 02	 imul	 rcx, rcx, 2
  0058a	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1653
  00591	48 8b 85 c8 04
	00 00		 mov	 rax, QWORD PTR fileLengthNGarbage$18[rbp]
  00598	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0059c	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  005a2	b9 01 00 00 00	 mov	 ecx, 1
  005a7	48 6b c9 03	 imul	 rcx, rcx, 3
  005ab	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1654
  005b2	48 8b 85 c8 04
	00 00		 mov	 rax, QWORD PTR fileLengthNGarbage$18[rbp]
  005b9	48 c1 e8 18	 shr	 rax, 24
  005bd	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  005c3	b9 01 00 00 00	 mov	 ecx, 1
  005c8	48 6b c9 04	 imul	 rcx, rcx, 4
  005cc	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1655
  005d3	48 8b 85 c8 04
	00 00		 mov	 rax, QWORD PTR fileLengthNGarbage$18[rbp]
  005da	48 c1 e8 10	 shr	 rax, 16
  005de	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  005e4	b9 01 00 00 00	 mov	 ecx, 1
  005e9	48 6b c9 05	 imul	 rcx, rcx, 5
  005ed	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1656
  005f4	48 8b 85 c8 04
	00 00		 mov	 rax, QWORD PTR fileLengthNGarbage$18[rbp]
  005fb	48 c1 e8 08	 shr	 rax, 8
  005ff	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00605	b9 01 00 00 00	 mov	 ecx, 1
  0060a	48 6b c9 06	 imul	 rcx, rcx, 6
  0060e	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1657
  00615	48 8b 85 c8 04
	00 00		 mov	 rax, QWORD PTR fileLengthNGarbage$18[rbp]
  0061c	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00622	b9 01 00 00 00	 mov	 ecx, 1
  00627	48 6b c9 07	 imul	 rcx, rcx, 7
  0062b	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1658
  00632	41 b8 08 00 00
	00		 mov	 r8d, 8
  00638	48 8d 95 78 03
	00 00		 lea	 rdx, QWORD PTR buffer$16[rbp]
  0063f	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  00646	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z
$LN5@main:
; Line 1661
  0064c	41 b8 08 00 00
	00		 mov	 r8d, 8
  00652	48 8d 95 78 03
	00 00		 lea	 rdx, QWORD PTR buffer$16[rbp]
  00659	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  00660	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEAD_J@Z
  00666	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv812[rbp], rax
  0066d	48 8b 85 78 09
	00 00		 mov	 rax, QWORD PTR tv812[rbp]
  00674	48 89 85 28 09
	00 00		 mov	 QWORD PTR $T26[rbp], rax
  0067b	48 8b 85 28 09
	00 00		 mov	 rax, QWORD PTR $T26[rbp]
  00682	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00685	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00689	48 8b 8d 28 09
	00 00		 mov	 rcx, QWORD PTR $T26[rbp]
  00690	48 03 c8	 add	 rcx, rax
  00693	48 8b c1	 mov	 rax, rcx
  00696	48 8b c8	 mov	 rcx, rax
  00699	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??Bios_base@std@@QEBA_NXZ
  0069f	88 85 80 09 00
	00		 mov	 BYTE PTR tv813[rbp], al
  006a5	0f b6 85 80 09
	00 00		 movzx	 eax, BYTE PTR tv813[rbp]
  006ac	85 c0		 test	 eax, eax
  006ae	0f 84 7b 02 00
	00		 je	 $LN6@main
; Line 1663
  006b4	b8 01 00 00 00	 mov	 eax, 1
  006b9	48 6b c0 00	 imul	 rax, rax, 0
  006bd	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  006c5	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  006c9	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1664
  006d0	b8 01 00 00 00	 mov	 eax, 1
  006d5	48 6b c0 01	 imul	 rax, rax, 1
  006d9	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  006e1	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  006e5	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  006ec	48 0b c8	 or	 rcx, rax
  006ef	48 8b c1	 mov	 rax, rcx
  006f2	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1665
  006f9	b8 01 00 00 00	 mov	 eax, 1
  006fe	48 6b c0 02	 imul	 rax, rax, 2
  00702	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  0070a	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  0070e	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00715	48 0b c8	 or	 rcx, rax
  00718	48 8b c1	 mov	 rax, rcx
  0071b	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1666
  00722	b8 01 00 00 00	 mov	 eax, 1
  00727	48 6b c0 03	 imul	 rax, rax, 3
  0072b	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00733	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00737	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  0073e	48 0b c8	 or	 rcx, rax
  00741	48 8b c1	 mov	 rax, rcx
  00744	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1667
  0074b	b8 01 00 00 00	 mov	 eax, 1
  00750	48 6b c0 04	 imul	 rax, rax, 4
  00754	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  0075c	48 c1 e0 18	 shl	 rax, 24
  00760	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00767	48 0b c8	 or	 rcx, rax
  0076a	48 8b c1	 mov	 rax, rcx
  0076d	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1668
  00774	b8 01 00 00 00	 mov	 eax, 1
  00779	48 6b c0 05	 imul	 rax, rax, 5
  0077d	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00785	48 c1 e0 10	 shl	 rax, 16
  00789	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00790	48 0b c8	 or	 rcx, rax
  00793	48 8b c1	 mov	 rax, rcx
  00796	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1669
  0079d	b8 01 00 00 00	 mov	 eax, 1
  007a2	48 6b c0 06	 imul	 rax, rax, 6
  007a6	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  007ae	48 c1 e0 08	 shl	 rax, 8
  007b2	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  007b9	48 0b c8	 or	 rcx, rax
  007bc	48 8b c1	 mov	 rax, rcx
  007bf	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1670
  007c6	b8 01 00 00 00	 mov	 eax, 1
  007cb	48 6b c0 07	 imul	 rax, rax, 7
  007cf	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  007d7	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  007de	48 0b c8	 or	 rcx, rax
  007e1	48 8b c1	 mov	 rax, rcx
  007e4	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1671
  007eb	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  007f2	e8 00 00 00 00	 call	 ?desEncrypt@@YA_K_K@Z	; desEncrypt
  007f7	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv814[rbp], rax
  007fe	48 8b 85 78 09
	00 00		 mov	 rax, QWORD PTR tv814[rbp]
  00805	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1674
  0080c	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00813	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  00817	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0081d	b9 01 00 00 00	 mov	 ecx, 1
  00822	48 6b c9 00	 imul	 rcx, rcx, 0
  00826	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1675
  0082d	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00834	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00838	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0083e	b9 01 00 00 00	 mov	 ecx, 1
  00843	48 6b c9 01	 imul	 rcx, rcx, 1
  00847	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1676
  0084e	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00855	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00859	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0085f	b9 01 00 00 00	 mov	 ecx, 1
  00864	48 6b c9 02	 imul	 rcx, rcx, 2
  00868	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1677
  0086f	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00876	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0087a	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00880	b9 01 00 00 00	 mov	 ecx, 1
  00885	48 6b c9 03	 imul	 rcx, rcx, 3
  00889	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1678
  00890	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00897	48 c1 e8 18	 shr	 rax, 24
  0089b	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  008a1	b9 01 00 00 00	 mov	 ecx, 1
  008a6	48 6b c9 04	 imul	 rcx, rcx, 4
  008aa	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1679
  008b1	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  008b8	48 c1 e8 10	 shr	 rax, 16
  008bc	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  008c2	b9 01 00 00 00	 mov	 ecx, 1
  008c7	48 6b c9 05	 imul	 rcx, rcx, 5
  008cb	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1680
  008d2	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  008d9	48 c1 e8 08	 shr	 rax, 8
  008dd	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  008e3	b9 01 00 00 00	 mov	 ecx, 1
  008e8	48 6b c9 06	 imul	 rcx, rcx, 6
  008ec	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1681
  008f3	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  008fa	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00900	b9 01 00 00 00	 mov	 ecx, 1
  00905	48 6b c9 07	 imul	 rcx, rcx, 7
  00909	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1682
  00910	41 b8 08 00 00
	00		 mov	 r8d, 8
  00916	48 8d 95 78 03
	00 00		 lea	 rdx, QWORD PTR buffer$16[rbp]
  0091d	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  00924	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z
; Line 1683
  0092a	e9 1d fd ff ff	 jmp	 $LN5@main
$LN6@main:
; Line 1686
  0092f	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  00936	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gcount@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_JXZ
  0093c	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv815[rbp], rax
  00943	8b 85 78 09 00
	00		 mov	 eax, DWORD PTR tv815[rbp]
  00949	89 85 e4 04 00
	00		 mov	 DWORD PTR bytesLeft$19[rbp], eax
; Line 1687
  0094f	83 bd e4 04 00
	00 00		 cmp	 DWORD PTR bytesLeft$19[rbp], 0
  00956	0f 8e 37 04 00
	00		 jle	 $LN23@main
; Line 1689
  0095c	48 c7 85 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR temp1$13[rbp], 0
; Line 1691
  00967	8b 85 e4 04 00
	00		 mov	 eax, DWORD PTR bytesLeft$19[rbp]
  0096d	89 85 74 09 00
	00		 mov	 DWORD PTR tv444[rbp], eax
  00973	8b 85 74 09 00
	00		 mov	 eax, DWORD PTR tv444[rbp]
  00979	ff c8		 dec	 eax
  0097b	89 85 74 09 00
	00		 mov	 DWORD PTR tv444[rbp], eax
  00981	83 bd 74 09 00
	00 06		 cmp	 DWORD PTR tv444[rbp], 6
  00988	0f 87 39 01 00
	00		 ja	 $LN7@main
  0098e	48 63 85 74 09
	00 00		 movsxd	 rax, DWORD PTR tv444[rbp]
  00995	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0099c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN59@main[rcx+rax*4]
  009a3	48 03 c1	 add	 rax, rcx
  009a6	ff e0		 jmp	 rax
$LN24@main:
; Line 1692
  009a8	b8 01 00 00 00	 mov	 eax, 1
  009ad	48 6b c0 06	 imul	 rax, rax, 6
  009b1	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  009b9	48 c1 e0 08	 shl	 rax, 8
  009bd	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  009c4	48 0b c8	 or	 rcx, rax
  009c7	48 8b c1	 mov	 rax, rcx
  009ca	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN25@main:
; Line 1693
  009d1	b8 01 00 00 00	 mov	 eax, 1
  009d6	48 6b c0 05	 imul	 rax, rax, 5
  009da	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  009e2	48 c1 e0 10	 shl	 rax, 16
  009e6	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  009ed	48 0b c8	 or	 rcx, rax
  009f0	48 8b c1	 mov	 rax, rcx
  009f3	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN26@main:
; Line 1694
  009fa	b8 01 00 00 00	 mov	 eax, 1
  009ff	48 6b c0 04	 imul	 rax, rax, 4
  00a03	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00a0b	48 c1 e0 18	 shl	 rax, 24
  00a0f	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00a16	48 0b c8	 or	 rcx, rax
  00a19	48 8b c1	 mov	 rax, rcx
  00a1c	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN27@main:
; Line 1695
  00a23	b8 01 00 00 00	 mov	 eax, 1
  00a28	48 6b c0 03	 imul	 rax, rax, 3
  00a2c	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00a34	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00a38	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00a3f	48 0b c8	 or	 rcx, rax
  00a42	48 8b c1	 mov	 rax, rcx
  00a45	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN28@main:
; Line 1696
  00a4c	b8 01 00 00 00	 mov	 eax, 1
  00a51	48 6b c0 02	 imul	 rax, rax, 2
  00a55	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00a5d	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00a61	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00a68	48 0b c8	 or	 rcx, rax
  00a6b	48 8b c1	 mov	 rax, rcx
  00a6e	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN29@main:
; Line 1697
  00a75	b8 01 00 00 00	 mov	 eax, 1
  00a7a	48 6b c0 01	 imul	 rax, rax, 1
  00a7e	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00a86	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00a8a	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00a91	48 0b c8	 or	 rcx, rax
  00a94	48 8b c1	 mov	 rax, rcx
  00a97	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN30@main:
; Line 1698
  00a9e	b8 01 00 00 00	 mov	 eax, 1
  00aa3	48 6b c0 00	 imul	 rax, rax, 0
  00aa7	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00aaf	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  00ab3	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00aba	48 0b c8	 or	 rcx, rax
  00abd	48 8b c1	 mov	 rax, rcx
  00ac0	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN7@main:
; Line 1701
  00ac7	8b 85 e4 04 00
	00		 mov	 eax, DWORD PTR bytesLeft$19[rbp]
  00acd	89 85 74 09 00
	00		 mov	 DWORD PTR tv482[rbp], eax
  00ad3	8b 85 74 09 00
	00		 mov	 eax, DWORD PTR tv482[rbp]
  00ad9	ff c8		 dec	 eax
  00adb	89 85 74 09 00
	00		 mov	 DWORD PTR tv482[rbp], eax
  00ae1	83 bd 74 09 00
	00 05		 cmp	 DWORD PTR tv482[rbp], 5
  00ae8	0f 87 3a 01 00
	00		 ja	 $LN37@main
  00aee	48 63 85 74 09
	00 00		 movsxd	 rax, DWORD PTR tv482[rbp]
  00af5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00afc	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN58@main[rcx+rax*4]
  00b03	48 03 c1	 add	 rax, rcx
  00b06	ff e0		 jmp	 rax
$LN31@main:
; Line 1702
  00b08	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00b0e	99		 cdq
  00b0f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00b15	03 c2		 add	 eax, edx
  00b17	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b1c	2b c2		 sub	 eax, edx
  00b1e	48 98		 cdqe
  00b20	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00b24	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00b2b	48 0b c8	 or	 rcx, rax
  00b2e	48 8b c1	 mov	 rax, rcx
  00b31	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN32@main:
; Line 1703
  00b38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00b3e	99		 cdq
  00b3f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00b45	03 c2		 add	 eax, edx
  00b47	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b4c	2b c2		 sub	 eax, edx
  00b4e	48 98		 cdqe
  00b50	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00b54	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00b5b	48 0b c8	 or	 rcx, rax
  00b5e	48 8b c1	 mov	 rax, rcx
  00b61	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN33@main:
; Line 1704
  00b68	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00b6e	99		 cdq
  00b6f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00b75	03 c2		 add	 eax, edx
  00b77	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b7c	2b c2		 sub	 eax, edx
  00b7e	48 98		 cdqe
  00b80	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00b84	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00b8b	48 0b c8	 or	 rcx, rax
  00b8e	48 8b c1	 mov	 rax, rcx
  00b91	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN34@main:
; Line 1705
  00b98	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00b9e	99		 cdq
  00b9f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00ba5	03 c2		 add	 eax, edx
  00ba7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00bac	2b c2		 sub	 eax, edx
  00bae	48 98		 cdqe
  00bb0	48 c1 e0 18	 shl	 rax, 24
  00bb4	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00bbb	48 0b c8	 or	 rcx, rax
  00bbe	48 8b c1	 mov	 rax, rcx
  00bc1	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN35@main:
; Line 1706
  00bc8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00bce	99		 cdq
  00bcf	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00bd5	03 c2		 add	 eax, edx
  00bd7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00bdc	2b c2		 sub	 eax, edx
  00bde	48 98		 cdqe
  00be0	48 c1 e0 10	 shl	 rax, 16
  00be4	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00beb	48 0b c8	 or	 rcx, rax
  00bee	48 8b c1	 mov	 rax, rcx
  00bf1	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN36@main:
; Line 1707
  00bf8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00bfe	99		 cdq
  00bff	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00c05	03 c2		 add	 eax, edx
  00c07	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c0c	2b c2		 sub	 eax, edx
  00c0e	48 98		 cdqe
  00c10	48 c1 e0 08	 shl	 rax, 8
  00c14	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00c1b	48 0b c8	 or	 rcx, rax
  00c1e	48 8b c1	 mov	 rax, rcx
  00c21	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
$LN37@main:
; Line 1708
  00c28	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00c2e	99		 cdq
  00c2f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00c35	03 c2		 add	 eax, edx
  00c37	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c3c	2b c2		 sub	 eax, edx
  00c3e	48 98		 cdqe
  00c40	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00c47	48 0b c8	 or	 rcx, rax
  00c4a	48 8b c1	 mov	 rax, rcx
  00c4d	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1711
  00c54	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00c5b	e8 00 00 00 00	 call	 ?desEncrypt@@YA_K_K@Z	; desEncrypt
  00c60	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv817[rbp], rax
  00c67	48 8b 85 78 09
	00 00		 mov	 rax, QWORD PTR tv817[rbp]
  00c6e	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1714
  00c75	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00c7c	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  00c80	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00c86	b9 01 00 00 00	 mov	 ecx, 1
  00c8b	48 6b c9 00	 imul	 rcx, rcx, 0
  00c8f	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1715
  00c96	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00c9d	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00ca1	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00ca7	b9 01 00 00 00	 mov	 ecx, 1
  00cac	48 6b c9 01	 imul	 rcx, rcx, 1
  00cb0	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1716
  00cb7	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00cbe	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00cc2	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00cc8	b9 01 00 00 00	 mov	 ecx, 1
  00ccd	48 6b c9 02	 imul	 rcx, rcx, 2
  00cd1	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1717
  00cd8	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00cdf	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00ce3	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00ce9	b9 01 00 00 00	 mov	 ecx, 1
  00cee	48 6b c9 03	 imul	 rcx, rcx, 3
  00cf2	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1718
  00cf9	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00d00	48 c1 e8 18	 shr	 rax, 24
  00d04	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00d0a	b9 01 00 00 00	 mov	 ecx, 1
  00d0f	48 6b c9 04	 imul	 rcx, rcx, 4
  00d13	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1719
  00d1a	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00d21	48 c1 e8 10	 shr	 rax, 16
  00d25	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00d2b	b9 01 00 00 00	 mov	 ecx, 1
  00d30	48 6b c9 05	 imul	 rcx, rcx, 5
  00d34	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1720
  00d3b	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00d42	48 c1 e8 08	 shr	 rax, 8
  00d46	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00d4c	b9 01 00 00 00	 mov	 ecx, 1
  00d51	48 6b c9 06	 imul	 rcx, rcx, 6
  00d55	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1721
  00d5c	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00d63	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00d69	b9 01 00 00 00	 mov	 ecx, 1
  00d6e	48 6b c9 07	 imul	 rcx, rcx, 7
  00d72	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1722
  00d79	41 b8 08 00 00
	00		 mov	 r8d, 8
  00d7f	48 8d 95 78 03
	00 00		 lea	 rdx, QWORD PTR buffer$16[rbp]
  00d86	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  00d8d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z
$LN23@main:
; Line 1725
  00d93	e9 ed 04 00 00	 jmp	 $LN22@main
$LN21@main:
; Line 1728
  00d98	41 b8 08 00 00
	00		 mov	 r8d, 8
  00d9e	48 8d 95 78 03
	00 00		 lea	 rdx, QWORD PTR buffer$16[rbp]
  00da5	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  00dac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEAD_J@Z
; Line 1729
  00db2	b8 01 00 00 00	 mov	 eax, 1
  00db7	48 6b c0 00	 imul	 rax, rax, 0
  00dbb	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00dc3	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  00dc7	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1730
  00dce	b8 01 00 00 00	 mov	 eax, 1
  00dd3	48 6b c0 01	 imul	 rax, rax, 1
  00dd7	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00ddf	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00de3	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00dea	48 0b c8	 or	 rcx, rax
  00ded	48 8b c1	 mov	 rax, rcx
  00df0	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1731
  00df7	b8 01 00 00 00	 mov	 eax, 1
  00dfc	48 6b c0 02	 imul	 rax, rax, 2
  00e00	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00e08	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00e0c	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00e13	48 0b c8	 or	 rcx, rax
  00e16	48 8b c1	 mov	 rax, rcx
  00e19	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1732
  00e20	b8 01 00 00 00	 mov	 eax, 1
  00e25	48 6b c0 03	 imul	 rax, rax, 3
  00e29	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00e31	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00e35	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00e3c	48 0b c8	 or	 rcx, rax
  00e3f	48 8b c1	 mov	 rax, rcx
  00e42	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1733
  00e49	b8 01 00 00 00	 mov	 eax, 1
  00e4e	48 6b c0 04	 imul	 rax, rax, 4
  00e52	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00e5a	48 c1 e0 18	 shl	 rax, 24
  00e5e	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00e65	48 0b c8	 or	 rcx, rax
  00e68	48 8b c1	 mov	 rax, rcx
  00e6b	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1734
  00e72	b8 01 00 00 00	 mov	 eax, 1
  00e77	48 6b c0 05	 imul	 rax, rax, 5
  00e7b	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00e83	48 c1 e0 10	 shl	 rax, 16
  00e87	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00e8e	48 0b c8	 or	 rcx, rax
  00e91	48 8b c1	 mov	 rax, rcx
  00e94	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1735
  00e9b	b8 01 00 00 00	 mov	 eax, 1
  00ea0	48 6b c0 06	 imul	 rax, rax, 6
  00ea4	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00eac	48 c1 e0 08	 shl	 rax, 8
  00eb0	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00eb7	48 0b c8	 or	 rcx, rax
  00eba	48 8b c1	 mov	 rax, rcx
  00ebd	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1736
  00ec4	b8 01 00 00 00	 mov	 eax, 1
  00ec9	48 6b c0 07	 imul	 rax, rax, 7
  00ecd	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00ed5	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00edc	48 0b c8	 or	 rcx, rax
  00edf	48 8b c1	 mov	 rax, rcx
  00ee2	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1738
  00ee9	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00ef0	e8 00 00 00 00	 call	 ?desDecrypt@@YA_K_K@Z	; desDecrypt
  00ef5	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv818[rbp], rax
  00efc	48 8b 85 78 09
	00 00		 mov	 rax, QWORD PTR tv818[rbp]
  00f03	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1739
  00f0a	8b 85 08 02 00
	00		 mov	 eax, DWORD PTR temp1$13[rbp]
  00f10	48 89 85 28 02
	00 00		 mov	 QWORD PTR fileLength$14[rbp], rax
; Line 1742
  00f17	c6 85 04 05 00
	00 01		 mov	 BYTE PTR isNotLastBlock$20[rbp], 1
; Line 1743
  00f1e	c7 85 24 05 00
	00 00 00 00 00	 mov	 DWORD PTR count$21[rbp], 0
$LN11@main:
; Line 1744
  00f28	41 b8 08 00 00
	00		 mov	 r8d, 8
  00f2e	48 8d 95 78 03
	00 00		 lea	 rdx, QWORD PTR buffer$16[rbp]
  00f35	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  00f3c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEAD_J@Z
  00f42	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv819[rbp], rax
  00f49	48 8b 85 78 09
	00 00		 mov	 rax, QWORD PTR tv819[rbp]
  00f50	48 89 85 48 09
	00 00		 mov	 QWORD PTR $T27[rbp], rax
  00f57	48 8b 85 48 09
	00 00		 mov	 rax, QWORD PTR $T27[rbp]
  00f5e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00f61	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00f65	48 8b 8d 48 09
	00 00		 mov	 rcx, QWORD PTR $T27[rbp]
  00f6c	48 03 c8	 add	 rcx, rax
  00f6f	48 8b c1	 mov	 rax, rcx
  00f72	48 8b c8	 mov	 rcx, rax
  00f75	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??Bios_base@std@@QEBA_NXZ
  00f7b	88 85 80 09 00
	00		 mov	 BYTE PTR tv820[rbp], al
  00f81	0f b6 85 80 09
	00 00		 movzx	 eax, BYTE PTR tv820[rbp]
  00f88	85 c0		 test	 eax, eax
  00f8a	0f 84 f5 02 00
	00		 je	 $LN22@main
; Line 1746
  00f90	b8 01 00 00 00	 mov	 eax, 1
  00f95	48 6b c0 00	 imul	 rax, rax, 0
  00f99	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00fa1	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  00fa5	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1747
  00fac	b8 01 00 00 00	 mov	 eax, 1
  00fb1	48 6b c0 01	 imul	 rax, rax, 1
  00fb5	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00fbd	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00fc1	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00fc8	48 0b c8	 or	 rcx, rax
  00fcb	48 8b c1	 mov	 rax, rcx
  00fce	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1748
  00fd5	b8 01 00 00 00	 mov	 eax, 1
  00fda	48 6b c0 02	 imul	 rax, rax, 2
  00fde	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  00fe6	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00fea	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  00ff1	48 0b c8	 or	 rcx, rax
  00ff4	48 8b c1	 mov	 rax, rcx
  00ff7	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1749
  00ffe	b8 01 00 00 00	 mov	 eax, 1
  01003	48 6b c0 03	 imul	 rax, rax, 3
  01007	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  0100f	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  01013	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  0101a	48 0b c8	 or	 rcx, rax
  0101d	48 8b c1	 mov	 rax, rcx
  01020	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1750
  01027	b8 01 00 00 00	 mov	 eax, 1
  0102c	48 6b c0 04	 imul	 rax, rax, 4
  01030	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  01038	48 c1 e0 18	 shl	 rax, 24
  0103c	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  01043	48 0b c8	 or	 rcx, rax
  01046	48 8b c1	 mov	 rax, rcx
  01049	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1751
  01050	b8 01 00 00 00	 mov	 eax, 1
  01055	48 6b c0 05	 imul	 rax, rax, 5
  01059	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  01061	48 c1 e0 10	 shl	 rax, 16
  01065	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  0106c	48 0b c8	 or	 rcx, rax
  0106f	48 8b c1	 mov	 rax, rcx
  01072	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1752
  01079	b8 01 00 00 00	 mov	 eax, 1
  0107e	48 6b c0 06	 imul	 rax, rax, 6
  01082	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  0108a	48 c1 e0 08	 shl	 rax, 8
  0108e	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  01095	48 0b c8	 or	 rcx, rax
  01098	48 8b c1	 mov	 rax, rcx
  0109b	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1753
  010a2	b8 01 00 00 00	 mov	 eax, 1
  010a7	48 6b c0 07	 imul	 rax, rax, 7
  010ab	0f b6 84 05 78
	03 00 00	 movzx	 eax, BYTE PTR buffer$16[rbp+rax]
  010b3	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  010ba	48 0b c8	 or	 rcx, rax
  010bd	48 8b c1	 mov	 rax, rcx
  010c0	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1754
  010c7	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR temp1$13[rbp]
  010ce	e8 00 00 00 00	 call	 ?desDecrypt@@YA_K_K@Z	; desDecrypt
  010d3	48 89 85 78 09
	00 00		 mov	 QWORD PTR tv821[rbp], rax
  010da	48 8b 85 78 09
	00 00		 mov	 rax, QWORD PTR tv821[rbp]
  010e1	48 89 85 08 02
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax
; Line 1758
  010e8	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  010ef	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  010f3	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  010f9	b9 01 00 00 00	 mov	 ecx, 1
  010fe	48 6b c9 00	 imul	 rcx, rcx, 0
  01102	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1759
  01109	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  01110	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  01114	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0111a	b9 01 00 00 00	 mov	 ecx, 1
  0111f	48 6b c9 01	 imul	 rcx, rcx, 1
  01123	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1760
  0112a	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  01131	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  01135	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0113b	b9 01 00 00 00	 mov	 ecx, 1
  01140	48 6b c9 02	 imul	 rcx, rcx, 2
  01144	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1761
  0114b	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  01152	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  01156	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0115c	b9 01 00 00 00	 mov	 ecx, 1
  01161	48 6b c9 03	 imul	 rcx, rcx, 3
  01165	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1762
  0116c	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  01173	48 c1 e8 18	 shr	 rax, 24
  01177	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0117d	b9 01 00 00 00	 mov	 ecx, 1
  01182	48 6b c9 04	 imul	 rcx, rcx, 4
  01186	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1763
  0118d	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  01194	48 c1 e8 10	 shr	 rax, 16
  01198	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0119e	b9 01 00 00 00	 mov	 ecx, 1
  011a3	48 6b c9 05	 imul	 rcx, rcx, 5
  011a7	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1764
  011ae	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  011b5	48 c1 e8 08	 shr	 rax, 8
  011b9	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  011bf	b9 01 00 00 00	 mov	 ecx, 1
  011c4	48 6b c9 06	 imul	 rcx, rcx, 6
  011c8	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1765
  011cf	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  011d6	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  011dc	b9 01 00 00 00	 mov	 ecx, 1
  011e1	48 6b c9 07	 imul	 rcx, rcx, 7
  011e5	88 84 0d 78 03
	00 00		 mov	 BYTE PTR buffer$16[rbp+rcx], al
; Line 1767
  011ec	8b 85 24 05 00
	00		 mov	 eax, DWORD PTR count$21[rbp]
  011f2	83 c0 08	 add	 eax, 8
  011f5	89 85 24 05 00
	00		 mov	 DWORD PTR count$21[rbp], eax
; Line 1768
  011fb	48 63 85 24 05
	00 00		 movsxd	 rax, DWORD PTR count$21[rbp]
  01202	48 3b 85 28 02
	00 00		 cmp	 rax, QWORD PTR fileLength$14[rbp]
  01209	77 0c		 ja	 SHORT $LN41@main
  0120b	c7 85 74 09 00
	00 01 00 00 00	 mov	 DWORD PTR tv719[rbp], 1
  01215	eb 0a		 jmp	 SHORT $LN42@main
$LN41@main:
  01217	c7 85 74 09 00
	00 00 00 00 00	 mov	 DWORD PTR tv719[rbp], 0
$LN42@main:
  01221	0f b6 85 74 09
	00 00		 movzx	 eax, BYTE PTR tv719[rbp]
  01228	88 85 04 05 00
	00		 mov	 BYTE PTR isNotLastBlock$20[rbp], al
; Line 1769
  0122e	0f b6 85 04 05
	00 00		 movzx	 eax, BYTE PTR isNotLastBlock$20[rbp]
  01235	85 c0		 test	 eax, eax
  01237	74 1c		 je	 SHORT $LN38@main
; Line 1770
  01239	41 b8 08 00 00
	00		 mov	 r8d, 8
  0123f	48 8d 95 78 03
	00 00		 lea	 rdx, QWORD PTR buffer$16[rbp]
  01246	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  0124d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z
; Line 1771
  01253	eb 2b		 jmp	 SHORT $LN39@main
$LN38@main:
; Line 1772
  01255	33 d2		 xor	 edx, edx
  01257	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR fileLength$14[rbp]
  0125e	b9 08 00 00 00	 mov	 ecx, 8
  01263	48 f7 f1	 div	 rcx
  01266	48 8b c2	 mov	 rax, rdx
  01269	4c 8b c0	 mov	 r8, rax
  0126c	48 8d 95 78 03
	00 00		 lea	 rdx, QWORD PTR buffer$16[rbp]
  01273	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  0127a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z
$LN39@main:
; Line 1773
  01280	e9 a3 fc ff ff	 jmp	 $LN11@main
$LN22@main:
; Line 1777
  01285	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  0128c	e8 00 00 00 00	 call	 ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close
; Line 1778
  01291	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  01298	e8 00 00 00 00	 call	 ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
  0129d	90		 npad	 1
; Line 1779
  0129e	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  012a5	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  012aa	90		 npad	 1
  012ab	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  012b2	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  012b7	90		 npad	 1
  012b8	eb 00		 jmp	 SHORT $LN54@main
$LN55@main:
$LN54@main:
; Line 1786
  012ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clock
  012c0	2b 45 04	 sub	 eax, DWORD PTR start$[rbp]
  012c3	89 85 74 05 00
	00		 mov	 DWORD PTR runtime$[rbp], eax
; Line 1787
  012c9	8b 85 74 05 00
	00		 mov	 eax, DWORD PTR runtime$[rbp]
  012cf	99		 cdq
  012d0	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  012d5	f7 f9		 idiv	 ecx
  012d7	8b c2		 mov	 eax, edx
  012d9	89 85 74 09 00
	00		 mov	 DWORD PTR tv762[rbp], eax
  012df	8b 85 74 05 00
	00		 mov	 eax, DWORD PTR runtime$[rbp]
  012e5	99		 cdq
  012e6	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  012eb	f7 f9		 idiv	 ecx
  012ed	8b d0		 mov	 edx, eax
  012ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  012f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@J@Z
  012fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LFCBOECM@?4@
  01303	48 8b c8	 mov	 rcx, rax
  01306	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0130b	8b 8d 74 09 00
	00		 mov	 ecx, DWORD PTR tv762[rbp]
  01311	8b d1		 mov	 edx, ecx
  01313	48 8b c8	 mov	 rcx, rax
  01316	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@J@Z
  0131c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DMOBEKDI@?5s@
  01323	48 8b c8	 mov	 rcx, rax
  01326	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0132b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  01332	48 8b c8	 mov	 rcx, rax
  01335	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  0133b	90		 npad	 1
; Line 1788
  0133c	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR outfile$[rbp]
  01343	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01348	90		 npad	 1
  01349	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR infile$[rbp]
  01350	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01355	90		 npad	 1
  01356	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR mode$[rbp]
  0135d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01362	90		 npad	 1
  01363	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR temp$[rbp]
  0136a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0136f	90		 npad	 1
  01370	48 8d 4d 48	 lea	 rcx, QWORD PTR arg1$[rbp]
  01374	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01379	eb 02		 jmp	 SHORT $LN57@main
  0137b	eb 02		 jmp	 SHORT $LN56@main
$LN57@main:
  0137d	33 c0		 xor	 eax, eax
$LN56@main:
  0137f	48 8b f8	 mov	 rdi, rax
  01382	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  01386	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  0138d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  01392	48 8b c7	 mov	 rax, rdi
  01395	48 8b 8d 98 09
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0139c	48 33 cd	 xor	 rcx, rbp
  0139f	e8 00 00 00 00	 call	 __security_check_cookie
  013a4	48 8d a5 a8 09
	00 00		 lea	 rsp, QWORD PTR [rbp+2472]
  013ab	5f		 pop	 rdi
  013ac	5d		 pop	 rbp
  013ad	c3		 ret	 0
$LN60@main:
  013ae	66 90		 npad	 2
$LN59@main:
  013b0	00 00 00 00	 DD	 $LN30@main
  013b4	00 00 00 00	 DD	 $LN29@main
  013b8	00 00 00 00	 DD	 $LN28@main
  013bc	00 00 00 00	 DD	 $LN27@main
  013c0	00 00 00 00	 DD	 $LN26@main
  013c4	00 00 00 00	 DD	 $LN25@main
  013c8	00 00 00 00	 DD	 $LN24@main
$LN58@main:
  013cc	00 00 00 00	 DD	 $LN31@main
  013d0	00 00 00 00	 DD	 $LN32@main
  013d4	00 00 00 00	 DD	 $LN33@main
  013d8	00 00 00 00	 DD	 $LN34@main
  013dc	00 00 00 00	 DD	 $LN35@main
  013e0	00 00 00 00	 DD	 $LN36@main
main	ENDP
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$0 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR arg1$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
main$dtor$0 ENDP
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$2 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR temp$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$2 ENDP
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$3 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR mode$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$3 ENDP
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$4 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR infile$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$4 ENDP
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$5 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR outfile$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$5 ENDP
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$6 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  0001b	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$6 ENDP
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$7 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  0001b	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$7 ENDP
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$catch$9 PROC
; Line 1781
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
__catch$main$0:
; Line 1782
  00014	48 8d 8d 48 05
	00 00		 lea	 rcx, QWORD PTR e$22[rbp]
  0001b	e8 00 00 00 00	 call	 ?what@exception@std@@UEBAPEBDXZ ; std::exception::what
  00020	48 8b d0	 mov	 rdx, rax
  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0002a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
; Line 1783
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  0004a	90		 npad	 1
; Line 1784
  0004b	48 8d 8d 48 05
	00 00		 lea	 rcx, QWORD PTR e$22[rbp]
  00052	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00057	90		 npad	 1
  00058	48 8d 05 00 00
	00 00		 lea	 rax, $LN55@main$catch
  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
  00066	cc		 int	 3
main$catch$9 ENDP
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$8 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 48 05
	00 00		 lea	 rcx, QWORD PTR e$22[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$8 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$0 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR arg1$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
main$dtor$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$2 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR temp$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$2 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$3 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR mode$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$3 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$4 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR infile$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$4 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$5 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR outfile$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$5 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$6 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR inputText$15[rbp]
  0001b	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$6 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$7 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d a0 03
	00 00		 lea	 rcx, QWORD PTR outputText$17[rbp]
  0001b	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$7 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$catch$9 PROC
; Line 1781
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
__catch$main$0:
; Line 1782
  00014	48 8d 8d 48 05
	00 00		 lea	 rcx, QWORD PTR e$22[rbp]
  0001b	e8 00 00 00 00	 call	 ?what@exception@std@@UEBAPEBDXZ ; std::exception::what
  00020	48 8b d0	 mov	 rdx, rax
  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0002a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
; Line 1783
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  0004a	90		 npad	 1
; Line 1784
  0004b	48 8d 8d 48 05
	00 00		 lea	 rcx, QWORD PTR e$22[rbp]
  00052	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00057	90		 npad	 1
  00058	48 8d 05 00 00
	00 00		 lea	 rax, $LN55@main$catch
  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
  00066	cc		 int	 3
main$catch$9 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
start$ = 4
length$ = 36
arg1$ = 72
isEncrypt$ = 132
key$ = 168
temp$ = 200
mode$ = 264
isECB$ = 324
i$12 = 356
infile$ = 392
outfile$ = 456
temp1$13 = 520
fileLength$14 = 552
inputText$15 = 592
buffer$16 = 888
outputText$17 = 928
fileLengthNGarbage$18 = 1224
bytesLeft$19 = 1252
isNotLastBlock$20 = 1284
count$21 = 1316
e$22 = 1352
runtime$ = 1396
$T23 = 2200
$T24 = 2264
$T25 = 2296
$T26 = 2344
$T27 = 2376
$T28 = 2408
tv762 = 2420
tv719 = 2420
tv482 = 2420
tv444 = 2420
tv181 = 2420
tv821 = 2424
tv819 = 2424
tv818 = 2424
tv817 = 2424
tv815 = 2424
tv814 = 2424
tv812 = 2424
tv811 = 2424
tv802 = 2424
tv276 = 2424
tv187 = 2424
tv154 = 2424
tv148 = 2424
tv820 = 2432
tv813 = 2432
tv272 = 2432
tv70 = 2432
tv267 = 2440
tv262 = 2448
__$ArrayPad$ = 2456
argc$ = 2496
argv$ = 2504
main$dtor$8 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 48 05
	00 00		 lea	 rcx, QWORD PTR e$22[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$8 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?desDecrypt@@YA_K_K@Z
_TEXT	SEGMENT
left$ = 8
message$ = 256
?desDecrypt@@YA_K_K@Z PROC				; desDecrypt, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 1542
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1543
  00036	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR left$[rbp], 0
; Line 1545
  0003e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00045	e8 00 00 00 00	 call	 ?initialP@@YA_K_K@Z	; initialP
  0004a	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1547
  00051	b8 08 00 00 00	 mov	 eax, 8
  00056	48 6b c0 10	 imul	 rax, rax, 16
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00061	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00065	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0006c	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00071	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1548
  00078	b8 08 00 00 00	 mov	 eax, 8
  0007d	48 6b c0 0f	 imul	 rax, rax, 15
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00088	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0008c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00093	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00098	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1549
  0009f	b8 08 00 00 00	 mov	 eax, 8
  000a4	48 6b c0 0e	 imul	 rax, rax, 14
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  000af	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000b3	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  000ba	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  000bf	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1550
  000c6	b8 08 00 00 00	 mov	 eax, 8
  000cb	48 6b c0 0d	 imul	 rax, rax, 13
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  000d6	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000da	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  000e1	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  000e6	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1551
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 0c	 imul	 rax, rax, 12
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  000fd	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00101	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00108	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  0010d	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1552
  00114	b8 08 00 00 00	 mov	 eax, 8
  00119	48 6b c0 0b	 imul	 rax, rax, 11
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00124	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00128	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0012f	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00134	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1553
  0013b	b8 08 00 00 00	 mov	 eax, 8
  00140	48 6b c0 0a	 imul	 rax, rax, 10
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  0014b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0014f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00156	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  0015b	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1554
  00162	b8 08 00 00 00	 mov	 eax, 8
  00167	48 6b c0 09	 imul	 rax, rax, 9
  0016b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00172	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00176	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0017d	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00182	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1555
  00189	b8 08 00 00 00	 mov	 eax, 8
  0018e	48 6b c0 08	 imul	 rax, rax, 8
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00199	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0019d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  001a4	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  001a9	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1556
  001b0	b8 08 00 00 00	 mov	 eax, 8
  001b5	48 6b c0 07	 imul	 rax, rax, 7
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  001c0	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001c4	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  001cb	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  001d0	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1557
  001d7	b8 08 00 00 00	 mov	 eax, 8
  001dc	48 6b c0 06	 imul	 rax, rax, 6
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  001e7	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001eb	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  001f2	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  001f7	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1558
  001fe	b8 08 00 00 00	 mov	 eax, 8
  00203	48 6b c0 05	 imul	 rax, rax, 5
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  0020e	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00212	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00219	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  0021e	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1559
  00225	b8 08 00 00 00	 mov	 eax, 8
  0022a	48 6b c0 04	 imul	 rax, rax, 4
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00235	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00239	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00240	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00245	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1560
  0024c	b8 08 00 00 00	 mov	 eax, 8
  00251	48 6b c0 03	 imul	 rax, rax, 3
  00255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  0025c	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00260	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00267	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  0026c	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1561
  00273	b8 08 00 00 00	 mov	 eax, 8
  00278	48 6b c0 02	 imul	 rax, rax, 2
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00283	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00287	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0028e	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00293	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1562
  0029a	b8 08 00 00 00	 mov	 eax, 8
  0029f	48 6b c0 01	 imul	 rax, rax, 1
  002a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  002aa	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002ae	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  002b5	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  002ba	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1564
  002c1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR message$[rbp]
  002c8	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  002cc	48 89 45 08	 mov	 QWORD PTR left$[rbp], rax
; Line 1565
  002d0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR message$[rbp]
  002d7	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  002db	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1566
  002e2	48 8b 45 08	 mov	 rax, QWORD PTR left$[rbp]
  002e6	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  002ed	48 0b c8	 or	 rcx, rax
  002f0	48 8b c1	 mov	 rax, rcx
  002f3	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1568
  002fa	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00301	e8 00 00 00 00	 call	 ?finalP@@YA_K_K@Z	; finalP
  00306	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1569
  0030d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR message$[rbp]
; Line 1570
  00314	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0031b	5f		 pop	 rdi
  0031c	5d		 pop	 rbp
  0031d	c3		 ret	 0
?desDecrypt@@YA_K_K@Z ENDP				; desDecrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?desEncrypt@@YA_K_K@Z
_TEXT	SEGMENT
left$ = 8
message$ = 256
?desEncrypt@@YA_K_K@Z PROC				; desEncrypt, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 1509
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1510
  00036	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR left$[rbp], 0
; Line 1512
  0003e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00045	e8 00 00 00 00	 call	 ?initialP@@YA_K_K@Z	; initialP
  0004a	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1514
  00051	b8 08 00 00 00	 mov	 eax, 8
  00056	48 6b c0 01	 imul	 rax, rax, 1
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00061	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00065	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0006c	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00071	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1515
  00078	b8 08 00 00 00	 mov	 eax, 8
  0007d	48 6b c0 02	 imul	 rax, rax, 2
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00088	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0008c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00093	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00098	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1516
  0009f	b8 08 00 00 00	 mov	 eax, 8
  000a4	48 6b c0 03	 imul	 rax, rax, 3
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  000af	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000b3	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  000ba	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  000bf	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1517
  000c6	b8 08 00 00 00	 mov	 eax, 8
  000cb	48 6b c0 04	 imul	 rax, rax, 4
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  000d6	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000da	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  000e1	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  000e6	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1518
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 05	 imul	 rax, rax, 5
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  000fd	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00101	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00108	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  0010d	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1519
  00114	b8 08 00 00 00	 mov	 eax, 8
  00119	48 6b c0 06	 imul	 rax, rax, 6
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00124	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00128	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0012f	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00134	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1520
  0013b	b8 08 00 00 00	 mov	 eax, 8
  00140	48 6b c0 07	 imul	 rax, rax, 7
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  0014b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0014f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00156	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  0015b	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1521
  00162	b8 08 00 00 00	 mov	 eax, 8
  00167	48 6b c0 08	 imul	 rax, rax, 8
  0016b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00172	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00176	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0017d	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00182	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1522
  00189	b8 08 00 00 00	 mov	 eax, 8
  0018e	48 6b c0 09	 imul	 rax, rax, 9
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00199	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0019d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  001a4	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  001a9	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1523
  001b0	b8 08 00 00 00	 mov	 eax, 8
  001b5	48 6b c0 0a	 imul	 rax, rax, 10
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  001c0	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001c4	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  001cb	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  001d0	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1524
  001d7	b8 08 00 00 00	 mov	 eax, 8
  001dc	48 6b c0 0b	 imul	 rax, rax, 11
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  001e7	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001eb	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  001f2	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  001f7	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1525
  001fe	b8 08 00 00 00	 mov	 eax, 8
  00203	48 6b c0 0c	 imul	 rax, rax, 12
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  0020e	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00212	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00219	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  0021e	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1526
  00225	b8 08 00 00 00	 mov	 eax, 8
  0022a	48 6b c0 0d	 imul	 rax, rax, 13
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00235	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00239	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00240	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00245	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1527
  0024c	b8 08 00 00 00	 mov	 eax, 8
  00251	48 6b c0 0e	 imul	 rax, rax, 14
  00255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  0025c	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00260	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00267	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  0026c	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1528
  00273	b8 08 00 00 00	 mov	 eax, 8
  00278	48 6b c0 0f	 imul	 rax, rax, 15
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  00283	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00287	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0028e	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  00293	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1529
  0029a	b8 08 00 00 00	 mov	 eax, 8
  0029f	48 6b c0 10	 imul	 rax, rax, 16
  002a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?roundKeys@@3PA_KA ; roundKeys
  002aa	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002ae	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  002b5	e8 00 00 00 00	 call	 ?desRound@@YA_K_K0@Z	; desRound
  002ba	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1531
  002c1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR message$[rbp]
  002c8	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  002cc	48 89 45 08	 mov	 QWORD PTR left$[rbp], rax
; Line 1532
  002d0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR message$[rbp]
  002d7	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  002db	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1533
  002e2	48 8b 45 08	 mov	 rax, QWORD PTR left$[rbp]
  002e6	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  002ed	48 0b c8	 or	 rcx, rax
  002f0	48 8b c1	 mov	 rax, rcx
  002f3	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1535
  002fa	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00301	e8 00 00 00 00	 call	 ?finalP@@YA_K_K@Z	; finalP
  00306	48 89 85 00 01
	00 00		 mov	 QWORD PTR message$[rbp], rax
; Line 1536
  0030d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR message$[rbp]
; Line 1537
  00314	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0031b	5f		 pop	 rdi
  0031c	5d		 pop	 rbp
  0031d	c3		 ret	 0
?desEncrypt@@YA_K_K@Z ENDP				; desEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?desRound@@YA_K_K0@Z
_TEXT	SEGMENT
messageLeft$ = 8
messageRight$ = 40
scrambler$ = 72
newScrambler$ = 104
bit$ = 136
group$ = 168
row$ = 200
col$ = 232
selector$ = 264
message$ = 512
roundKey$ = 520
?desRound@@YA_K_K0@Z PROC				; desRound, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 1339
$LN67:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR [rsp+552]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1340
  0003b	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR message$[rbp]
  00042	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00046	48 89 45 08	 mov	 QWORD PTR messageLeft$[rbp], rax
; Line 1341
  0004a	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0004f	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00056	48 23 c8	 and	 rcx, rax
  00059	48 8b c1	 mov	 rax, rcx
  0005c	48 89 45 28	 mov	 QWORD PTR messageRight$[rbp], rax
; Line 1342
  00060	48 8b 45 28	 mov	 rax, QWORD PTR messageRight$[rbp]
  00064	48 89 45 48	 mov	 QWORD PTR scrambler$[rbp], rax
; Line 1343
  00068	48 c7 45 68 00
	00 00 00	 mov	 QWORD PTR newScrambler$[rbp], 0
; Line 1344
  00070	48 c7 85 88 00
	00 00 01 00 00
	00		 mov	 QWORD PTR bit$[rbp], 1
; Line 1347
  0007b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00082	48 c1 e0 1f	 shl	 rax, 31
  00086	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0008a	48 23 c8	 and	 rcx, rax
  0008d	48 8b c1	 mov	 rax, rcx
  00090	48 85 c0	 test	 rax, rax
  00093	74 2e		 je	 SHORT $LN2@desRound
  00095	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0009c	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  000a0	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  000a4	48 0b c8	 or	 rcx, rax
  000a7	48 8b c1	 mov	 rax, rcx
  000aa	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  000ae	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  000b5	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  000b9	48 0b c8	 or	 rcx, rax
  000bc	48 8b c1	 mov	 rax, rcx
  000bf	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN2@desRound:
; Line 1348
  000c3	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  000ca	48 c1 e0 1e	 shl	 rax, 30
  000ce	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  000d2	48 23 c8	 and	 rcx, rax
  000d5	48 8b c1	 mov	 rax, rcx
  000d8	48 85 c0	 test	 rax, rax
  000db	74 19		 je	 SHORT $LN3@desRound
  000dd	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  000e4	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  000e8	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  000ec	48 0b c8	 or	 rcx, rax
  000ef	48 8b c1	 mov	 rax, rcx
  000f2	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN3@desRound:
; Line 1349
  000f6	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  000fd	48 c1 e0 1d	 shl	 rax, 29
  00101	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00105	48 23 c8	 and	 rcx, rax
  00108	48 8b c1	 mov	 rax, rcx
  0010b	48 85 c0	 test	 rax, rax
  0010e	74 19		 je	 SHORT $LN4@desRound
  00110	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00117	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  0011b	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0011f	48 0b c8	 or	 rcx, rax
  00122	48 8b c1	 mov	 rax, rcx
  00125	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN4@desRound:
; Line 1350
  00129	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00130	48 c1 e0 1c	 shl	 rax, 28
  00134	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00138	48 23 c8	 and	 rcx, rax
  0013b	48 8b c1	 mov	 rax, rcx
  0013e	48 85 c0	 test	 rax, rax
  00141	74 32		 je	 SHORT $LN5@desRound
  00143	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0014a	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  0014e	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00152	48 0b c8	 or	 rcx, rax
  00155	48 8b c1	 mov	 rax, rcx
  00158	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  0015c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00163	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  00167	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0016b	48 0b c8	 or	 rcx, rax
  0016e	48 8b c1	 mov	 rax, rcx
  00171	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN5@desRound:
; Line 1351
  00175	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0017c	48 c1 e0 1b	 shl	 rax, 27
  00180	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00184	48 23 c8	 and	 rcx, rax
  00187	48 8b c1	 mov	 rax, rcx
  0018a	48 85 c0	 test	 rax, rax
  0018d	74 32		 je	 SHORT $LN6@desRound
  0018f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00196	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  0019a	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0019e	48 0b c8	 or	 rcx, rax
  001a1	48 8b c1	 mov	 rax, rcx
  001a4	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  001a8	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  001af	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  001b3	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  001b7	48 0b c8	 or	 rcx, rax
  001ba	48 8b c1	 mov	 rax, rcx
  001bd	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN6@desRound:
; Line 1352
  001c1	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  001c8	48 c1 e0 1a	 shl	 rax, 26
  001cc	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  001d0	48 23 c8	 and	 rcx, rax
  001d3	48 8b c1	 mov	 rax, rcx
  001d6	48 85 c0	 test	 rax, rax
  001d9	74 19		 je	 SHORT $LN7@desRound
  001db	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  001e2	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  001e6	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  001ea	48 0b c8	 or	 rcx, rax
  001ed	48 8b c1	 mov	 rax, rcx
  001f0	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN7@desRound:
; Line 1353
  001f4	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  001fb	48 c1 e0 19	 shl	 rax, 25
  001ff	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00203	48 23 c8	 and	 rcx, rax
  00206	48 8b c1	 mov	 rax, rcx
  00209	48 85 c0	 test	 rax, rax
  0020c	74 19		 je	 SHORT $LN8@desRound
  0020e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00215	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  00219	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0021d	48 0b c8	 or	 rcx, rax
  00220	48 8b c1	 mov	 rax, rcx
  00223	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN8@desRound:
; Line 1354
  00227	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0022e	48 c1 e0 18	 shl	 rax, 24
  00232	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00236	48 23 c8	 and	 rcx, rax
  00239	48 8b c1	 mov	 rax, rcx
  0023c	48 85 c0	 test	 rax, rax
  0023f	74 32		 je	 SHORT $LN9@desRound
  00241	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00248	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  0024c	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00250	48 0b c8	 or	 rcx, rax
  00253	48 8b c1	 mov	 rax, rcx
  00256	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  0025a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00261	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  00265	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00269	48 0b c8	 or	 rcx, rax
  0026c	48 8b c1	 mov	 rax, rcx
  0026f	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN9@desRound:
; Line 1355
  00273	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0027a	48 c1 e0 17	 shl	 rax, 23
  0027e	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00282	48 23 c8	 and	 rcx, rax
  00285	48 8b c1	 mov	 rax, rcx
  00288	48 85 c0	 test	 rax, rax
  0028b	74 32		 je	 SHORT $LN10@desRound
  0028d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00294	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  00298	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0029c	48 0b c8	 or	 rcx, rax
  0029f	48 8b c1	 mov	 rax, rcx
  002a2	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  002a6	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  002ad	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  002b1	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  002b5	48 0b c8	 or	 rcx, rax
  002b8	48 8b c1	 mov	 rax, rcx
  002bb	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN10@desRound:
; Line 1356
  002bf	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  002c6	48 c1 e0 16	 shl	 rax, 22
  002ca	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  002ce	48 23 c8	 and	 rcx, rax
  002d1	48 8b c1	 mov	 rax, rcx
  002d4	48 85 c0	 test	 rax, rax
  002d7	74 19		 je	 SHORT $LN11@desRound
  002d9	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  002e0	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  002e4	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  002e8	48 0b c8	 or	 rcx, rax
  002eb	48 8b c1	 mov	 rax, rcx
  002ee	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN11@desRound:
; Line 1357
  002f2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  002f9	48 c1 e0 15	 shl	 rax, 21
  002fd	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00301	48 23 c8	 and	 rcx, rax
  00304	48 8b c1	 mov	 rax, rcx
  00307	48 85 c0	 test	 rax, rax
  0030a	74 19		 je	 SHORT $LN12@desRound
  0030c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00313	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00317	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0031b	48 0b c8	 or	 rcx, rax
  0031e	48 8b c1	 mov	 rax, rcx
  00321	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN12@desRound:
; Line 1358
  00325	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0032c	48 c1 e0 14	 shl	 rax, 20
  00330	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00334	48 23 c8	 and	 rcx, rax
  00337	48 8b c1	 mov	 rax, rcx
  0033a	48 85 c0	 test	 rax, rax
  0033d	74 32		 je	 SHORT $LN13@desRound
  0033f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00346	48 c1 e0 1f	 shl	 rax, 31
  0034a	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0034e	48 0b c8	 or	 rcx, rax
  00351	48 8b c1	 mov	 rax, rcx
  00354	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  00358	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0035f	48 c1 e0 1d	 shl	 rax, 29
  00363	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00367	48 0b c8	 or	 rcx, rax
  0036a	48 8b c1	 mov	 rax, rcx
  0036d	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN13@desRound:
; Line 1359
  00371	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00378	48 c1 e0 13	 shl	 rax, 19
  0037c	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00380	48 23 c8	 and	 rcx, rax
  00383	48 8b c1	 mov	 rax, rcx
  00386	48 85 c0	 test	 rax, rax
  00389	74 32		 je	 SHORT $LN14@desRound
  0038b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00392	48 c1 e0 1e	 shl	 rax, 30
  00396	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0039a	48 0b c8	 or	 rcx, rax
  0039d	48 8b c1	 mov	 rax, rcx
  003a0	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  003a4	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  003ab	48 c1 e0 1c	 shl	 rax, 28
  003af	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  003b3	48 0b c8	 or	 rcx, rax
  003b6	48 8b c1	 mov	 rax, rcx
  003b9	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN14@desRound:
; Line 1360
  003bd	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  003c4	48 c1 e0 12	 shl	 rax, 18
  003c8	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  003cc	48 23 c8	 and	 rcx, rax
  003cf	48 8b c1	 mov	 rax, rcx
  003d2	48 85 c0	 test	 rax, rax
  003d5	74 19		 je	 SHORT $LN15@desRound
  003d7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  003de	48 c1 e0 1b	 shl	 rax, 27
  003e2	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  003e6	48 0b c8	 or	 rcx, rax
  003e9	48 8b c1	 mov	 rax, rcx
  003ec	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN15@desRound:
; Line 1361
  003f0	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  003f7	48 c1 e0 11	 shl	 rax, 17
  003fb	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  003ff	48 23 c8	 and	 rcx, rax
  00402	48 8b c1	 mov	 rax, rcx
  00405	48 85 c0	 test	 rax, rax
  00408	74 19		 je	 SHORT $LN16@desRound
  0040a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00411	48 c1 e0 1a	 shl	 rax, 26
  00415	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00419	48 0b c8	 or	 rcx, rax
  0041c	48 8b c1	 mov	 rax, rcx
  0041f	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN16@desRound:
; Line 1362
  00423	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0042a	48 c1 e0 10	 shl	 rax, 16
  0042e	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00432	48 23 c8	 and	 rcx, rax
  00435	48 8b c1	 mov	 rax, rcx
  00438	48 85 c0	 test	 rax, rax
  0043b	74 32		 je	 SHORT $LN17@desRound
  0043d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00444	48 c1 e0 19	 shl	 rax, 25
  00448	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0044c	48 0b c8	 or	 rcx, rax
  0044f	48 8b c1	 mov	 rax, rcx
  00452	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  00456	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0045d	48 c1 e0 17	 shl	 rax, 23
  00461	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00465	48 0b c8	 or	 rcx, rax
  00468	48 8b c1	 mov	 rax, rcx
  0046b	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN17@desRound:
; Line 1363
  0046f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00476	48 c1 e0 0f	 shl	 rax, 15
  0047a	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0047e	48 23 c8	 and	 rcx, rax
  00481	48 8b c1	 mov	 rax, rcx
  00484	48 85 c0	 test	 rax, rax
  00487	74 32		 je	 SHORT $LN18@desRound
  00489	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00490	48 c1 e0 18	 shl	 rax, 24
  00494	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00498	48 0b c8	 or	 rcx, rax
  0049b	48 8b c1	 mov	 rax, rcx
  0049e	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  004a2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  004a9	48 c1 e0 16	 shl	 rax, 22
  004ad	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  004b1	48 0b c8	 or	 rcx, rax
  004b4	48 8b c1	 mov	 rax, rcx
  004b7	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN18@desRound:
; Line 1364
  004bb	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  004c2	48 c1 e0 0e	 shl	 rax, 14
  004c6	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  004ca	48 23 c8	 and	 rcx, rax
  004cd	48 8b c1	 mov	 rax, rcx
  004d0	48 85 c0	 test	 rax, rax
  004d3	74 19		 je	 SHORT $LN19@desRound
  004d5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  004dc	48 c1 e0 15	 shl	 rax, 21
  004e0	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  004e4	48 0b c8	 or	 rcx, rax
  004e7	48 8b c1	 mov	 rax, rcx
  004ea	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN19@desRound:
; Line 1365
  004ee	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  004f5	48 c1 e0 0d	 shl	 rax, 13
  004f9	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  004fd	48 23 c8	 and	 rcx, rax
  00500	48 8b c1	 mov	 rax, rcx
  00503	48 85 c0	 test	 rax, rax
  00506	74 19		 je	 SHORT $LN20@desRound
  00508	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0050f	48 c1 e0 14	 shl	 rax, 20
  00513	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00517	48 0b c8	 or	 rcx, rax
  0051a	48 8b c1	 mov	 rax, rcx
  0051d	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN20@desRound:
; Line 1366
  00521	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00528	48 c1 e0 0c	 shl	 rax, 12
  0052c	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00530	48 23 c8	 and	 rcx, rax
  00533	48 8b c1	 mov	 rax, rcx
  00536	48 85 c0	 test	 rax, rax
  00539	74 32		 je	 SHORT $LN21@desRound
  0053b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00542	48 c1 e0 13	 shl	 rax, 19
  00546	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0054a	48 0b c8	 or	 rcx, rax
  0054d	48 8b c1	 mov	 rax, rcx
  00550	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  00554	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0055b	48 c1 e0 11	 shl	 rax, 17
  0055f	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00563	48 0b c8	 or	 rcx, rax
  00566	48 8b c1	 mov	 rax, rcx
  00569	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN21@desRound:
; Line 1367
  0056d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00574	48 c1 e0 0b	 shl	 rax, 11
  00578	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0057c	48 23 c8	 and	 rcx, rax
  0057f	48 8b c1	 mov	 rax, rcx
  00582	48 85 c0	 test	 rax, rax
  00585	74 32		 je	 SHORT $LN22@desRound
  00587	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0058e	48 c1 e0 12	 shl	 rax, 18
  00592	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00596	48 0b c8	 or	 rcx, rax
  00599	48 8b c1	 mov	 rax, rcx
  0059c	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  005a0	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  005a7	48 c1 e0 10	 shl	 rax, 16
  005ab	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  005af	48 0b c8	 or	 rcx, rax
  005b2	48 8b c1	 mov	 rax, rcx
  005b5	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN22@desRound:
; Line 1368
  005b9	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  005c0	48 c1 e0 0a	 shl	 rax, 10
  005c4	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  005c8	48 23 c8	 and	 rcx, rax
  005cb	48 8b c1	 mov	 rax, rcx
  005ce	48 85 c0	 test	 rax, rax
  005d1	74 19		 je	 SHORT $LN23@desRound
  005d3	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  005da	48 c1 e0 0f	 shl	 rax, 15
  005de	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  005e2	48 0b c8	 or	 rcx, rax
  005e5	48 8b c1	 mov	 rax, rcx
  005e8	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN23@desRound:
; Line 1369
  005ec	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  005f3	48 c1 e0 09	 shl	 rax, 9
  005f7	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  005fb	48 23 c8	 and	 rcx, rax
  005fe	48 8b c1	 mov	 rax, rcx
  00601	48 85 c0	 test	 rax, rax
  00604	74 19		 je	 SHORT $LN24@desRound
  00606	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0060d	48 c1 e0 0e	 shl	 rax, 14
  00611	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00615	48 0b c8	 or	 rcx, rax
  00618	48 8b c1	 mov	 rax, rcx
  0061b	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN24@desRound:
; Line 1370
  0061f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00626	48 c1 e0 08	 shl	 rax, 8
  0062a	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0062e	48 23 c8	 and	 rcx, rax
  00631	48 8b c1	 mov	 rax, rcx
  00634	48 85 c0	 test	 rax, rax
  00637	74 32		 je	 SHORT $LN25@desRound
  00639	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00640	48 c1 e0 0d	 shl	 rax, 13
  00644	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00648	48 0b c8	 or	 rcx, rax
  0064b	48 8b c1	 mov	 rax, rcx
  0064e	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  00652	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00659	48 c1 e0 0b	 shl	 rax, 11
  0065d	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00661	48 0b c8	 or	 rcx, rax
  00664	48 8b c1	 mov	 rax, rcx
  00667	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN25@desRound:
; Line 1371
  0066b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00672	48 c1 e0 07	 shl	 rax, 7
  00676	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0067a	48 23 c8	 and	 rcx, rax
  0067d	48 8b c1	 mov	 rax, rcx
  00680	48 85 c0	 test	 rax, rax
  00683	74 32		 je	 SHORT $LN26@desRound
  00685	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0068c	48 c1 e0 0c	 shl	 rax, 12
  00690	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00694	48 0b c8	 or	 rcx, rax
  00697	48 8b c1	 mov	 rax, rcx
  0069a	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  0069e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  006a5	48 c1 e0 0a	 shl	 rax, 10
  006a9	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  006ad	48 0b c8	 or	 rcx, rax
  006b0	48 8b c1	 mov	 rax, rcx
  006b3	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN26@desRound:
; Line 1372
  006b7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  006be	48 c1 e0 06	 shl	 rax, 6
  006c2	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  006c6	48 23 c8	 and	 rcx, rax
  006c9	48 8b c1	 mov	 rax, rcx
  006cc	48 85 c0	 test	 rax, rax
  006cf	74 19		 je	 SHORT $LN27@desRound
  006d1	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  006d8	48 c1 e0 09	 shl	 rax, 9
  006dc	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  006e0	48 0b c8	 or	 rcx, rax
  006e3	48 8b c1	 mov	 rax, rcx
  006e6	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN27@desRound:
; Line 1373
  006ea	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  006f1	48 c1 e0 05	 shl	 rax, 5
  006f5	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  006f9	48 23 c8	 and	 rcx, rax
  006fc	48 8b c1	 mov	 rax, rcx
  006ff	48 85 c0	 test	 rax, rax
  00702	74 19		 je	 SHORT $LN28@desRound
  00704	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0070b	48 c1 e0 08	 shl	 rax, 8
  0070f	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00713	48 0b c8	 or	 rcx, rax
  00716	48 8b c1	 mov	 rax, rcx
  00719	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN28@desRound:
; Line 1374
  0071d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00724	48 c1 e0 04	 shl	 rax, 4
  00728	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0072c	48 23 c8	 and	 rcx, rax
  0072f	48 8b c1	 mov	 rax, rcx
  00732	48 85 c0	 test	 rax, rax
  00735	74 32		 je	 SHORT $LN29@desRound
  00737	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0073e	48 c1 e0 07	 shl	 rax, 7
  00742	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00746	48 0b c8	 or	 rcx, rax
  00749	48 8b c1	 mov	 rax, rcx
  0074c	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  00750	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00757	48 c1 e0 05	 shl	 rax, 5
  0075b	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0075f	48 0b c8	 or	 rcx, rax
  00762	48 8b c1	 mov	 rax, rcx
  00765	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN29@desRound:
; Line 1375
  00769	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00770	48 c1 e0 03	 shl	 rax, 3
  00774	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00778	48 23 c8	 and	 rcx, rax
  0077b	48 8b c1	 mov	 rax, rcx
  0077e	48 85 c0	 test	 rax, rax
  00781	74 32		 je	 SHORT $LN30@desRound
  00783	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0078a	48 c1 e0 06	 shl	 rax, 6
  0078e	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00792	48 0b c8	 or	 rcx, rax
  00795	48 8b c1	 mov	 rax, rcx
  00798	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  0079c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  007a3	48 c1 e0 04	 shl	 rax, 4
  007a7	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  007ab	48 0b c8	 or	 rcx, rax
  007ae	48 8b c1	 mov	 rax, rcx
  007b1	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN30@desRound:
; Line 1376
  007b5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  007bc	48 c1 e0 02	 shl	 rax, 2
  007c0	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  007c4	48 23 c8	 and	 rcx, rax
  007c7	48 8b c1	 mov	 rax, rcx
  007ca	48 85 c0	 test	 rax, rax
  007cd	74 19		 je	 SHORT $LN31@desRound
  007cf	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  007d6	48 c1 e0 03	 shl	 rax, 3
  007da	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  007de	48 0b c8	 or	 rcx, rax
  007e1	48 8b c1	 mov	 rax, rcx
  007e4	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN31@desRound:
; Line 1377
  007e8	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  007ef	48 d1 e0	 shl	 rax, 1
  007f2	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  007f6	48 23 c8	 and	 rcx, rax
  007f9	48 8b c1	 mov	 rax, rcx
  007fc	48 85 c0	 test	 rax, rax
  007ff	74 19		 je	 SHORT $LN32@desRound
  00801	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00808	48 c1 e0 02	 shl	 rax, 2
  0080c	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00810	48 0b c8	 or	 rcx, rax
  00813	48 8b c1	 mov	 rax, rcx
  00816	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN32@desRound:
; Line 1378
  0081a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00821	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00825	48 23 c8	 and	 rcx, rax
  00828	48 8b c1	 mov	 rax, rcx
  0082b	48 85 c0	 test	 rax, rax
  0082e	74 31		 je	 SHORT $LN33@desRound
  00830	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00837	48 d1 e0	 shl	 rax, 1
  0083a	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0083e	48 0b c8	 or	 rcx, rax
  00841	48 8b c1	 mov	 rax, rcx
  00844	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
  00848	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0084f	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  00853	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00857	48 0b c8	 or	 rcx, rax
  0085a	48 8b c1	 mov	 rax, rcx
  0085d	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN33@desRound:
; Line 1381
  00861	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR roundKey$[rbp]
  00868	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0086c	48 33 c8	 xor	 rcx, rax
  0086f	48 8b c1	 mov	 rax, rcx
  00872	48 89 45 48	 mov	 QWORD PTR scrambler$[rbp], rax
; Line 1382
  00876	48 c7 45 68 00
	00 00 00	 mov	 QWORD PTR newScrambler$[rbp], 0
; Line 1387
  0087e	48 8b 45 48	 mov	 rax, QWORD PTR scrambler$[rbp]
  00882	48 c1 e8 2a	 shr	 rax, 42			; 0000002aH
  00886	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  0088a	48 89 85 a8 00
	00 00		 mov	 QWORD PTR group$[rbp], rax
; Line 1388
  00891	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00898	48 83 e0 20	 and	 rax, 32			; 00000020H
  0089c	48 c1 e8 04	 shr	 rax, 4
  008a0	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  008a7	48 83 e1 01	 and	 rcx, 1
  008ab	48 0b c1	 or	 rax, rcx
  008ae	48 89 85 c8 00
	00 00		 mov	 QWORD PTR row$[rbp], rax
; Line 1389
  008b5	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  008bc	48 83 e0 10	 and	 rax, 16
  008c0	48 d1 e8	 shr	 rax, 1
  008c3	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  008ca	48 83 e1 08	 and	 rcx, 8
  008ce	48 d1 e9	 shr	 rcx, 1
  008d1	48 0b c1	 or	 rax, rcx
  008d4	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  008db	48 83 e1 04	 and	 rcx, 4
  008df	48 d1 e9	 shr	 rcx, 1
  008e2	48 0b c1	 or	 rax, rcx
  008e5	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  008ec	48 83 e1 02	 and	 rcx, 2
  008f0	48 d1 e9	 shr	 rcx, 1
  008f3	48 0b c1	 or	 rax, rcx
  008f6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR col$[rbp], rax
; Line 1390
  008fd	48 6b 85 c8 00
	00 00 10	 imul	 rax, QWORD PTR row$[rbp], 16
  00905	48 03 85 e8 00
	00 00		 add	 rax, QWORD PTR col$[rbp]
  0090c	48 89 85 08 01
	00 00		 mov	 QWORD PTR selector$[rbp], rax
; Line 1391
  00913	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?sbox1@@3PA_KA ; sbox1
  0091a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR selector$[rbp]
  00921	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00925	48 c1 e0 1c	 shl	 rax, 28
  00929	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0092d	48 0b c8	 or	 rcx, rax
  00930	48 8b c1	 mov	 rax, rcx
  00933	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
; Line 1396
  00937	48 8b 45 48	 mov	 rax, QWORD PTR scrambler$[rbp]
  0093b	48 c1 e8 24	 shr	 rax, 36			; 00000024H
  0093f	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  00943	48 89 85 a8 00
	00 00		 mov	 QWORD PTR group$[rbp], rax
; Line 1397
  0094a	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00951	48 83 e0 20	 and	 rax, 32			; 00000020H
  00955	48 c1 e8 04	 shr	 rax, 4
  00959	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00960	48 83 e1 01	 and	 rcx, 1
  00964	48 0b c1	 or	 rax, rcx
  00967	48 89 85 c8 00
	00 00		 mov	 QWORD PTR row$[rbp], rax
; Line 1398
  0096e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00975	48 83 e0 10	 and	 rax, 16
  00979	48 d1 e8	 shr	 rax, 1
  0097c	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00983	48 83 e1 08	 and	 rcx, 8
  00987	48 d1 e9	 shr	 rcx, 1
  0098a	48 0b c1	 or	 rax, rcx
  0098d	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00994	48 83 e1 04	 and	 rcx, 4
  00998	48 d1 e9	 shr	 rcx, 1
  0099b	48 0b c1	 or	 rax, rcx
  0099e	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  009a5	48 83 e1 02	 and	 rcx, 2
  009a9	48 d1 e9	 shr	 rcx, 1
  009ac	48 0b c1	 or	 rax, rcx
  009af	48 89 85 e8 00
	00 00		 mov	 QWORD PTR col$[rbp], rax
; Line 1399
  009b6	48 6b 85 c8 00
	00 00 10	 imul	 rax, QWORD PTR row$[rbp], 16
  009be	48 03 85 e8 00
	00 00		 add	 rax, QWORD PTR col$[rbp]
  009c5	48 89 85 08 01
	00 00		 mov	 QWORD PTR selector$[rbp], rax
; Line 1400
  009cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?sbox2@@3PA_KA ; sbox2
  009d3	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR selector$[rbp]
  009da	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  009de	48 c1 e0 18	 shl	 rax, 24
  009e2	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  009e6	48 0b c8	 or	 rcx, rax
  009e9	48 8b c1	 mov	 rax, rcx
  009ec	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
; Line 1405
  009f0	48 8b 45 48	 mov	 rax, QWORD PTR scrambler$[rbp]
  009f4	48 c1 e8 1e	 shr	 rax, 30
  009f8	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  009fc	48 89 85 a8 00
	00 00		 mov	 QWORD PTR group$[rbp], rax
; Line 1406
  00a03	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00a0a	48 83 e0 20	 and	 rax, 32			; 00000020H
  00a0e	48 c1 e8 04	 shr	 rax, 4
  00a12	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00a19	48 83 e1 01	 and	 rcx, 1
  00a1d	48 0b c1	 or	 rax, rcx
  00a20	48 89 85 c8 00
	00 00		 mov	 QWORD PTR row$[rbp], rax
; Line 1407
  00a27	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00a2e	48 83 e0 10	 and	 rax, 16
  00a32	48 d1 e8	 shr	 rax, 1
  00a35	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00a3c	48 83 e1 08	 and	 rcx, 8
  00a40	48 d1 e9	 shr	 rcx, 1
  00a43	48 0b c1	 or	 rax, rcx
  00a46	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00a4d	48 83 e1 04	 and	 rcx, 4
  00a51	48 d1 e9	 shr	 rcx, 1
  00a54	48 0b c1	 or	 rax, rcx
  00a57	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00a5e	48 83 e1 02	 and	 rcx, 2
  00a62	48 d1 e9	 shr	 rcx, 1
  00a65	48 0b c1	 or	 rax, rcx
  00a68	48 89 85 e8 00
	00 00		 mov	 QWORD PTR col$[rbp], rax
; Line 1408
  00a6f	48 6b 85 c8 00
	00 00 10	 imul	 rax, QWORD PTR row$[rbp], 16
  00a77	48 03 85 e8 00
	00 00		 add	 rax, QWORD PTR col$[rbp]
  00a7e	48 89 85 08 01
	00 00		 mov	 QWORD PTR selector$[rbp], rax
; Line 1409
  00a85	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?sbox3@@3PA_KA ; sbox3
  00a8c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR selector$[rbp]
  00a93	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00a97	48 c1 e0 14	 shl	 rax, 20
  00a9b	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00a9f	48 0b c8	 or	 rcx, rax
  00aa2	48 8b c1	 mov	 rax, rcx
  00aa5	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
; Line 1415
  00aa9	48 8b 45 48	 mov	 rax, QWORD PTR scrambler$[rbp]
  00aad	48 c1 e8 18	 shr	 rax, 24
  00ab1	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  00ab5	48 89 85 a8 00
	00 00		 mov	 QWORD PTR group$[rbp], rax
; Line 1416
  00abc	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00ac3	48 83 e0 20	 and	 rax, 32			; 00000020H
  00ac7	48 c1 e8 04	 shr	 rax, 4
  00acb	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00ad2	48 83 e1 01	 and	 rcx, 1
  00ad6	48 0b c1	 or	 rax, rcx
  00ad9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR row$[rbp], rax
; Line 1417
  00ae0	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00ae7	48 83 e0 10	 and	 rax, 16
  00aeb	48 d1 e8	 shr	 rax, 1
  00aee	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00af5	48 83 e1 08	 and	 rcx, 8
  00af9	48 d1 e9	 shr	 rcx, 1
  00afc	48 0b c1	 or	 rax, rcx
  00aff	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00b06	48 83 e1 04	 and	 rcx, 4
  00b0a	48 d1 e9	 shr	 rcx, 1
  00b0d	48 0b c1	 or	 rax, rcx
  00b10	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00b17	48 83 e1 02	 and	 rcx, 2
  00b1b	48 d1 e9	 shr	 rcx, 1
  00b1e	48 0b c1	 or	 rax, rcx
  00b21	48 89 85 e8 00
	00 00		 mov	 QWORD PTR col$[rbp], rax
; Line 1418
  00b28	48 6b 85 c8 00
	00 00 10	 imul	 rax, QWORD PTR row$[rbp], 16
  00b30	48 03 85 e8 00
	00 00		 add	 rax, QWORD PTR col$[rbp]
  00b37	48 89 85 08 01
	00 00		 mov	 QWORD PTR selector$[rbp], rax
; Line 1419
  00b3e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?sbox4@@3PA_KA ; sbox4
  00b45	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR selector$[rbp]
  00b4c	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00b50	48 c1 e0 10	 shl	 rax, 16
  00b54	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00b58	48 0b c8	 or	 rcx, rax
  00b5b	48 8b c1	 mov	 rax, rcx
  00b5e	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
; Line 1425
  00b62	48 8b 45 48	 mov	 rax, QWORD PTR scrambler$[rbp]
  00b66	48 c1 e8 12	 shr	 rax, 18
  00b6a	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  00b6e	48 89 85 a8 00
	00 00		 mov	 QWORD PTR group$[rbp], rax
; Line 1426
  00b75	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00b7c	48 83 e0 20	 and	 rax, 32			; 00000020H
  00b80	48 c1 e8 04	 shr	 rax, 4
  00b84	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00b8b	48 83 e1 01	 and	 rcx, 1
  00b8f	48 0b c1	 or	 rax, rcx
  00b92	48 89 85 c8 00
	00 00		 mov	 QWORD PTR row$[rbp], rax
; Line 1427
  00b99	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00ba0	48 83 e0 10	 and	 rax, 16
  00ba4	48 d1 e8	 shr	 rax, 1
  00ba7	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00bae	48 83 e1 08	 and	 rcx, 8
  00bb2	48 d1 e9	 shr	 rcx, 1
  00bb5	48 0b c1	 or	 rax, rcx
  00bb8	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00bbf	48 83 e1 04	 and	 rcx, 4
  00bc3	48 d1 e9	 shr	 rcx, 1
  00bc6	48 0b c1	 or	 rax, rcx
  00bc9	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00bd0	48 83 e1 02	 and	 rcx, 2
  00bd4	48 d1 e9	 shr	 rcx, 1
  00bd7	48 0b c1	 or	 rax, rcx
  00bda	48 89 85 e8 00
	00 00		 mov	 QWORD PTR col$[rbp], rax
; Line 1428
  00be1	48 6b 85 c8 00
	00 00 10	 imul	 rax, QWORD PTR row$[rbp], 16
  00be9	48 03 85 e8 00
	00 00		 add	 rax, QWORD PTR col$[rbp]
  00bf0	48 89 85 08 01
	00 00		 mov	 QWORD PTR selector$[rbp], rax
; Line 1429
  00bf7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?sbox5@@3PA_KA ; sbox5
  00bfe	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR selector$[rbp]
  00c05	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00c09	48 c1 e0 0c	 shl	 rax, 12
  00c0d	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00c11	48 0b c8	 or	 rcx, rax
  00c14	48 8b c1	 mov	 rax, rcx
  00c17	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
; Line 1435
  00c1b	48 8b 45 48	 mov	 rax, QWORD PTR scrambler$[rbp]
  00c1f	48 c1 e8 0c	 shr	 rax, 12
  00c23	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  00c27	48 89 85 a8 00
	00 00		 mov	 QWORD PTR group$[rbp], rax
; Line 1436
  00c2e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00c35	48 83 e0 20	 and	 rax, 32			; 00000020H
  00c39	48 c1 e8 04	 shr	 rax, 4
  00c3d	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00c44	48 83 e1 01	 and	 rcx, 1
  00c48	48 0b c1	 or	 rax, rcx
  00c4b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR row$[rbp], rax
; Line 1437
  00c52	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00c59	48 83 e0 10	 and	 rax, 16
  00c5d	48 d1 e8	 shr	 rax, 1
  00c60	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00c67	48 83 e1 08	 and	 rcx, 8
  00c6b	48 d1 e9	 shr	 rcx, 1
  00c6e	48 0b c1	 or	 rax, rcx
  00c71	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00c78	48 83 e1 04	 and	 rcx, 4
  00c7c	48 d1 e9	 shr	 rcx, 1
  00c7f	48 0b c1	 or	 rax, rcx
  00c82	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00c89	48 83 e1 02	 and	 rcx, 2
  00c8d	48 d1 e9	 shr	 rcx, 1
  00c90	48 0b c1	 or	 rax, rcx
  00c93	48 89 85 e8 00
	00 00		 mov	 QWORD PTR col$[rbp], rax
; Line 1438
  00c9a	48 6b 85 c8 00
	00 00 10	 imul	 rax, QWORD PTR row$[rbp], 16
  00ca2	48 03 85 e8 00
	00 00		 add	 rax, QWORD PTR col$[rbp]
  00ca9	48 89 85 08 01
	00 00		 mov	 QWORD PTR selector$[rbp], rax
; Line 1439
  00cb0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?sbox6@@3PA_KA ; sbox6
  00cb7	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR selector$[rbp]
  00cbe	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00cc2	48 c1 e0 08	 shl	 rax, 8
  00cc6	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00cca	48 0b c8	 or	 rcx, rax
  00ccd	48 8b c1	 mov	 rax, rcx
  00cd0	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
; Line 1445
  00cd4	48 8b 45 48	 mov	 rax, QWORD PTR scrambler$[rbp]
  00cd8	48 c1 e8 06	 shr	 rax, 6
  00cdc	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  00ce0	48 89 85 a8 00
	00 00		 mov	 QWORD PTR group$[rbp], rax
; Line 1446
  00ce7	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00cee	48 83 e0 20	 and	 rax, 32			; 00000020H
  00cf2	48 c1 e8 04	 shr	 rax, 4
  00cf6	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00cfd	48 83 e1 01	 and	 rcx, 1
  00d01	48 0b c1	 or	 rax, rcx
  00d04	48 89 85 c8 00
	00 00		 mov	 QWORD PTR row$[rbp], rax
; Line 1447
  00d0b	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00d12	48 83 e0 10	 and	 rax, 16
  00d16	48 d1 e8	 shr	 rax, 1
  00d19	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00d20	48 83 e1 08	 and	 rcx, 8
  00d24	48 d1 e9	 shr	 rcx, 1
  00d27	48 0b c1	 or	 rax, rcx
  00d2a	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00d31	48 83 e1 04	 and	 rcx, 4
  00d35	48 d1 e9	 shr	 rcx, 1
  00d38	48 0b c1	 or	 rax, rcx
  00d3b	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00d42	48 83 e1 02	 and	 rcx, 2
  00d46	48 d1 e9	 shr	 rcx, 1
  00d49	48 0b c1	 or	 rax, rcx
  00d4c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR col$[rbp], rax
; Line 1448
  00d53	48 6b 85 c8 00
	00 00 10	 imul	 rax, QWORD PTR row$[rbp], 16
  00d5b	48 03 85 e8 00
	00 00		 add	 rax, QWORD PTR col$[rbp]
  00d62	48 89 85 08 01
	00 00		 mov	 QWORD PTR selector$[rbp], rax
; Line 1449
  00d69	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?sbox7@@3PA_KA ; sbox7
  00d70	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR selector$[rbp]
  00d77	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00d7b	48 c1 e0 04	 shl	 rax, 4
  00d7f	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00d83	48 0b c8	 or	 rcx, rax
  00d86	48 8b c1	 mov	 rax, rcx
  00d89	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
; Line 1454
  00d8d	48 8b 45 48	 mov	 rax, QWORD PTR scrambler$[rbp]
  00d91	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  00d95	48 89 85 a8 00
	00 00		 mov	 QWORD PTR group$[rbp], rax
; Line 1455
  00d9c	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00da3	48 83 e0 20	 and	 rax, 32			; 00000020H
  00da7	48 c1 e8 04	 shr	 rax, 4
  00dab	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00db2	48 83 e1 01	 and	 rcx, 1
  00db6	48 0b c1	 or	 rax, rcx
  00db9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR row$[rbp], rax
; Line 1456
  00dc0	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR group$[rbp]
  00dc7	48 83 e0 10	 and	 rax, 16
  00dcb	48 d1 e8	 shr	 rax, 1
  00dce	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00dd5	48 83 e1 08	 and	 rcx, 8
  00dd9	48 d1 e9	 shr	 rcx, 1
  00ddc	48 0b c1	 or	 rax, rcx
  00ddf	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00de6	48 83 e1 04	 and	 rcx, 4
  00dea	48 d1 e9	 shr	 rcx, 1
  00ded	48 0b c1	 or	 rax, rcx
  00df0	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR group$[rbp]
  00df7	48 83 e1 02	 and	 rcx, 2
  00dfb	48 d1 e9	 shr	 rcx, 1
  00dfe	48 0b c1	 or	 rax, rcx
  00e01	48 89 85 e8 00
	00 00		 mov	 QWORD PTR col$[rbp], rax
; Line 1457
  00e08	48 6b 85 c8 00
	00 00 10	 imul	 rax, QWORD PTR row$[rbp], 16
  00e10	48 03 85 e8 00
	00 00		 add	 rax, QWORD PTR col$[rbp]
  00e17	48 89 85 08 01
	00 00		 mov	 QWORD PTR selector$[rbp], rax
; Line 1458
  00e1e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?sbox8@@3PA_KA ; sbox8
  00e25	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR selector$[rbp]
  00e2c	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00e30	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00e34	48 0b c8	 or	 rcx, rax
  00e37	48 8b c1	 mov	 rax, rcx
  00e3a	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
; Line 1460
  00e3e	48 8b 45 68	 mov	 rax, QWORD PTR newScrambler$[rbp]
  00e42	48 89 45 48	 mov	 QWORD PTR scrambler$[rbp], rax
; Line 1461
  00e46	48 c7 45 68 00
	00 00 00	 mov	 QWORD PTR newScrambler$[rbp], 0
; Line 1464
  00e4e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00e55	48 c1 e0 1f	 shl	 rax, 31
  00e59	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00e5d	48 23 c8	 and	 rcx, rax
  00e60	48 8b c1	 mov	 rax, rcx
  00e63	48 85 c0	 test	 rax, rax
  00e66	74 19		 je	 SHORT $LN34@desRound
  00e68	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00e6f	48 c1 e0 17	 shl	 rax, 23
  00e73	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00e77	48 0b c8	 or	 rcx, rax
  00e7a	48 8b c1	 mov	 rax, rcx
  00e7d	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN34@desRound:
; Line 1465
  00e81	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00e88	48 c1 e0 1e	 shl	 rax, 30
  00e8c	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00e90	48 23 c8	 and	 rcx, rax
  00e93	48 8b c1	 mov	 rax, rcx
  00e96	48 85 c0	 test	 rax, rax
  00e99	74 19		 je	 SHORT $LN35@desRound
  00e9b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00ea2	48 c1 e0 0f	 shl	 rax, 15
  00ea6	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00eaa	48 0b c8	 or	 rcx, rax
  00ead	48 8b c1	 mov	 rax, rcx
  00eb0	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN35@desRound:
; Line 1466
  00eb4	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00ebb	48 c1 e0 1d	 shl	 rax, 29
  00ebf	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00ec3	48 23 c8	 and	 rcx, rax
  00ec6	48 8b c1	 mov	 rax, rcx
  00ec9	48 85 c0	 test	 rax, rax
  00ecc	74 19		 je	 SHORT $LN36@desRound
  00ece	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00ed5	48 c1 e0 09	 shl	 rax, 9
  00ed9	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00edd	48 0b c8	 or	 rcx, rax
  00ee0	48 8b c1	 mov	 rax, rcx
  00ee3	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN36@desRound:
; Line 1467
  00ee7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00eee	48 c1 e0 1c	 shl	 rax, 28
  00ef2	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00ef6	48 23 c8	 and	 rcx, rax
  00ef9	48 8b c1	 mov	 rax, rcx
  00efc	48 85 c0	 test	 rax, rax
  00eff	74 18		 je	 SHORT $LN37@desRound
  00f01	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00f08	48 d1 e0	 shl	 rax, 1
  00f0b	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00f0f	48 0b c8	 or	 rcx, rax
  00f12	48 8b c1	 mov	 rax, rcx
  00f15	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN37@desRound:
; Line 1468
  00f19	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00f20	48 c1 e0 1b	 shl	 rax, 27
  00f24	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00f28	48 23 c8	 and	 rcx, rax
  00f2b	48 8b c1	 mov	 rax, rcx
  00f2e	48 85 c0	 test	 rax, rax
  00f31	74 19		 je	 SHORT $LN38@desRound
  00f33	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00f3a	48 c1 e0 13	 shl	 rax, 19
  00f3e	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00f42	48 0b c8	 or	 rcx, rax
  00f45	48 8b c1	 mov	 rax, rcx
  00f48	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN38@desRound:
; Line 1469
  00f4c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00f53	48 c1 e0 1a	 shl	 rax, 26
  00f57	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00f5b	48 23 c8	 and	 rcx, rax
  00f5e	48 8b c1	 mov	 rax, rcx
  00f61	48 85 c0	 test	 rax, rax
  00f64	74 19		 je	 SHORT $LN39@desRound
  00f66	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00f6d	48 c1 e0 04	 shl	 rax, 4
  00f71	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00f75	48 0b c8	 or	 rcx, rax
  00f78	48 8b c1	 mov	 rax, rcx
  00f7b	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN39@desRound:
; Line 1470
  00f7f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00f86	48 c1 e0 19	 shl	 rax, 25
  00f8a	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00f8e	48 23 c8	 and	 rcx, rax
  00f91	48 8b c1	 mov	 rax, rcx
  00f94	48 85 c0	 test	 rax, rax
  00f97	74 19		 je	 SHORT $LN40@desRound
  00f99	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00fa0	48 c1 e0 1e	 shl	 rax, 30
  00fa4	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00fa8	48 0b c8	 or	 rcx, rax
  00fab	48 8b c1	 mov	 rax, rcx
  00fae	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN40@desRound:
; Line 1471
  00fb2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00fb9	48 c1 e0 18	 shl	 rax, 24
  00fbd	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00fc1	48 23 c8	 and	 rcx, rax
  00fc4	48 8b c1	 mov	 rax, rcx
  00fc7	48 85 c0	 test	 rax, rax
  00fca	74 19		 je	 SHORT $LN41@desRound
  00fcc	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00fd3	48 c1 e0 0e	 shl	 rax, 14
  00fd7	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  00fdb	48 0b c8	 or	 rcx, rax
  00fde	48 8b c1	 mov	 rax, rcx
  00fe1	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN41@desRound:
; Line 1472
  00fe5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  00fec	48 c1 e0 17	 shl	 rax, 23
  00ff0	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  00ff4	48 23 c8	 and	 rcx, rax
  00ff7	48 8b c1	 mov	 rax, rcx
  00ffa	48 85 c0	 test	 rax, rax
  00ffd	74 19		 je	 SHORT $LN42@desRound
  00fff	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01006	48 c1 e0 08	 shl	 rax, 8
  0100a	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0100e	48 0b c8	 or	 rcx, rax
  01011	48 8b c1	 mov	 rax, rcx
  01014	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN42@desRound:
; Line 1473
  01018	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0101f	48 c1 e0 16	 shl	 rax, 22
  01023	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  01027	48 23 c8	 and	 rcx, rax
  0102a	48 8b c1	 mov	 rax, rcx
  0102d	48 85 c0	 test	 rax, rax
  01030	74 19		 je	 SHORT $LN43@desRound
  01032	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01039	48 c1 e0 10	 shl	 rax, 16
  0103d	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  01041	48 0b c8	 or	 rcx, rax
  01044	48 8b c1	 mov	 rax, rcx
  01047	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN43@desRound:
; Line 1474
  0104b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01052	48 c1 e0 15	 shl	 rax, 21
  01056	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0105a	48 23 c8	 and	 rcx, rax
  0105d	48 8b c1	 mov	 rax, rcx
  01060	48 85 c0	 test	 rax, rax
  01063	74 19		 je	 SHORT $LN44@desRound
  01065	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0106c	48 c1 e0 02	 shl	 rax, 2
  01070	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  01074	48 0b c8	 or	 rcx, rax
  01077	48 8b c1	 mov	 rax, rcx
  0107a	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN44@desRound:
; Line 1475
  0107e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01085	48 c1 e0 14	 shl	 rax, 20
  01089	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0108d	48 23 c8	 and	 rcx, rax
  01090	48 8b c1	 mov	 rax, rcx
  01093	48 85 c0	 test	 rax, rax
  01096	74 19		 je	 SHORT $LN45@desRound
  01098	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0109f	48 c1 e0 1a	 shl	 rax, 26
  010a3	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  010a7	48 0b c8	 or	 rcx, rax
  010aa	48 8b c1	 mov	 rax, rcx
  010ad	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN45@desRound:
; Line 1476
  010b1	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  010b8	48 c1 e0 13	 shl	 rax, 19
  010bc	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  010c0	48 23 c8	 and	 rcx, rax
  010c3	48 8b c1	 mov	 rax, rcx
  010c6	48 85 c0	 test	 rax, rax
  010c9	74 19		 je	 SHORT $LN46@desRound
  010cb	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  010d2	48 c1 e0 06	 shl	 rax, 6
  010d6	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  010da	48 0b c8	 or	 rcx, rax
  010dd	48 8b c1	 mov	 rax, rcx
  010e0	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN46@desRound:
; Line 1477
  010e4	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  010eb	48 c1 e0 12	 shl	 rax, 18
  010ef	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  010f3	48 23 c8	 and	 rcx, rax
  010f6	48 8b c1	 mov	 rax, rcx
  010f9	48 85 c0	 test	 rax, rax
  010fc	74 19		 je	 SHORT $LN47@desRound
  010fe	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01105	48 c1 e0 0c	 shl	 rax, 12
  01109	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0110d	48 0b c8	 or	 rcx, rax
  01110	48 8b c1	 mov	 rax, rcx
  01113	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN47@desRound:
; Line 1478
  01117	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0111e	48 c1 e0 11	 shl	 rax, 17
  01122	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  01126	48 23 c8	 and	 rcx, rax
  01129	48 8b c1	 mov	 rax, rcx
  0112c	48 85 c0	 test	 rax, rax
  0112f	74 19		 je	 SHORT $LN48@desRound
  01131	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01138	48 c1 e0 16	 shl	 rax, 22
  0113c	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  01140	48 0b c8	 or	 rcx, rax
  01143	48 8b c1	 mov	 rax, rcx
  01146	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN48@desRound:
; Line 1479
  0114a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01151	48 c1 e0 10	 shl	 rax, 16
  01155	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  01159	48 23 c8	 and	 rcx, rax
  0115c	48 8b c1	 mov	 rax, rcx
  0115f	48 85 c0	 test	 rax, rax
  01162	74 19		 je	 SHORT $LN49@desRound
  01164	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0116b	48 c1 e0 1f	 shl	 rax, 31
  0116f	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  01173	48 0b c8	 or	 rcx, rax
  01176	48 8b c1	 mov	 rax, rcx
  01179	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN49@desRound:
; Line 1480
  0117d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01184	48 c1 e0 0f	 shl	 rax, 15
  01188	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0118c	48 23 c8	 and	 rcx, rax
  0118f	48 8b c1	 mov	 rax, rcx
  01192	48 85 c0	 test	 rax, rax
  01195	74 19		 je	 SHORT $LN50@desRound
  01197	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0119e	48 c1 e0 18	 shl	 rax, 24
  011a2	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  011a6	48 0b c8	 or	 rcx, rax
  011a9	48 8b c1	 mov	 rax, rcx
  011ac	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN50@desRound:
; Line 1481
  011b0	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  011b7	48 c1 e0 0e	 shl	 rax, 14
  011bb	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  011bf	48 23 c8	 and	 rcx, rax
  011c2	48 8b c1	 mov	 rax, rcx
  011c5	48 85 c0	 test	 rax, rax
  011c8	74 19		 je	 SHORT $LN51@desRound
  011ca	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  011d1	48 c1 e0 12	 shl	 rax, 18
  011d5	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  011d9	48 0b c8	 or	 rcx, rax
  011dc	48 8b c1	 mov	 rax, rcx
  011df	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN51@desRound:
; Line 1482
  011e3	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  011ea	48 c1 e0 0d	 shl	 rax, 13
  011ee	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  011f2	48 23 c8	 and	 rcx, rax
  011f5	48 8b c1	 mov	 rax, rcx
  011f8	48 85 c0	 test	 rax, rax
  011fb	74 19		 je	 SHORT $LN52@desRound
  011fd	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01204	48 c1 e0 07	 shl	 rax, 7
  01208	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0120c	48 0b c8	 or	 rcx, rax
  0120f	48 8b c1	 mov	 rax, rcx
  01212	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN52@desRound:
; Line 1483
  01216	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0121d	48 c1 e0 0c	 shl	 rax, 12
  01221	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  01225	48 23 c8	 and	 rcx, rax
  01228	48 8b c1	 mov	 rax, rcx
  0122b	48 85 c0	 test	 rax, rax
  0122e	74 19		 je	 SHORT $LN53@desRound
  01230	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01237	48 c1 e0 1d	 shl	 rax, 29
  0123b	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0123f	48 0b c8	 or	 rcx, rax
  01242	48 8b c1	 mov	 rax, rcx
  01245	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN53@desRound:
; Line 1484
  01249	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01250	48 c1 e0 0b	 shl	 rax, 11
  01254	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  01258	48 23 c8	 and	 rcx, rax
  0125b	48 8b c1	 mov	 rax, rcx
  0125e	48 85 c0	 test	 rax, rax
  01261	74 19		 je	 SHORT $LN54@desRound
  01263	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0126a	48 c1 e0 1c	 shl	 rax, 28
  0126e	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  01272	48 0b c8	 or	 rcx, rax
  01275	48 8b c1	 mov	 rax, rcx
  01278	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN54@desRound:
; Line 1485
  0127c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01283	48 c1 e0 0a	 shl	 rax, 10
  01287	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0128b	48 23 c8	 and	 rcx, rax
  0128e	48 8b c1	 mov	 rax, rcx
  01291	48 85 c0	 test	 rax, rax
  01294	74 19		 je	 SHORT $LN55@desRound
  01296	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0129d	48 c1 e0 03	 shl	 rax, 3
  012a1	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  012a5	48 0b c8	 or	 rcx, rax
  012a8	48 8b c1	 mov	 rax, rcx
  012ab	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN55@desRound:
; Line 1486
  012af	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  012b6	48 c1 e0 09	 shl	 rax, 9
  012ba	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  012be	48 23 c8	 and	 rcx, rax
  012c1	48 8b c1	 mov	 rax, rcx
  012c4	48 85 c0	 test	 rax, rax
  012c7	74 19		 je	 SHORT $LN56@desRound
  012c9	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  012d0	48 c1 e0 15	 shl	 rax, 21
  012d4	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  012d8	48 0b c8	 or	 rcx, rax
  012db	48 8b c1	 mov	 rax, rcx
  012de	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN56@desRound:
; Line 1487
  012e2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  012e9	48 c1 e0 08	 shl	 rax, 8
  012ed	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  012f1	48 23 c8	 and	 rcx, rax
  012f4	48 8b c1	 mov	 rax, rcx
  012f7	48 85 c0	 test	 rax, rax
  012fa	74 19		 je	 SHORT $LN57@desRound
  012fc	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01303	48 c1 e0 0d	 shl	 rax, 13
  01307	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0130b	48 0b c8	 or	 rcx, rax
  0130e	48 8b c1	 mov	 rax, rcx
  01311	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN57@desRound:
; Line 1488
  01315	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0131c	48 c1 e0 07	 shl	 rax, 7
  01320	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  01324	48 23 c8	 and	 rcx, rax
  01327	48 8b c1	 mov	 rax, rcx
  0132a	48 85 c0	 test	 rax, rax
  0132d	74 15		 je	 SHORT $LN58@desRound
  0132f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01336	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0133a	48 0b c8	 or	 rcx, rax
  0133d	48 8b c1	 mov	 rax, rcx
  01340	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN58@desRound:
; Line 1489
  01344	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0134b	48 c1 e0 06	 shl	 rax, 6
  0134f	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  01353	48 23 c8	 and	 rcx, rax
  01356	48 8b c1	 mov	 rax, rcx
  01359	48 85 c0	 test	 rax, rax
  0135c	74 19		 je	 SHORT $LN59@desRound
  0135e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01365	48 c1 e0 14	 shl	 rax, 20
  01369	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0136d	48 0b c8	 or	 rcx, rax
  01370	48 8b c1	 mov	 rax, rcx
  01373	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN59@desRound:
; Line 1490
  01377	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0137e	48 c1 e0 05	 shl	 rax, 5
  01382	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  01386	48 23 c8	 and	 rcx, rax
  01389	48 8b c1	 mov	 rax, rcx
  0138c	48 85 c0	 test	 rax, rax
  0138f	74 19		 je	 SHORT $LN60@desRound
  01391	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01398	48 c1 e0 0a	 shl	 rax, 10
  0139c	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  013a0	48 0b c8	 or	 rcx, rax
  013a3	48 8b c1	 mov	 rax, rcx
  013a6	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN60@desRound:
; Line 1491
  013aa	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  013b1	48 c1 e0 04	 shl	 rax, 4
  013b5	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  013b9	48 23 c8	 and	 rcx, rax
  013bc	48 8b c1	 mov	 rax, rcx
  013bf	48 85 c0	 test	 rax, rax
  013c2	74 19		 je	 SHORT $LN61@desRound
  013c4	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  013cb	48 c1 e0 19	 shl	 rax, 25
  013cf	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  013d3	48 0b c8	 or	 rcx, rax
  013d6	48 8b c1	 mov	 rax, rcx
  013d9	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN61@desRound:
; Line 1492
  013dd	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  013e4	48 c1 e0 03	 shl	 rax, 3
  013e8	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  013ec	48 23 c8	 and	 rcx, rax
  013ef	48 8b c1	 mov	 rax, rcx
  013f2	48 85 c0	 test	 rax, rax
  013f5	74 19		 je	 SHORT $LN62@desRound
  013f7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  013fe	48 c1 e0 1b	 shl	 rax, 27
  01402	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  01406	48 0b c8	 or	 rcx, rax
  01409	48 8b c1	 mov	 rax, rcx
  0140c	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN62@desRound:
; Line 1493
  01410	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01417	48 c1 e0 02	 shl	 rax, 2
  0141b	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  0141f	48 23 c8	 and	 rcx, rax
  01422	48 8b c1	 mov	 rax, rcx
  01425	48 85 c0	 test	 rax, rax
  01428	74 19		 je	 SHORT $LN63@desRound
  0142a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01431	48 c1 e0 05	 shl	 rax, 5
  01435	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  01439	48 0b c8	 or	 rcx, rax
  0143c	48 8b c1	 mov	 rax, rcx
  0143f	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN63@desRound:
; Line 1494
  01443	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0144a	48 d1 e0	 shl	 rax, 1
  0144d	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  01451	48 23 c8	 and	 rcx, rax
  01454	48 8b c1	 mov	 rax, rcx
  01457	48 85 c0	 test	 rax, rax
  0145a	74 19		 je	 SHORT $LN64@desRound
  0145c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01463	48 c1 e0 11	 shl	 rax, 17
  01467	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0146b	48 0b c8	 or	 rcx, rax
  0146e	48 8b c1	 mov	 rax, rcx
  01471	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN64@desRound:
; Line 1495
  01475	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  0147c	48 8b 4d 48	 mov	 rcx, QWORD PTR scrambler$[rbp]
  01480	48 23 c8	 and	 rcx, rax
  01483	48 8b c1	 mov	 rax, rcx
  01486	48 85 c0	 test	 rax, rax
  01489	74 19		 je	 SHORT $LN65@desRound
  0148b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR bit$[rbp]
  01492	48 c1 e0 0b	 shl	 rax, 11
  01496	48 8b 4d 68	 mov	 rcx, QWORD PTR newScrambler$[rbp]
  0149a	48 0b c8	 or	 rcx, rax
  0149d	48 8b c1	 mov	 rax, rcx
  014a0	48 89 45 68	 mov	 QWORD PTR newScrambler$[rbp], rax
$LN65@desRound:
; Line 1497
  014a4	48 8b 45 28	 mov	 rax, QWORD PTR messageRight$[rbp]
  014a8	48 89 45 48	 mov	 QWORD PTR scrambler$[rbp], rax
; Line 1499
  014ac	48 8b 45 68	 mov	 rax, QWORD PTR newScrambler$[rbp]
  014b0	48 8b 4d 08	 mov	 rcx, QWORD PTR messageLeft$[rbp]
  014b4	48 33 c8	 xor	 rcx, rax
  014b7	48 8b c1	 mov	 rax, rcx
  014ba	48 89 45 28	 mov	 QWORD PTR messageRight$[rbp], rax
; Line 1500
  014be	48 8b 45 48	 mov	 rax, QWORD PTR scrambler$[rbp]
  014c2	48 89 45 08	 mov	 QWORD PTR messageLeft$[rbp], rax
; Line 1503
  014c6	48 8b 45 08	 mov	 rax, QWORD PTR messageLeft$[rbp]
  014ca	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  014ce	48 0b 45 28	 or	 rax, QWORD PTR messageRight$[rbp]
; Line 1504
  014d2	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  014d9	5f		 pop	 rdi
  014da	5d		 pop	 rbp
  014db	c3		 ret	 0
?desRound@@YA_K_K0@Z ENDP				; desRound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?finalP@@YA_K_K@Z
_TEXT	SEGMENT
newMessage$ = 8
bit$ = 40
message$ = 288
?finalP@@YA_K_K@Z PROC					; finalP, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 1265
$LN67:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1268
  00036	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR newMessage$[rbp], 0
; Line 1269
  0003e	48 c7 45 28 01
	00 00 00	 mov	 QWORD PTR bit$[rbp], 1
; Line 1271
  00046	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0004a	48 c1 e0 3f	 shl	 rax, 63			; 0000003fH
  0004e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00055	48 23 c8	 and	 rcx, rax
  00058	48 8b c1	 mov	 rax, rcx
  0005b	48 85 c0	 test	 rax, rax
  0005e	74 16		 je	 SHORT $LN2@finalP
  00060	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00064	48 c1 e0 06	 shl	 rax, 6
  00068	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0006c	48 0b c8	 or	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN2@finalP:
; Line 1272
  00076	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0007a	48 c1 e0 3e	 shl	 rax, 62			; 0000003eH
  0007e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00085	48 23 c8	 and	 rcx, rax
  00088	48 8b c1	 mov	 rax, rcx
  0008b	48 85 c0	 test	 rax, rax
  0008e	74 16		 je	 SHORT $LN3@finalP
  00090	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00094	48 c1 e0 0e	 shl	 rax, 14
  00098	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0009c	48 0b c8	 or	 rcx, rax
  0009f	48 8b c1	 mov	 rax, rcx
  000a2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN3@finalP:
; Line 1273
  000a6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  000aa	48 c1 e0 3d	 shl	 rax, 61			; 0000003dH
  000ae	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  000b5	48 23 c8	 and	 rcx, rax
  000b8	48 8b c1	 mov	 rax, rcx
  000bb	48 85 c0	 test	 rax, rax
  000be	74 16		 je	 SHORT $LN4@finalP
  000c0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  000c4	48 c1 e0 16	 shl	 rax, 22
  000c8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  000cc	48 0b c8	 or	 rcx, rax
  000cf	48 8b c1	 mov	 rax, rcx
  000d2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN4@finalP:
; Line 1274
  000d6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  000da	48 c1 e0 3c	 shl	 rax, 60			; 0000003cH
  000de	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  000e5	48 23 c8	 and	 rcx, rax
  000e8	48 8b c1	 mov	 rax, rcx
  000eb	48 85 c0	 test	 rax, rax
  000ee	74 16		 je	 SHORT $LN5@finalP
  000f0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  000f4	48 c1 e0 1e	 shl	 rax, 30
  000f8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  000fc	48 0b c8	 or	 rcx, rax
  000ff	48 8b c1	 mov	 rax, rcx
  00102	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN5@finalP:
; Line 1275
  00106	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0010a	48 c1 e0 3b	 shl	 rax, 59			; 0000003bH
  0010e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00115	48 23 c8	 and	 rcx, rax
  00118	48 8b c1	 mov	 rax, rcx
  0011b	48 85 c0	 test	 rax, rax
  0011e	74 16		 je	 SHORT $LN6@finalP
  00120	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00124	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  00128	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0012c	48 0b c8	 or	 rcx, rax
  0012f	48 8b c1	 mov	 rax, rcx
  00132	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN6@finalP:
; Line 1276
  00136	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0013a	48 c1 e0 3a	 shl	 rax, 58			; 0000003aH
  0013e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00145	48 23 c8	 and	 rcx, rax
  00148	48 8b c1	 mov	 rax, rcx
  0014b	48 85 c0	 test	 rax, rax
  0014e	74 16		 je	 SHORT $LN7@finalP
  00150	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00154	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  00158	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0015c	48 0b c8	 or	 rcx, rax
  0015f	48 8b c1	 mov	 rax, rcx
  00162	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN7@finalP:
; Line 1277
  00166	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0016a	48 c1 e0 39	 shl	 rax, 57			; 00000039H
  0016e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00175	48 23 c8	 and	 rcx, rax
  00178	48 8b c1	 mov	 rax, rcx
  0017b	48 85 c0	 test	 rax, rax
  0017e	74 16		 je	 SHORT $LN8@finalP
  00180	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00184	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  00188	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0018c	48 0b c8	 or	 rcx, rax
  0018f	48 8b c1	 mov	 rax, rcx
  00192	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN8@finalP:
; Line 1278
  00196	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0019a	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  0019e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  001a5	48 23 c8	 and	 rcx, rax
  001a8	48 8b c1	 mov	 rax, rcx
  001ab	48 85 c0	 test	 rax, rax
  001ae	74 16		 je	 SHORT $LN9@finalP
  001b0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  001b4	48 c1 e0 3e	 shl	 rax, 62			; 0000003eH
  001b8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  001bc	48 0b c8	 or	 rcx, rax
  001bf	48 8b c1	 mov	 rax, rcx
  001c2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN9@finalP:
; Line 1279
  001c6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  001ca	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  001ce	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  001d5	48 23 c8	 and	 rcx, rax
  001d8	48 8b c1	 mov	 rax, rcx
  001db	48 85 c0	 test	 rax, rax
  001de	74 16		 je	 SHORT $LN10@finalP
  001e0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  001e4	48 c1 e0 04	 shl	 rax, 4
  001e8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  001ec	48 0b c8	 or	 rcx, rax
  001ef	48 8b c1	 mov	 rax, rcx
  001f2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN10@finalP:
; Line 1280
  001f6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  001fa	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  001fe	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00205	48 23 c8	 and	 rcx, rax
  00208	48 8b c1	 mov	 rax, rcx
  0020b	48 85 c0	 test	 rax, rax
  0020e	74 16		 je	 SHORT $LN11@finalP
  00210	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00214	48 c1 e0 0c	 shl	 rax, 12
  00218	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0021c	48 0b c8	 or	 rcx, rax
  0021f	48 8b c1	 mov	 rax, rcx
  00222	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN11@finalP:
; Line 1281
  00226	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0022a	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  0022e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00235	48 23 c8	 and	 rcx, rax
  00238	48 8b c1	 mov	 rax, rcx
  0023b	48 85 c0	 test	 rax, rax
  0023e	74 16		 je	 SHORT $LN12@finalP
  00240	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00244	48 c1 e0 14	 shl	 rax, 20
  00248	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0024c	48 0b c8	 or	 rcx, rax
  0024f	48 8b c1	 mov	 rax, rcx
  00252	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN12@finalP:
; Line 1282
  00256	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0025a	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  0025e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00265	48 23 c8	 and	 rcx, rax
  00268	48 8b c1	 mov	 rax, rcx
  0026b	48 85 c0	 test	 rax, rax
  0026e	74 16		 je	 SHORT $LN13@finalP
  00270	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00274	48 c1 e0 1c	 shl	 rax, 28
  00278	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0027c	48 0b c8	 or	 rcx, rax
  0027f	48 8b c1	 mov	 rax, rcx
  00282	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN13@finalP:
; Line 1283
  00286	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0028a	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  0028e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00295	48 23 c8	 and	 rcx, rax
  00298	48 8b c1	 mov	 rax, rcx
  0029b	48 85 c0	 test	 rax, rax
  0029e	74 16		 je	 SHORT $LN14@finalP
  002a0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  002a4	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  002a8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  002ac	48 0b c8	 or	 rcx, rax
  002af	48 8b c1	 mov	 rax, rcx
  002b2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN14@finalP:
; Line 1284
  002b6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  002ba	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  002be	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  002c5	48 23 c8	 and	 rcx, rax
  002c8	48 8b c1	 mov	 rax, rcx
  002cb	48 85 c0	 test	 rax, rax
  002ce	74 16		 je	 SHORT $LN15@finalP
  002d0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  002d4	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  002d8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  002dc	48 0b c8	 or	 rcx, rax
  002df	48 8b c1	 mov	 rax, rcx
  002e2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN15@finalP:
; Line 1285
  002e6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  002ea	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  002ee	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  002f5	48 23 c8	 and	 rcx, rax
  002f8	48 8b c1	 mov	 rax, rcx
  002fb	48 85 c0	 test	 rax, rax
  002fe	74 16		 je	 SHORT $LN16@finalP
  00300	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00304	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  00308	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0030c	48 0b c8	 or	 rcx, rax
  0030f	48 8b c1	 mov	 rax, rcx
  00312	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN16@finalP:
; Line 1286
  00316	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0031a	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  0031e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00325	48 23 c8	 and	 rcx, rax
  00328	48 8b c1	 mov	 rax, rcx
  0032b	48 85 c0	 test	 rax, rax
  0032e	74 16		 je	 SHORT $LN17@finalP
  00330	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00334	48 c1 e0 3c	 shl	 rax, 60			; 0000003cH
  00338	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0033c	48 0b c8	 or	 rcx, rax
  0033f	48 8b c1	 mov	 rax, rcx
  00342	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN17@finalP:
; Line 1287
  00346	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0034a	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  0034e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00355	48 23 c8	 and	 rcx, rax
  00358	48 8b c1	 mov	 rax, rcx
  0035b	48 85 c0	 test	 rax, rax
  0035e	74 16		 je	 SHORT $LN18@finalP
  00360	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00364	48 c1 e0 02	 shl	 rax, 2
  00368	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0036c	48 0b c8	 or	 rcx, rax
  0036f	48 8b c1	 mov	 rax, rcx
  00372	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN18@finalP:
; Line 1288
  00376	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0037a	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  0037e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00385	48 23 c8	 and	 rcx, rax
  00388	48 8b c1	 mov	 rax, rcx
  0038b	48 85 c0	 test	 rax, rax
  0038e	74 16		 je	 SHORT $LN19@finalP
  00390	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00394	48 c1 e0 0a	 shl	 rax, 10
  00398	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0039c	48 0b c8	 or	 rcx, rax
  0039f	48 8b c1	 mov	 rax, rcx
  003a2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN19@finalP:
; Line 1289
  003a6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  003aa	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  003ae	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  003b5	48 23 c8	 and	 rcx, rax
  003b8	48 8b c1	 mov	 rax, rcx
  003bb	48 85 c0	 test	 rax, rax
  003be	74 16		 je	 SHORT $LN20@finalP
  003c0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  003c4	48 c1 e0 12	 shl	 rax, 18
  003c8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  003cc	48 0b c8	 or	 rcx, rax
  003cf	48 8b c1	 mov	 rax, rcx
  003d2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN20@finalP:
; Line 1290
  003d6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  003da	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  003de	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  003e5	48 23 c8	 and	 rcx, rax
  003e8	48 8b c1	 mov	 rax, rcx
  003eb	48 85 c0	 test	 rax, rax
  003ee	74 16		 je	 SHORT $LN21@finalP
  003f0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  003f4	48 c1 e0 1a	 shl	 rax, 26
  003f8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  003fc	48 0b c8	 or	 rcx, rax
  003ff	48 8b c1	 mov	 rax, rcx
  00402	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN21@finalP:
; Line 1291
  00406	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0040a	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  0040e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00415	48 23 c8	 and	 rcx, rax
  00418	48 8b c1	 mov	 rax, rcx
  0041b	48 85 c0	 test	 rax, rax
  0041e	74 16		 je	 SHORT $LN22@finalP
  00420	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00424	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  00428	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0042c	48 0b c8	 or	 rcx, rax
  0042f	48 8b c1	 mov	 rax, rcx
  00432	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN22@finalP:
; Line 1292
  00436	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0043a	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  0043e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00445	48 23 c8	 and	 rcx, rax
  00448	48 8b c1	 mov	 rax, rcx
  0044b	48 85 c0	 test	 rax, rax
  0044e	74 16		 je	 SHORT $LN23@finalP
  00450	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00454	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  00458	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0045c	48 0b c8	 or	 rcx, rax
  0045f	48 8b c1	 mov	 rax, rcx
  00462	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN23@finalP:
; Line 1293
  00466	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0046a	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  0046e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00475	48 23 c8	 and	 rcx, rax
  00478	48 8b c1	 mov	 rax, rcx
  0047b	48 85 c0	 test	 rax, rax
  0047e	74 16		 je	 SHORT $LN24@finalP
  00480	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00484	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  00488	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0048c	48 0b c8	 or	 rcx, rax
  0048f	48 8b c1	 mov	 rax, rcx
  00492	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN24@finalP:
; Line 1294
  00496	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0049a	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  0049e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  004a5	48 23 c8	 and	 rcx, rax
  004a8	48 8b c1	 mov	 rax, rcx
  004ab	48 85 c0	 test	 rax, rax
  004ae	74 16		 je	 SHORT $LN25@finalP
  004b0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  004b4	48 c1 e0 3a	 shl	 rax, 58			; 0000003aH
  004b8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  004bc	48 0b c8	 or	 rcx, rax
  004bf	48 8b c1	 mov	 rax, rcx
  004c2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN25@finalP:
; Line 1295
  004c6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  004ca	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  004ce	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  004d5	48 23 c8	 and	 rcx, rax
  004d8	48 8b c1	 mov	 rax, rcx
  004db	48 85 c0	 test	 rax, rax
  004de	74 12		 je	 SHORT $LN26@finalP
  004e0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  004e4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  004e8	48 0b c8	 or	 rcx, rax
  004eb	48 8b c1	 mov	 rax, rcx
  004ee	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN26@finalP:
; Line 1296
  004f2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  004f6	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  004fa	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00501	48 23 c8	 and	 rcx, rax
  00504	48 8b c1	 mov	 rax, rcx
  00507	48 85 c0	 test	 rax, rax
  0050a	74 16		 je	 SHORT $LN27@finalP
  0050c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00510	48 c1 e0 08	 shl	 rax, 8
  00514	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00518	48 0b c8	 or	 rcx, rax
  0051b	48 8b c1	 mov	 rax, rcx
  0051e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN27@finalP:
; Line 1297
  00522	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00526	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  0052a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00531	48 23 c8	 and	 rcx, rax
  00534	48 8b c1	 mov	 rax, rcx
  00537	48 85 c0	 test	 rax, rax
  0053a	74 16		 je	 SHORT $LN28@finalP
  0053c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00540	48 c1 e0 10	 shl	 rax, 16
  00544	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00548	48 0b c8	 or	 rcx, rax
  0054b	48 8b c1	 mov	 rax, rcx
  0054e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN28@finalP:
; Line 1298
  00552	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00556	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  0055a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00561	48 23 c8	 and	 rcx, rax
  00564	48 8b c1	 mov	 rax, rcx
  00567	48 85 c0	 test	 rax, rax
  0056a	74 16		 je	 SHORT $LN29@finalP
  0056c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00570	48 c1 e0 18	 shl	 rax, 24
  00574	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00578	48 0b c8	 or	 rcx, rax
  0057b	48 8b c1	 mov	 rax, rcx
  0057e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN29@finalP:
; Line 1299
  00582	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00586	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  0058a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00591	48 23 c8	 and	 rcx, rax
  00594	48 8b c1	 mov	 rax, rcx
  00597	48 85 c0	 test	 rax, rax
  0059a	74 16		 je	 SHORT $LN30@finalP
  0059c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  005a0	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  005a4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  005a8	48 0b c8	 or	 rcx, rax
  005ab	48 8b c1	 mov	 rax, rcx
  005ae	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN30@finalP:
; Line 1300
  005b2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  005b6	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  005ba	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  005c1	48 23 c8	 and	 rcx, rax
  005c4	48 8b c1	 mov	 rax, rcx
  005c7	48 85 c0	 test	 rax, rax
  005ca	74 16		 je	 SHORT $LN31@finalP
  005cc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  005d0	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  005d4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  005d8	48 0b c8	 or	 rcx, rax
  005db	48 8b c1	 mov	 rax, rcx
  005de	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN31@finalP:
; Line 1301
  005e2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  005e6	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  005ea	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  005f1	48 23 c8	 and	 rcx, rax
  005f4	48 8b c1	 mov	 rax, rcx
  005f7	48 85 c0	 test	 rax, rax
  005fa	74 16		 je	 SHORT $LN32@finalP
  005fc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00600	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00604	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00608	48 0b c8	 or	 rcx, rax
  0060b	48 8b c1	 mov	 rax, rcx
  0060e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN32@finalP:
; Line 1302
  00612	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00616	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0061a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00621	48 23 c8	 and	 rcx, rax
  00624	48 8b c1	 mov	 rax, rcx
  00627	48 85 c0	 test	 rax, rax
  0062a	74 16		 je	 SHORT $LN33@finalP
  0062c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00630	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  00634	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00638	48 0b c8	 or	 rcx, rax
  0063b	48 8b c1	 mov	 rax, rcx
  0063e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN33@finalP:
; Line 1303
  00642	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00646	48 c1 e0 1f	 shl	 rax, 31
  0064a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00651	48 23 c8	 and	 rcx, rax
  00654	48 8b c1	 mov	 rax, rcx
  00657	48 85 c0	 test	 rax, rax
  0065a	74 16		 je	 SHORT $LN34@finalP
  0065c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00660	48 c1 e0 07	 shl	 rax, 7
  00664	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00668	48 0b c8	 or	 rcx, rax
  0066b	48 8b c1	 mov	 rax, rcx
  0066e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN34@finalP:
; Line 1304
  00672	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00676	48 c1 e0 1e	 shl	 rax, 30
  0067a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00681	48 23 c8	 and	 rcx, rax
  00684	48 8b c1	 mov	 rax, rcx
  00687	48 85 c0	 test	 rax, rax
  0068a	74 16		 je	 SHORT $LN35@finalP
  0068c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00690	48 c1 e0 0f	 shl	 rax, 15
  00694	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00698	48 0b c8	 or	 rcx, rax
  0069b	48 8b c1	 mov	 rax, rcx
  0069e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN35@finalP:
; Line 1305
  006a2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  006a6	48 c1 e0 1d	 shl	 rax, 29
  006aa	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  006b1	48 23 c8	 and	 rcx, rax
  006b4	48 8b c1	 mov	 rax, rcx
  006b7	48 85 c0	 test	 rax, rax
  006ba	74 16		 je	 SHORT $LN36@finalP
  006bc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  006c0	48 c1 e0 17	 shl	 rax, 23
  006c4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  006c8	48 0b c8	 or	 rcx, rax
  006cb	48 8b c1	 mov	 rax, rcx
  006ce	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN36@finalP:
; Line 1306
  006d2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  006d6	48 c1 e0 1c	 shl	 rax, 28
  006da	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  006e1	48 23 c8	 and	 rcx, rax
  006e4	48 8b c1	 mov	 rax, rcx
  006e7	48 85 c0	 test	 rax, rax
  006ea	74 16		 je	 SHORT $LN37@finalP
  006ec	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  006f0	48 c1 e0 1f	 shl	 rax, 31
  006f4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  006f8	48 0b c8	 or	 rcx, rax
  006fb	48 8b c1	 mov	 rax, rcx
  006fe	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN37@finalP:
; Line 1307
  00702	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00706	48 c1 e0 1b	 shl	 rax, 27
  0070a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00711	48 23 c8	 and	 rcx, rax
  00714	48 8b c1	 mov	 rax, rcx
  00717	48 85 c0	 test	 rax, rax
  0071a	74 16		 je	 SHORT $LN38@finalP
  0071c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00720	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  00724	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00728	48 0b c8	 or	 rcx, rax
  0072b	48 8b c1	 mov	 rax, rcx
  0072e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN38@finalP:
; Line 1308
  00732	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00736	48 c1 e0 1a	 shl	 rax, 26
  0073a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00741	48 23 c8	 and	 rcx, rax
  00744	48 8b c1	 mov	 rax, rcx
  00747	48 85 c0	 test	 rax, rax
  0074a	74 16		 je	 SHORT $LN39@finalP
  0074c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00750	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  00754	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00758	48 0b c8	 or	 rcx, rax
  0075b	48 8b c1	 mov	 rax, rcx
  0075e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN39@finalP:
; Line 1309
  00762	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00766	48 c1 e0 19	 shl	 rax, 25
  0076a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00771	48 23 c8	 and	 rcx, rax
  00774	48 8b c1	 mov	 rax, rcx
  00777	48 85 c0	 test	 rax, rax
  0077a	74 16		 je	 SHORT $LN40@finalP
  0077c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00780	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  00784	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00788	48 0b c8	 or	 rcx, rax
  0078b	48 8b c1	 mov	 rax, rcx
  0078e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN40@finalP:
; Line 1310
  00792	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00796	48 c1 e0 18	 shl	 rax, 24
  0079a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  007a1	48 23 c8	 and	 rcx, rax
  007a4	48 8b c1	 mov	 rax, rcx
  007a7	48 85 c0	 test	 rax, rax
  007aa	74 16		 je	 SHORT $LN41@finalP
  007ac	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  007b0	48 c1 e0 3f	 shl	 rax, 63			; 0000003fH
  007b4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  007b8	48 0b c8	 or	 rcx, rax
  007bb	48 8b c1	 mov	 rax, rcx
  007be	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN41@finalP:
; Line 1311
  007c2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  007c6	48 c1 e0 17	 shl	 rax, 23
  007ca	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  007d1	48 23 c8	 and	 rcx, rax
  007d4	48 8b c1	 mov	 rax, rcx
  007d7	48 85 c0	 test	 rax, rax
  007da	74 16		 je	 SHORT $LN42@finalP
  007dc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  007e0	48 c1 e0 05	 shl	 rax, 5
  007e4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  007e8	48 0b c8	 or	 rcx, rax
  007eb	48 8b c1	 mov	 rax, rcx
  007ee	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN42@finalP:
; Line 1312
  007f2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  007f6	48 c1 e0 16	 shl	 rax, 22
  007fa	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00801	48 23 c8	 and	 rcx, rax
  00804	48 8b c1	 mov	 rax, rcx
  00807	48 85 c0	 test	 rax, rax
  0080a	74 16		 je	 SHORT $LN43@finalP
  0080c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00810	48 c1 e0 0d	 shl	 rax, 13
  00814	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00818	48 0b c8	 or	 rcx, rax
  0081b	48 8b c1	 mov	 rax, rcx
  0081e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN43@finalP:
; Line 1313
  00822	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00826	48 c1 e0 15	 shl	 rax, 21
  0082a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00831	48 23 c8	 and	 rcx, rax
  00834	48 8b c1	 mov	 rax, rcx
  00837	48 85 c0	 test	 rax, rax
  0083a	74 16		 je	 SHORT $LN44@finalP
  0083c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00840	48 c1 e0 15	 shl	 rax, 21
  00844	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00848	48 0b c8	 or	 rcx, rax
  0084b	48 8b c1	 mov	 rax, rcx
  0084e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN44@finalP:
; Line 1314
  00852	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00856	48 c1 e0 14	 shl	 rax, 20
  0085a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00861	48 23 c8	 and	 rcx, rax
  00864	48 8b c1	 mov	 rax, rcx
  00867	48 85 c0	 test	 rax, rax
  0086a	74 16		 je	 SHORT $LN45@finalP
  0086c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00870	48 c1 e0 1d	 shl	 rax, 29
  00874	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00878	48 0b c8	 or	 rcx, rax
  0087b	48 8b c1	 mov	 rax, rcx
  0087e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN45@finalP:
; Line 1315
  00882	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00886	48 c1 e0 13	 shl	 rax, 19
  0088a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00891	48 23 c8	 and	 rcx, rax
  00894	48 8b c1	 mov	 rax, rcx
  00897	48 85 c0	 test	 rax, rax
  0089a	74 16		 je	 SHORT $LN46@finalP
  0089c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  008a0	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  008a4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  008a8	48 0b c8	 or	 rcx, rax
  008ab	48 8b c1	 mov	 rax, rcx
  008ae	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN46@finalP:
; Line 1316
  008b2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  008b6	48 c1 e0 12	 shl	 rax, 18
  008ba	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  008c1	48 23 c8	 and	 rcx, rax
  008c4	48 8b c1	 mov	 rax, rcx
  008c7	48 85 c0	 test	 rax, rax
  008ca	74 16		 je	 SHORT $LN47@finalP
  008cc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  008d0	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  008d4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  008d8	48 0b c8	 or	 rcx, rax
  008db	48 8b c1	 mov	 rax, rcx
  008de	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN47@finalP:
; Line 1317
  008e2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  008e6	48 c1 e0 11	 shl	 rax, 17
  008ea	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  008f1	48 23 c8	 and	 rcx, rax
  008f4	48 8b c1	 mov	 rax, rcx
  008f7	48 85 c0	 test	 rax, rax
  008fa	74 16		 je	 SHORT $LN48@finalP
  008fc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00900	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  00904	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00908	48 0b c8	 or	 rcx, rax
  0090b	48 8b c1	 mov	 rax, rcx
  0090e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN48@finalP:
; Line 1318
  00912	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00916	48 c1 e0 10	 shl	 rax, 16
  0091a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00921	48 23 c8	 and	 rcx, rax
  00924	48 8b c1	 mov	 rax, rcx
  00927	48 85 c0	 test	 rax, rax
  0092a	74 16		 je	 SHORT $LN49@finalP
  0092c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00930	48 c1 e0 3d	 shl	 rax, 61			; 0000003dH
  00934	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00938	48 0b c8	 or	 rcx, rax
  0093b	48 8b c1	 mov	 rax, rcx
  0093e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN49@finalP:
; Line 1319
  00942	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00946	48 c1 e0 0f	 shl	 rax, 15
  0094a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00951	48 23 c8	 and	 rcx, rax
  00954	48 8b c1	 mov	 rax, rcx
  00957	48 85 c0	 test	 rax, rax
  0095a	74 16		 je	 SHORT $LN50@finalP
  0095c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00960	48 c1 e0 03	 shl	 rax, 3
  00964	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00968	48 0b c8	 or	 rcx, rax
  0096b	48 8b c1	 mov	 rax, rcx
  0096e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN50@finalP:
; Line 1320
  00972	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00976	48 c1 e0 0e	 shl	 rax, 14
  0097a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00981	48 23 c8	 and	 rcx, rax
  00984	48 8b c1	 mov	 rax, rcx
  00987	48 85 c0	 test	 rax, rax
  0098a	74 16		 je	 SHORT $LN51@finalP
  0098c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00990	48 c1 e0 0b	 shl	 rax, 11
  00994	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00998	48 0b c8	 or	 rcx, rax
  0099b	48 8b c1	 mov	 rax, rcx
  0099e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN51@finalP:
; Line 1321
  009a2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  009a6	48 c1 e0 0d	 shl	 rax, 13
  009aa	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  009b1	48 23 c8	 and	 rcx, rax
  009b4	48 8b c1	 mov	 rax, rcx
  009b7	48 85 c0	 test	 rax, rax
  009ba	74 16		 je	 SHORT $LN52@finalP
  009bc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  009c0	48 c1 e0 13	 shl	 rax, 19
  009c4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  009c8	48 0b c8	 or	 rcx, rax
  009cb	48 8b c1	 mov	 rax, rcx
  009ce	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN52@finalP:
; Line 1322
  009d2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  009d6	48 c1 e0 0c	 shl	 rax, 12
  009da	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  009e1	48 23 c8	 and	 rcx, rax
  009e4	48 8b c1	 mov	 rax, rcx
  009e7	48 85 c0	 test	 rax, rax
  009ea	74 16		 je	 SHORT $LN53@finalP
  009ec	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  009f0	48 c1 e0 1b	 shl	 rax, 27
  009f4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  009f8	48 0b c8	 or	 rcx, rax
  009fb	48 8b c1	 mov	 rax, rcx
  009fe	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN53@finalP:
; Line 1323
  00a02	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a06	48 c1 e0 0b	 shl	 rax, 11
  00a0a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00a11	48 23 c8	 and	 rcx, rax
  00a14	48 8b c1	 mov	 rax, rcx
  00a17	48 85 c0	 test	 rax, rax
  00a1a	74 16		 je	 SHORT $LN54@finalP
  00a1c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a20	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  00a24	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00a28	48 0b c8	 or	 rcx, rax
  00a2b	48 8b c1	 mov	 rax, rcx
  00a2e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN54@finalP:
; Line 1324
  00a32	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a36	48 c1 e0 0a	 shl	 rax, 10
  00a3a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00a41	48 23 c8	 and	 rcx, rax
  00a44	48 8b c1	 mov	 rax, rcx
  00a47	48 85 c0	 test	 rax, rax
  00a4a	74 16		 je	 SHORT $LN55@finalP
  00a4c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a50	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  00a54	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00a58	48 0b c8	 or	 rcx, rax
  00a5b	48 8b c1	 mov	 rax, rcx
  00a5e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN55@finalP:
; Line 1325
  00a62	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a66	48 c1 e0 09	 shl	 rax, 9
  00a6a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00a71	48 23 c8	 and	 rcx, rax
  00a74	48 8b c1	 mov	 rax, rcx
  00a77	48 85 c0	 test	 rax, rax
  00a7a	74 16		 je	 SHORT $LN56@finalP
  00a7c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a80	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  00a84	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00a88	48 0b c8	 or	 rcx, rax
  00a8b	48 8b c1	 mov	 rax, rcx
  00a8e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN56@finalP:
; Line 1326
  00a92	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a96	48 c1 e0 08	 shl	 rax, 8
  00a9a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00aa1	48 23 c8	 and	 rcx, rax
  00aa4	48 8b c1	 mov	 rax, rcx
  00aa7	48 85 c0	 test	 rax, rax
  00aaa	74 16		 je	 SHORT $LN57@finalP
  00aac	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00ab0	48 c1 e0 3b	 shl	 rax, 59			; 0000003bH
  00ab4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00ab8	48 0b c8	 or	 rcx, rax
  00abb	48 8b c1	 mov	 rax, rcx
  00abe	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN57@finalP:
; Line 1327
  00ac2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00ac6	48 c1 e0 07	 shl	 rax, 7
  00aca	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00ad1	48 23 c8	 and	 rcx, rax
  00ad4	48 8b c1	 mov	 rax, rcx
  00ad7	48 85 c0	 test	 rax, rax
  00ada	74 15		 je	 SHORT $LN58@finalP
  00adc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00ae0	48 d1 e0	 shl	 rax, 1
  00ae3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00ae7	48 0b c8	 or	 rcx, rax
  00aea	48 8b c1	 mov	 rax, rcx
  00aed	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN58@finalP:
; Line 1328
  00af1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00af5	48 c1 e0 06	 shl	 rax, 6
  00af9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00b00	48 23 c8	 and	 rcx, rax
  00b03	48 8b c1	 mov	 rax, rcx
  00b06	48 85 c0	 test	 rax, rax
  00b09	74 16		 je	 SHORT $LN59@finalP
  00b0b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b0f	48 c1 e0 09	 shl	 rax, 9
  00b13	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00b17	48 0b c8	 or	 rcx, rax
  00b1a	48 8b c1	 mov	 rax, rcx
  00b1d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN59@finalP:
; Line 1329
  00b21	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b25	48 c1 e0 05	 shl	 rax, 5
  00b29	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00b30	48 23 c8	 and	 rcx, rax
  00b33	48 8b c1	 mov	 rax, rcx
  00b36	48 85 c0	 test	 rax, rax
  00b39	74 16		 je	 SHORT $LN60@finalP
  00b3b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b3f	48 c1 e0 11	 shl	 rax, 17
  00b43	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00b47	48 0b c8	 or	 rcx, rax
  00b4a	48 8b c1	 mov	 rax, rcx
  00b4d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN60@finalP:
; Line 1330
  00b51	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b55	48 c1 e0 04	 shl	 rax, 4
  00b59	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00b60	48 23 c8	 and	 rcx, rax
  00b63	48 8b c1	 mov	 rax, rcx
  00b66	48 85 c0	 test	 rax, rax
  00b69	74 16		 je	 SHORT $LN61@finalP
  00b6b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b6f	48 c1 e0 19	 shl	 rax, 25
  00b73	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00b77	48 0b c8	 or	 rcx, rax
  00b7a	48 8b c1	 mov	 rax, rcx
  00b7d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN61@finalP:
; Line 1331
  00b81	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b85	48 c1 e0 03	 shl	 rax, 3
  00b89	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00b90	48 23 c8	 and	 rcx, rax
  00b93	48 8b c1	 mov	 rax, rcx
  00b96	48 85 c0	 test	 rax, rax
  00b99	74 16		 je	 SHORT $LN62@finalP
  00b9b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b9f	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  00ba3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00ba7	48 0b c8	 or	 rcx, rax
  00baa	48 8b c1	 mov	 rax, rcx
  00bad	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN62@finalP:
; Line 1332
  00bb1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00bb5	48 c1 e0 02	 shl	 rax, 2
  00bb9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00bc0	48 23 c8	 and	 rcx, rax
  00bc3	48 8b c1	 mov	 rax, rcx
  00bc6	48 85 c0	 test	 rax, rax
  00bc9	74 16		 je	 SHORT $LN63@finalP
  00bcb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00bcf	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  00bd3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00bd7	48 0b c8	 or	 rcx, rax
  00bda	48 8b c1	 mov	 rax, rcx
  00bdd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN63@finalP:
; Line 1333
  00be1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00be5	48 d1 e0	 shl	 rax, 1
  00be8	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00bef	48 23 c8	 and	 rcx, rax
  00bf2	48 8b c1	 mov	 rax, rcx
  00bf5	48 85 c0	 test	 rax, rax
  00bf8	74 16		 je	 SHORT $LN64@finalP
  00bfa	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00bfe	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  00c02	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00c06	48 0b c8	 or	 rcx, rax
  00c09	48 8b c1	 mov	 rax, rcx
  00c0c	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN64@finalP:
; Line 1334
  00c10	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00c14	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00c1b	48 23 c8	 and	 rcx, rax
  00c1e	48 8b c1	 mov	 rax, rcx
  00c21	48 85 c0	 test	 rax, rax
  00c24	74 16		 je	 SHORT $LN65@finalP
  00c26	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00c2a	48 c1 e0 39	 shl	 rax, 57			; 00000039H
  00c2e	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00c32	48 0b c8	 or	 rcx, rax
  00c35	48 8b c1	 mov	 rax, rcx
  00c38	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN65@finalP:
; Line 1335
  00c3c	48 8b 45 08	 mov	 rax, QWORD PTR newMessage$[rbp]
; Line 1336
  00c40	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00c47	5f		 pop	 rdi
  00c48	5d		 pop	 rbp
  00c49	c3		 ret	 0
?finalP@@YA_K_K@Z ENDP					; finalP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?initialP@@YA_K_K@Z
_TEXT	SEGMENT
newMessage$ = 8
bit$ = 40
message$ = 288
?initialP@@YA_K_K@Z PROC				; initialP, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 1190
$LN67:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1193
  00036	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR newMessage$[rbp], 0
; Line 1194
  0003e	48 c7 45 28 01
	00 00 00	 mov	 QWORD PTR bit$[rbp], 1
; Line 1196
  00046	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0004a	48 c1 e0 3f	 shl	 rax, 63			; 0000003fH
  0004e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00055	48 23 c8	 and	 rcx, rax
  00058	48 8b c1	 mov	 rax, rcx
  0005b	48 85 c0	 test	 rax, rax
  0005e	74 16		 je	 SHORT $LN2@initialP
  00060	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00064	48 c1 e0 18	 shl	 rax, 24
  00068	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0006c	48 0b c8	 or	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN2@initialP:
; Line 1197
  00076	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0007a	48 c1 e0 3e	 shl	 rax, 62			; 0000003eH
  0007e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00085	48 23 c8	 and	 rcx, rax
  00088	48 8b c1	 mov	 rax, rcx
  0008b	48 85 c0	 test	 rax, rax
  0008e	74 16		 je	 SHORT $LN3@initialP
  00090	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00094	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  00098	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0009c	48 0b c8	 or	 rcx, rax
  0009f	48 8b c1	 mov	 rax, rcx
  000a2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN3@initialP:
; Line 1198
  000a6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  000aa	48 c1 e0 3d	 shl	 rax, 61			; 0000003dH
  000ae	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  000b5	48 23 c8	 and	 rcx, rax
  000b8	48 8b c1	 mov	 rax, rcx
  000bb	48 85 c0	 test	 rax, rax
  000be	74 16		 je	 SHORT $LN4@initialP
  000c0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  000c4	48 c1 e0 10	 shl	 rax, 16
  000c8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  000cc	48 0b c8	 or	 rcx, rax
  000cf	48 8b c1	 mov	 rax, rcx
  000d2	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN4@initialP:
; Line 1199
  000d6	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  000da	48 c1 e0 3c	 shl	 rax, 60			; 0000003cH
  000de	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  000e5	48 23 c8	 and	 rcx, rax
  000e8	48 8b c1	 mov	 rax, rcx
  000eb	48 85 c0	 test	 rax, rax
  000ee	74 16		 je	 SHORT $LN5@initialP
  000f0	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  000f4	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  000f8	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  000fc	48 0b c8	 or	 rcx, rax
  000ff	48 8b c1	 mov	 rax, rcx
  00102	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN5@initialP:
; Line 1200
  00106	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0010a	48 c1 e0 3b	 shl	 rax, 59			; 0000003bH
  0010e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00115	48 23 c8	 and	 rcx, rax
  00118	48 8b c1	 mov	 rax, rcx
  0011b	48 85 c0	 test	 rax, rax
  0011e	74 16		 je	 SHORT $LN6@initialP
  00120	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00124	48 c1 e0 08	 shl	 rax, 8
  00128	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0012c	48 0b c8	 or	 rcx, rax
  0012f	48 8b c1	 mov	 rax, rcx
  00132	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN6@initialP:
; Line 1201
  00136	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0013a	48 c1 e0 3a	 shl	 rax, 58			; 0000003aH
  0013e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00145	48 23 c8	 and	 rcx, rax
  00148	48 8b c1	 mov	 rax, rcx
  0014b	48 85 c0	 test	 rax, rax
  0014e	74 16		 je	 SHORT $LN7@initialP
  00150	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00154	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00158	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  0015c	48 0b c8	 or	 rcx, rax
  0015f	48 8b c1	 mov	 rax, rcx
  00162	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN7@initialP:
; Line 1202
  00166	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0016a	48 c1 e0 39	 shl	 rax, 57			; 00000039H
  0016e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00175	48 23 c8	 and	 rcx, rax
  00178	48 8b c1	 mov	 rax, rcx
  0017b	48 85 c0	 test	 rax, rax
  0017e	74 12		 je	 SHORT $LN8@initialP
  00180	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00184	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00188	48 0b c8	 or	 rcx, rax
  0018b	48 8b c1	 mov	 rax, rcx
  0018e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN8@initialP:
; Line 1203
  00192	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00196	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  0019a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  001a1	48 23 c8	 and	 rcx, rax
  001a4	48 8b c1	 mov	 rax, rcx
  001a7	48 85 c0	 test	 rax, rax
  001aa	74 16		 je	 SHORT $LN9@initialP
  001ac	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  001b0	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  001b4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  001b8	48 0b c8	 or	 rcx, rax
  001bb	48 8b c1	 mov	 rax, rcx
  001be	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN9@initialP:
; Line 1204
  001c2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  001c6	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  001ca	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  001d1	48 23 c8	 and	 rcx, rax
  001d4	48 8b c1	 mov	 rax, rcx
  001d7	48 85 c0	 test	 rax, rax
  001da	74 16		 je	 SHORT $LN10@initialP
  001dc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  001e0	48 c1 e0 19	 shl	 rax, 25
  001e4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  001e8	48 0b c8	 or	 rcx, rax
  001eb	48 8b c1	 mov	 rax, rcx
  001ee	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN10@initialP:
; Line 1205
  001f2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  001f6	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  001fa	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00201	48 23 c8	 and	 rcx, rax
  00204	48 8b c1	 mov	 rax, rcx
  00207	48 85 c0	 test	 rax, rax
  0020a	74 16		 je	 SHORT $LN11@initialP
  0020c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00210	48 c1 e0 39	 shl	 rax, 57			; 00000039H
  00214	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00218	48 0b c8	 or	 rcx, rax
  0021b	48 8b c1	 mov	 rax, rcx
  0021e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN11@initialP:
; Line 1206
  00222	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00226	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  0022a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00231	48 23 c8	 and	 rcx, rax
  00234	48 8b c1	 mov	 rax, rcx
  00237	48 85 c0	 test	 rax, rax
  0023a	74 16		 je	 SHORT $LN12@initialP
  0023c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00240	48 c1 e0 11	 shl	 rax, 17
  00244	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00248	48 0b c8	 or	 rcx, rax
  0024b	48 8b c1	 mov	 rax, rcx
  0024e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN12@initialP:
; Line 1207
  00252	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00256	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  0025a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00261	48 23 c8	 and	 rcx, rax
  00264	48 8b c1	 mov	 rax, rcx
  00267	48 85 c0	 test	 rax, rax
  0026a	74 16		 je	 SHORT $LN13@initialP
  0026c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00270	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  00274	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00278	48 0b c8	 or	 rcx, rax
  0027b	48 8b c1	 mov	 rax, rcx
  0027e	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN13@initialP:
; Line 1208
  00282	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00286	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  0028a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00291	48 23 c8	 and	 rcx, rax
  00294	48 8b c1	 mov	 rax, rcx
  00297	48 85 c0	 test	 rax, rax
  0029a	74 16		 je	 SHORT $LN14@initialP
  0029c	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  002a0	48 c1 e0 09	 shl	 rax, 9
  002a4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  002a8	48 0b c8	 or	 rcx, rax
  002ab	48 8b c1	 mov	 rax, rcx
  002ae	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN14@initialP:
; Line 1209
  002b2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  002b6	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  002ba	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  002c1	48 23 c8	 and	 rcx, rax
  002c4	48 8b c1	 mov	 rax, rcx
  002c7	48 85 c0	 test	 rax, rax
  002ca	74 16		 je	 SHORT $LN15@initialP
  002cc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  002d0	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  002d4	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  002d8	48 0b c8	 or	 rcx, rax
  002db	48 8b c1	 mov	 rax, rcx
  002de	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN15@initialP:
; Line 1210
  002e2	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  002e6	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  002ea	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  002f1	48 23 c8	 and	 rcx, rax
  002f4	48 8b c1	 mov	 rax, rcx
  002f7	48 85 c0	 test	 rax, rax
  002fa	74 15		 je	 SHORT $LN16@initialP
  002fc	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00300	48 d1 e0	 shl	 rax, 1
  00303	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00307	48 0b c8	 or	 rcx, rax
  0030a	48 8b c1	 mov	 rax, rcx
  0030d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN16@initialP:
; Line 1211
  00311	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00315	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00319	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00320	48 23 c8	 and	 rcx, rax
  00323	48 8b c1	 mov	 rax, rcx
  00326	48 85 c0	 test	 rax, rax
  00329	74 16		 je	 SHORT $LN17@initialP
  0032b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0032f	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  00333	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00337	48 0b c8	 or	 rcx, rax
  0033a	48 8b c1	 mov	 rax, rcx
  0033d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN17@initialP:
; Line 1212
  00341	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00345	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  00349	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00350	48 23 c8	 and	 rcx, rax
  00353	48 8b c1	 mov	 rax, rcx
  00356	48 85 c0	 test	 rax, rax
  00359	74 16		 je	 SHORT $LN18@initialP
  0035b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0035f	48 c1 e0 1a	 shl	 rax, 26
  00363	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00367	48 0b c8	 or	 rcx, rax
  0036a	48 8b c1	 mov	 rax, rcx
  0036d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN18@initialP:
; Line 1213
  00371	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00375	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  00379	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00380	48 23 c8	 and	 rcx, rax
  00383	48 8b c1	 mov	 rax, rcx
  00386	48 85 c0	 test	 rax, rax
  00389	74 16		 je	 SHORT $LN19@initialP
  0038b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0038f	48 c1 e0 3a	 shl	 rax, 58			; 0000003aH
  00393	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00397	48 0b c8	 or	 rcx, rax
  0039a	48 8b c1	 mov	 rax, rcx
  0039d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN19@initialP:
; Line 1214
  003a1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  003a5	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  003a9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  003b0	48 23 c8	 and	 rcx, rax
  003b3	48 8b c1	 mov	 rax, rcx
  003b6	48 85 c0	 test	 rax, rax
  003b9	74 16		 je	 SHORT $LN20@initialP
  003bb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  003bf	48 c1 e0 12	 shl	 rax, 18
  003c3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  003c7	48 0b c8	 or	 rcx, rax
  003ca	48 8b c1	 mov	 rax, rcx
  003cd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN20@initialP:
; Line 1215
  003d1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  003d5	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  003d9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  003e0	48 23 c8	 and	 rcx, rax
  003e3	48 8b c1	 mov	 rax, rcx
  003e6	48 85 c0	 test	 rax, rax
  003e9	74 16		 je	 SHORT $LN21@initialP
  003eb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  003ef	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  003f3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  003f7	48 0b c8	 or	 rcx, rax
  003fa	48 8b c1	 mov	 rax, rcx
  003fd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN21@initialP:
; Line 1216
  00401	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00405	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  00409	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00410	48 23 c8	 and	 rcx, rax
  00413	48 8b c1	 mov	 rax, rcx
  00416	48 85 c0	 test	 rax, rax
  00419	74 16		 je	 SHORT $LN22@initialP
  0041b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0041f	48 c1 e0 0a	 shl	 rax, 10
  00423	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00427	48 0b c8	 or	 rcx, rax
  0042a	48 8b c1	 mov	 rax, rcx
  0042d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN22@initialP:
; Line 1217
  00431	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00435	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  00439	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00440	48 23 c8	 and	 rcx, rax
  00443	48 8b c1	 mov	 rax, rcx
  00446	48 85 c0	 test	 rax, rax
  00449	74 16		 je	 SHORT $LN23@initialP
  0044b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0044f	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  00453	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00457	48 0b c8	 or	 rcx, rax
  0045a	48 8b c1	 mov	 rax, rcx
  0045d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN23@initialP:
; Line 1218
  00461	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00465	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  00469	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00470	48 23 c8	 and	 rcx, rax
  00473	48 8b c1	 mov	 rax, rcx
  00476	48 85 c0	 test	 rax, rax
  00479	74 16		 je	 SHORT $LN24@initialP
  0047b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0047f	48 c1 e0 02	 shl	 rax, 2
  00483	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00487	48 0b c8	 or	 rcx, rax
  0048a	48 8b c1	 mov	 rax, rcx
  0048d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN24@initialP:
; Line 1219
  00491	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00495	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00499	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  004a0	48 23 c8	 and	 rcx, rax
  004a3	48 8b c1	 mov	 rax, rcx
  004a6	48 85 c0	 test	 rax, rax
  004a9	74 16		 je	 SHORT $LN25@initialP
  004ab	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  004af	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  004b3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  004b7	48 0b c8	 or	 rcx, rax
  004ba	48 8b c1	 mov	 rax, rcx
  004bd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN25@initialP:
; Line 1220
  004c1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  004c5	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  004c9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  004d0	48 23 c8	 and	 rcx, rax
  004d3	48 8b c1	 mov	 rax, rcx
  004d6	48 85 c0	 test	 rax, rax
  004d9	74 16		 je	 SHORT $LN26@initialP
  004db	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  004df	48 c1 e0 1b	 shl	 rax, 27
  004e3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  004e7	48 0b c8	 or	 rcx, rax
  004ea	48 8b c1	 mov	 rax, rcx
  004ed	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN26@initialP:
; Line 1221
  004f1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  004f5	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  004f9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00500	48 23 c8	 and	 rcx, rax
  00503	48 8b c1	 mov	 rax, rcx
  00506	48 85 c0	 test	 rax, rax
  00509	74 16		 je	 SHORT $LN27@initialP
  0050b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0050f	48 c1 e0 3b	 shl	 rax, 59			; 0000003bH
  00513	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00517	48 0b c8	 or	 rcx, rax
  0051a	48 8b c1	 mov	 rax, rcx
  0051d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN27@initialP:
; Line 1222
  00521	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00525	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  00529	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00530	48 23 c8	 and	 rcx, rax
  00533	48 8b c1	 mov	 rax, rcx
  00536	48 85 c0	 test	 rax, rax
  00539	74 16		 je	 SHORT $LN28@initialP
  0053b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0053f	48 c1 e0 13	 shl	 rax, 19
  00543	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00547	48 0b c8	 or	 rcx, rax
  0054a	48 8b c1	 mov	 rax, rcx
  0054d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN28@initialP:
; Line 1223
  00551	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00555	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  00559	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00560	48 23 c8	 and	 rcx, rax
  00563	48 8b c1	 mov	 rax, rcx
  00566	48 85 c0	 test	 rax, rax
  00569	74 16		 je	 SHORT $LN29@initialP
  0056b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0056f	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  00573	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00577	48 0b c8	 or	 rcx, rax
  0057a	48 8b c1	 mov	 rax, rcx
  0057d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN29@initialP:
; Line 1224
  00581	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00585	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  00589	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00590	48 23 c8	 and	 rcx, rax
  00593	48 8b c1	 mov	 rax, rcx
  00596	48 85 c0	 test	 rax, rax
  00599	74 16		 je	 SHORT $LN30@initialP
  0059b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0059f	48 c1 e0 0b	 shl	 rax, 11
  005a3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  005a7	48 0b c8	 or	 rcx, rax
  005aa	48 8b c1	 mov	 rax, rcx
  005ad	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN30@initialP:
; Line 1225
  005b1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  005b5	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  005b9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  005c0	48 23 c8	 and	 rcx, rax
  005c3	48 8b c1	 mov	 rax, rcx
  005c6	48 85 c0	 test	 rax, rax
  005c9	74 16		 je	 SHORT $LN31@initialP
  005cb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  005cf	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  005d3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  005d7	48 0b c8	 or	 rcx, rax
  005da	48 8b c1	 mov	 rax, rcx
  005dd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN31@initialP:
; Line 1226
  005e1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  005e5	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  005e9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  005f0	48 23 c8	 and	 rcx, rax
  005f3	48 8b c1	 mov	 rax, rcx
  005f6	48 85 c0	 test	 rax, rax
  005f9	74 16		 je	 SHORT $LN32@initialP
  005fb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  005ff	48 c1 e0 03	 shl	 rax, 3
  00603	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00607	48 0b c8	 or	 rcx, rax
  0060a	48 8b c1	 mov	 rax, rcx
  0060d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN32@initialP:
; Line 1227
  00611	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00615	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00619	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00620	48 23 c8	 and	 rcx, rax
  00623	48 8b c1	 mov	 rax, rcx
  00626	48 85 c0	 test	 rax, rax
  00629	74 16		 je	 SHORT $LN33@initialP
  0062b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0062f	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  00633	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00637	48 0b c8	 or	 rcx, rax
  0063a	48 8b c1	 mov	 rax, rcx
  0063d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN33@initialP:
; Line 1228
  00641	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00645	48 c1 e0 1f	 shl	 rax, 31
  00649	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00650	48 23 c8	 and	 rcx, rax
  00653	48 8b c1	 mov	 rax, rcx
  00656	48 85 c0	 test	 rax, rax
  00659	74 16		 je	 SHORT $LN34@initialP
  0065b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0065f	48 c1 e0 1c	 shl	 rax, 28
  00663	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00667	48 0b c8	 or	 rcx, rax
  0066a	48 8b c1	 mov	 rax, rcx
  0066d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN34@initialP:
; Line 1229
  00671	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00675	48 c1 e0 1e	 shl	 rax, 30
  00679	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00680	48 23 c8	 and	 rcx, rax
  00683	48 8b c1	 mov	 rax, rcx
  00686	48 85 c0	 test	 rax, rax
  00689	74 16		 je	 SHORT $LN35@initialP
  0068b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0068f	48 c1 e0 3c	 shl	 rax, 60			; 0000003cH
  00693	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00697	48 0b c8	 or	 rcx, rax
  0069a	48 8b c1	 mov	 rax, rcx
  0069d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN35@initialP:
; Line 1230
  006a1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  006a5	48 c1 e0 1d	 shl	 rax, 29
  006a9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  006b0	48 23 c8	 and	 rcx, rax
  006b3	48 8b c1	 mov	 rax, rcx
  006b6	48 85 c0	 test	 rax, rax
  006b9	74 16		 je	 SHORT $LN36@initialP
  006bb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  006bf	48 c1 e0 14	 shl	 rax, 20
  006c3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  006c7	48 0b c8	 or	 rcx, rax
  006ca	48 8b c1	 mov	 rax, rcx
  006cd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN36@initialP:
; Line 1231
  006d1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  006d5	48 c1 e0 1c	 shl	 rax, 28
  006d9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  006e0	48 23 c8	 and	 rcx, rax
  006e3	48 8b c1	 mov	 rax, rcx
  006e6	48 85 c0	 test	 rax, rax
  006e9	74 16		 je	 SHORT $LN37@initialP
  006eb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  006ef	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  006f3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  006f7	48 0b c8	 or	 rcx, rax
  006fa	48 8b c1	 mov	 rax, rcx
  006fd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN37@initialP:
; Line 1232
  00701	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00705	48 c1 e0 1b	 shl	 rax, 27
  00709	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00710	48 23 c8	 and	 rcx, rax
  00713	48 8b c1	 mov	 rax, rcx
  00716	48 85 c0	 test	 rax, rax
  00719	74 16		 je	 SHORT $LN38@initialP
  0071b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0071f	48 c1 e0 0c	 shl	 rax, 12
  00723	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00727	48 0b c8	 or	 rcx, rax
  0072a	48 8b c1	 mov	 rax, rcx
  0072d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN38@initialP:
; Line 1233
  00731	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00735	48 c1 e0 1a	 shl	 rax, 26
  00739	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00740	48 23 c8	 and	 rcx, rax
  00743	48 8b c1	 mov	 rax, rcx
  00746	48 85 c0	 test	 rax, rax
  00749	74 16		 je	 SHORT $LN39@initialP
  0074b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0074f	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  00753	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00757	48 0b c8	 or	 rcx, rax
  0075a	48 8b c1	 mov	 rax, rcx
  0075d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN39@initialP:
; Line 1234
  00761	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00765	48 c1 e0 19	 shl	 rax, 25
  00769	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00770	48 23 c8	 and	 rcx, rax
  00773	48 8b c1	 mov	 rax, rcx
  00776	48 85 c0	 test	 rax, rax
  00779	74 16		 je	 SHORT $LN40@initialP
  0077b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0077f	48 c1 e0 04	 shl	 rax, 4
  00783	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00787	48 0b c8	 or	 rcx, rax
  0078a	48 8b c1	 mov	 rax, rcx
  0078d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN40@initialP:
; Line 1235
  00791	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00795	48 c1 e0 18	 shl	 rax, 24
  00799	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  007a0	48 23 c8	 and	 rcx, rax
  007a3	48 8b c1	 mov	 rax, rcx
  007a6	48 85 c0	 test	 rax, rax
  007a9	74 16		 je	 SHORT $LN41@initialP
  007ab	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  007af	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  007b3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  007b7	48 0b c8	 or	 rcx, rax
  007ba	48 8b c1	 mov	 rax, rcx
  007bd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN41@initialP:
; Line 1236
  007c1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  007c5	48 c1 e0 17	 shl	 rax, 23
  007c9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  007d0	48 23 c8	 and	 rcx, rax
  007d3	48 8b c1	 mov	 rax, rcx
  007d6	48 85 c0	 test	 rax, rax
  007d9	74 16		 je	 SHORT $LN42@initialP
  007db	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  007df	48 c1 e0 1d	 shl	 rax, 29
  007e3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  007e7	48 0b c8	 or	 rcx, rax
  007ea	48 8b c1	 mov	 rax, rcx
  007ed	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN42@initialP:
; Line 1237
  007f1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  007f5	48 c1 e0 16	 shl	 rax, 22
  007f9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00800	48 23 c8	 and	 rcx, rax
  00803	48 8b c1	 mov	 rax, rcx
  00806	48 85 c0	 test	 rax, rax
  00809	74 16		 je	 SHORT $LN43@initialP
  0080b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0080f	48 c1 e0 3d	 shl	 rax, 61			; 0000003dH
  00813	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00817	48 0b c8	 or	 rcx, rax
  0081a	48 8b c1	 mov	 rax, rcx
  0081d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN43@initialP:
; Line 1238
  00821	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00825	48 c1 e0 15	 shl	 rax, 21
  00829	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00830	48 23 c8	 and	 rcx, rax
  00833	48 8b c1	 mov	 rax, rcx
  00836	48 85 c0	 test	 rax, rax
  00839	74 16		 je	 SHORT $LN44@initialP
  0083b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0083f	48 c1 e0 15	 shl	 rax, 21
  00843	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00847	48 0b c8	 or	 rcx, rax
  0084a	48 8b c1	 mov	 rax, rcx
  0084d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN44@initialP:
; Line 1239
  00851	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00855	48 c1 e0 14	 shl	 rax, 20
  00859	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00860	48 23 c8	 and	 rcx, rax
  00863	48 8b c1	 mov	 rax, rcx
  00866	48 85 c0	 test	 rax, rax
  00869	74 16		 je	 SHORT $LN45@initialP
  0086b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0086f	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  00873	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00877	48 0b c8	 or	 rcx, rax
  0087a	48 8b c1	 mov	 rax, rcx
  0087d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN45@initialP:
; Line 1240
  00881	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00885	48 c1 e0 13	 shl	 rax, 19
  00889	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00890	48 23 c8	 and	 rcx, rax
  00893	48 8b c1	 mov	 rax, rcx
  00896	48 85 c0	 test	 rax, rax
  00899	74 16		 je	 SHORT $LN46@initialP
  0089b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0089f	48 c1 e0 0d	 shl	 rax, 13
  008a3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  008a7	48 0b c8	 or	 rcx, rax
  008aa	48 8b c1	 mov	 rax, rcx
  008ad	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN46@initialP:
; Line 1241
  008b1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  008b5	48 c1 e0 12	 shl	 rax, 18
  008b9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  008c0	48 23 c8	 and	 rcx, rax
  008c3	48 8b c1	 mov	 rax, rcx
  008c6	48 85 c0	 test	 rax, rax
  008c9	74 16		 je	 SHORT $LN47@initialP
  008cb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  008cf	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  008d3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  008d7	48 0b c8	 or	 rcx, rax
  008da	48 8b c1	 mov	 rax, rcx
  008dd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN47@initialP:
; Line 1242
  008e1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  008e5	48 c1 e0 11	 shl	 rax, 17
  008e9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  008f0	48 23 c8	 and	 rcx, rax
  008f3	48 8b c1	 mov	 rax, rcx
  008f6	48 85 c0	 test	 rax, rax
  008f9	74 16		 je	 SHORT $LN48@initialP
  008fb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  008ff	48 c1 e0 05	 shl	 rax, 5
  00903	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00907	48 0b c8	 or	 rcx, rax
  0090a	48 8b c1	 mov	 rax, rcx
  0090d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN48@initialP:
; Line 1243
  00911	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00915	48 c1 e0 10	 shl	 rax, 16
  00919	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00920	48 23 c8	 and	 rcx, rax
  00923	48 8b c1	 mov	 rax, rcx
  00926	48 85 c0	 test	 rax, rax
  00929	74 16		 je	 SHORT $LN49@initialP
  0092b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0092f	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  00933	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00937	48 0b c8	 or	 rcx, rax
  0093a	48 8b c1	 mov	 rax, rcx
  0093d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN49@initialP:
; Line 1244
  00941	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00945	48 c1 e0 0f	 shl	 rax, 15
  00949	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00950	48 23 c8	 and	 rcx, rax
  00953	48 8b c1	 mov	 rax, rcx
  00956	48 85 c0	 test	 rax, rax
  00959	74 16		 je	 SHORT $LN50@initialP
  0095b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0095f	48 c1 e0 1e	 shl	 rax, 30
  00963	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00967	48 0b c8	 or	 rcx, rax
  0096a	48 8b c1	 mov	 rax, rcx
  0096d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN50@initialP:
; Line 1245
  00971	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00975	48 c1 e0 0e	 shl	 rax, 14
  00979	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00980	48 23 c8	 and	 rcx, rax
  00983	48 8b c1	 mov	 rax, rcx
  00986	48 85 c0	 test	 rax, rax
  00989	74 16		 je	 SHORT $LN51@initialP
  0098b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  0098f	48 c1 e0 3e	 shl	 rax, 62			; 0000003eH
  00993	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00997	48 0b c8	 or	 rcx, rax
  0099a	48 8b c1	 mov	 rax, rcx
  0099d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN51@initialP:
; Line 1246
  009a1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  009a5	48 c1 e0 0d	 shl	 rax, 13
  009a9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  009b0	48 23 c8	 and	 rcx, rax
  009b3	48 8b c1	 mov	 rax, rcx
  009b6	48 85 c0	 test	 rax, rax
  009b9	74 16		 je	 SHORT $LN52@initialP
  009bb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  009bf	48 c1 e0 16	 shl	 rax, 22
  009c3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  009c7	48 0b c8	 or	 rcx, rax
  009ca	48 8b c1	 mov	 rax, rcx
  009cd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN52@initialP:
; Line 1247
  009d1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  009d5	48 c1 e0 0c	 shl	 rax, 12
  009d9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  009e0	48 23 c8	 and	 rcx, rax
  009e3	48 8b c1	 mov	 rax, rcx
  009e6	48 85 c0	 test	 rax, rax
  009e9	74 16		 je	 SHORT $LN53@initialP
  009eb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  009ef	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  009f3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  009f7	48 0b c8	 or	 rcx, rax
  009fa	48 8b c1	 mov	 rax, rcx
  009fd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN53@initialP:
; Line 1248
  00a01	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a05	48 c1 e0 0b	 shl	 rax, 11
  00a09	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00a10	48 23 c8	 and	 rcx, rax
  00a13	48 8b c1	 mov	 rax, rcx
  00a16	48 85 c0	 test	 rax, rax
  00a19	74 16		 je	 SHORT $LN54@initialP
  00a1b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a1f	48 c1 e0 0e	 shl	 rax, 14
  00a23	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00a27	48 0b c8	 or	 rcx, rax
  00a2a	48 8b c1	 mov	 rax, rcx
  00a2d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN54@initialP:
; Line 1249
  00a31	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a35	48 c1 e0 0a	 shl	 rax, 10
  00a39	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00a40	48 23 c8	 and	 rcx, rax
  00a43	48 8b c1	 mov	 rax, rcx
  00a46	48 85 c0	 test	 rax, rax
  00a49	74 16		 je	 SHORT $LN55@initialP
  00a4b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a4f	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  00a53	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00a57	48 0b c8	 or	 rcx, rax
  00a5a	48 8b c1	 mov	 rax, rcx
  00a5d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN55@initialP:
; Line 1250
  00a61	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a65	48 c1 e0 09	 shl	 rax, 9
  00a69	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00a70	48 23 c8	 and	 rcx, rax
  00a73	48 8b c1	 mov	 rax, rcx
  00a76	48 85 c0	 test	 rax, rax
  00a79	74 16		 je	 SHORT $LN56@initialP
  00a7b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a7f	48 c1 e0 06	 shl	 rax, 6
  00a83	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00a87	48 0b c8	 or	 rcx, rax
  00a8a	48 8b c1	 mov	 rax, rcx
  00a8d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN56@initialP:
; Line 1251
  00a91	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00a95	48 c1 e0 08	 shl	 rax, 8
  00a99	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00aa0	48 23 c8	 and	 rcx, rax
  00aa3	48 8b c1	 mov	 rax, rcx
  00aa6	48 85 c0	 test	 rax, rax
  00aa9	74 16		 je	 SHORT $LN57@initialP
  00aab	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00aaf	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  00ab3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00ab7	48 0b c8	 or	 rcx, rax
  00aba	48 8b c1	 mov	 rax, rcx
  00abd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN57@initialP:
; Line 1252
  00ac1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00ac5	48 c1 e0 07	 shl	 rax, 7
  00ac9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00ad0	48 23 c8	 and	 rcx, rax
  00ad3	48 8b c1	 mov	 rax, rcx
  00ad6	48 85 c0	 test	 rax, rax
  00ad9	74 16		 je	 SHORT $LN58@initialP
  00adb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00adf	48 c1 e0 1f	 shl	 rax, 31
  00ae3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00ae7	48 0b c8	 or	 rcx, rax
  00aea	48 8b c1	 mov	 rax, rcx
  00aed	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN58@initialP:
; Line 1253
  00af1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00af5	48 c1 e0 06	 shl	 rax, 6
  00af9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00b00	48 23 c8	 and	 rcx, rax
  00b03	48 8b c1	 mov	 rax, rcx
  00b06	48 85 c0	 test	 rax, rax
  00b09	74 16		 je	 SHORT $LN59@initialP
  00b0b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b0f	48 c1 e0 3f	 shl	 rax, 63			; 0000003fH
  00b13	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00b17	48 0b c8	 or	 rcx, rax
  00b1a	48 8b c1	 mov	 rax, rcx
  00b1d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN59@initialP:
; Line 1254
  00b21	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b25	48 c1 e0 05	 shl	 rax, 5
  00b29	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00b30	48 23 c8	 and	 rcx, rax
  00b33	48 8b c1	 mov	 rax, rcx
  00b36	48 85 c0	 test	 rax, rax
  00b39	74 16		 je	 SHORT $LN60@initialP
  00b3b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b3f	48 c1 e0 17	 shl	 rax, 23
  00b43	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00b47	48 0b c8	 or	 rcx, rax
  00b4a	48 8b c1	 mov	 rax, rcx
  00b4d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN60@initialP:
; Line 1255
  00b51	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b55	48 c1 e0 04	 shl	 rax, 4
  00b59	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00b60	48 23 c8	 and	 rcx, rax
  00b63	48 8b c1	 mov	 rax, rcx
  00b66	48 85 c0	 test	 rax, rax
  00b69	74 16		 je	 SHORT $LN61@initialP
  00b6b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b6f	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  00b73	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00b77	48 0b c8	 or	 rcx, rax
  00b7a	48 8b c1	 mov	 rax, rcx
  00b7d	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN61@initialP:
; Line 1256
  00b81	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b85	48 c1 e0 03	 shl	 rax, 3
  00b89	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00b90	48 23 c8	 and	 rcx, rax
  00b93	48 8b c1	 mov	 rax, rcx
  00b96	48 85 c0	 test	 rax, rax
  00b99	74 16		 je	 SHORT $LN62@initialP
  00b9b	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00b9f	48 c1 e0 0f	 shl	 rax, 15
  00ba3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00ba7	48 0b c8	 or	 rcx, rax
  00baa	48 8b c1	 mov	 rax, rcx
  00bad	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN62@initialP:
; Line 1257
  00bb1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00bb5	48 c1 e0 02	 shl	 rax, 2
  00bb9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00bc0	48 23 c8	 and	 rcx, rax
  00bc3	48 8b c1	 mov	 rax, rcx
  00bc6	48 85 c0	 test	 rax, rax
  00bc9	74 16		 je	 SHORT $LN63@initialP
  00bcb	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00bcf	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  00bd3	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00bd7	48 0b c8	 or	 rcx, rax
  00bda	48 8b c1	 mov	 rax, rcx
  00bdd	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN63@initialP:
; Line 1258
  00be1	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00be5	48 d1 e0	 shl	 rax, 1
  00be8	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00bef	48 23 c8	 and	 rcx, rax
  00bf2	48 8b c1	 mov	 rax, rcx
  00bf5	48 85 c0	 test	 rax, rax
  00bf8	74 16		 je	 SHORT $LN64@initialP
  00bfa	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00bfe	48 c1 e0 07	 shl	 rax, 7
  00c02	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00c06	48 0b c8	 or	 rcx, rax
  00c09	48 8b c1	 mov	 rax, rcx
  00c0c	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN64@initialP:
; Line 1259
  00c10	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00c14	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00c1b	48 23 c8	 and	 rcx, rax
  00c1e	48 8b c1	 mov	 rax, rcx
  00c21	48 85 c0	 test	 rax, rax
  00c24	74 16		 je	 SHORT $LN65@initialP
  00c26	48 8b 45 28	 mov	 rax, QWORD PTR bit$[rbp]
  00c2a	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  00c2e	48 8b 4d 08	 mov	 rcx, QWORD PTR newMessage$[rbp]
  00c32	48 0b c8	 or	 rcx, rax
  00c35	48 8b c1	 mov	 rax, rcx
  00c38	48 89 45 08	 mov	 QWORD PTR newMessage$[rbp], rax
$LN65@initialP:
; Line 1260
  00c3c	48 8b 45 08	 mov	 rax, QWORD PTR newMessage$[rbp]
; Line 1261
  00c40	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00c47	5f		 pop	 rdi
  00c48	5d		 pop	 rbp
  00c49	c3		 ret	 0
?initialP@@YA_K_K@Z ENDP				; initialP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?makeRoundKeys@@YAX_KQEA_K@Z
_TEXT	SEGMENT
k0Left$ = 8
k0Right$ = 40
bitToKeep$ = 68
k0$ = 320
roundKeys$ = 328
?makeRoundKeys@@YAX_KQEA_K@Z PROC			; makeRoundKeys, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 1062
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1068
  0003b	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR k0$[rbp]
  00042	48 c1 e8 1c	 shr	 rax, 28
  00046	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1069
  0004a	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR k0$[rbp]
  00051	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00057	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1070
  0005b	c7 45 44 00 00
	00 00		 mov	 DWORD PTR bitToKeep$[rbp], 0
; Line 1073
  00062	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00066	48 c1 e8 1b	 shr	 rax, 27
  0006a	48 83 e0 01	 and	 rax, 1
  0006e	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1074
  00071	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00075	48 d1 e0	 shl	 rax, 1
  00078	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0007b	48 0b c1	 or	 rax, rcx
  0007e	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00084	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1075
  00088	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  0008c	48 c1 e8 1b	 shr	 rax, 27
  00090	48 83 e0 01	 and	 rax, 1
  00094	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1076
  00097	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  0009b	48 d1 e0	 shl	 rax, 1
  0009e	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  000a1	48 0b c1	 or	 rax, rcx
  000a4	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  000aa	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1077
  000ae	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  000b2	48 c1 e0 1c	 shl	 rax, 28
  000b6	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  000ba	b9 08 00 00 00	 mov	 ecx, 8
  000bf	48 6b c9 01	 imul	 rcx, rcx, 1
  000c3	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  000ca	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1080
  000ce	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  000d2	48 c1 e8 1b	 shr	 rax, 27
  000d6	48 83 e0 01	 and	 rax, 1
  000da	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1081
  000dd	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  000e1	48 d1 e0	 shl	 rax, 1
  000e4	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  000e7	48 0b c1	 or	 rax, rcx
  000ea	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  000f0	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1082
  000f4	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  000f8	48 c1 e8 1b	 shr	 rax, 27
  000fc	48 83 e0 01	 and	 rax, 1
  00100	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1083
  00103	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00107	48 d1 e0	 shl	 rax, 1
  0010a	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0010d	48 0b c1	 or	 rax, rcx
  00110	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00116	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1084
  0011a	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0011e	48 c1 e0 1c	 shl	 rax, 28
  00122	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  00126	b9 08 00 00 00	 mov	 ecx, 8
  0012b	48 6b c9 02	 imul	 rcx, rcx, 2
  0012f	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  00136	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1087
  0013a	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0013e	48 c1 e8 1a	 shr	 rax, 26
  00142	48 83 e0 03	 and	 rax, 3
  00146	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1088
  00149	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0014d	48 c1 e0 02	 shl	 rax, 2
  00151	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  00154	48 0b c1	 or	 rax, rcx
  00157	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  0015d	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1089
  00161	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00165	48 c1 e8 1a	 shr	 rax, 26
  00169	48 83 e0 03	 and	 rax, 3
  0016d	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1090
  00170	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00174	48 c1 e0 02	 shl	 rax, 2
  00178	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0017b	48 0b c1	 or	 rax, rcx
  0017e	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00184	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1091
  00188	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0018c	48 c1 e0 1c	 shl	 rax, 28
  00190	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  00194	b9 08 00 00 00	 mov	 ecx, 8
  00199	48 6b c9 03	 imul	 rcx, rcx, 3
  0019d	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  001a4	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1094
  001a8	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  001ac	48 c1 e8 1a	 shr	 rax, 26
  001b0	48 83 e0 03	 and	 rax, 3
  001b4	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1095
  001b7	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  001bb	48 c1 e0 02	 shl	 rax, 2
  001bf	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  001c2	48 0b c1	 or	 rax, rcx
  001c5	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  001cb	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1096
  001cf	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  001d3	48 c1 e8 1a	 shr	 rax, 26
  001d7	48 83 e0 03	 and	 rax, 3
  001db	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1097
  001de	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  001e2	48 c1 e0 02	 shl	 rax, 2
  001e6	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  001e9	48 0b c1	 or	 rax, rcx
  001ec	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  001f2	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1098
  001f6	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  001fa	48 c1 e0 1c	 shl	 rax, 28
  001fe	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  00202	b9 08 00 00 00	 mov	 ecx, 8
  00207	48 6b c9 04	 imul	 rcx, rcx, 4
  0020b	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  00212	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1101
  00216	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0021a	48 c1 e8 1a	 shr	 rax, 26
  0021e	48 83 e0 03	 and	 rax, 3
  00222	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1102
  00225	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00229	48 c1 e0 02	 shl	 rax, 2
  0022d	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  00230	48 0b c1	 or	 rax, rcx
  00233	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00239	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1103
  0023d	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00241	48 c1 e8 1a	 shr	 rax, 26
  00245	48 83 e0 03	 and	 rax, 3
  00249	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1104
  0024c	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00250	48 c1 e0 02	 shl	 rax, 2
  00254	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  00257	48 0b c1	 or	 rax, rcx
  0025a	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00260	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1105
  00264	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00268	48 c1 e0 1c	 shl	 rax, 28
  0026c	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  00270	b9 08 00 00 00	 mov	 ecx, 8
  00275	48 6b c9 05	 imul	 rcx, rcx, 5
  00279	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  00280	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1108
  00284	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00288	48 c1 e8 1a	 shr	 rax, 26
  0028c	48 83 e0 03	 and	 rax, 3
  00290	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1109
  00293	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00297	48 c1 e0 02	 shl	 rax, 2
  0029b	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0029e	48 0b c1	 or	 rax, rcx
  002a1	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  002a7	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1110
  002ab	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  002af	48 c1 e8 1a	 shr	 rax, 26
  002b3	48 83 e0 03	 and	 rax, 3
  002b7	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1111
  002ba	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  002be	48 c1 e0 02	 shl	 rax, 2
  002c2	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  002c5	48 0b c1	 or	 rax, rcx
  002c8	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  002ce	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1112
  002d2	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  002d6	48 c1 e0 1c	 shl	 rax, 28
  002da	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  002de	b9 08 00 00 00	 mov	 ecx, 8
  002e3	48 6b c9 06	 imul	 rcx, rcx, 6
  002e7	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  002ee	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1115
  002f2	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  002f6	48 c1 e8 1a	 shr	 rax, 26
  002fa	48 83 e0 03	 and	 rax, 3
  002fe	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1116
  00301	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00305	48 c1 e0 02	 shl	 rax, 2
  00309	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0030c	48 0b c1	 or	 rax, rcx
  0030f	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00315	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1117
  00319	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  0031d	48 c1 e8 1a	 shr	 rax, 26
  00321	48 83 e0 03	 and	 rax, 3
  00325	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1118
  00328	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  0032c	48 c1 e0 02	 shl	 rax, 2
  00330	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  00333	48 0b c1	 or	 rax, rcx
  00336	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  0033c	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1119
  00340	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00344	48 c1 e0 1c	 shl	 rax, 28
  00348	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  0034c	b9 08 00 00 00	 mov	 ecx, 8
  00351	48 6b c9 07	 imul	 rcx, rcx, 7
  00355	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  0035c	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1122
  00360	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00364	48 c1 e8 1a	 shr	 rax, 26
  00368	48 83 e0 03	 and	 rax, 3
  0036c	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1123
  0036f	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00373	48 c1 e0 02	 shl	 rax, 2
  00377	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0037a	48 0b c1	 or	 rax, rcx
  0037d	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00383	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1124
  00387	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  0038b	48 c1 e8 1a	 shr	 rax, 26
  0038f	48 83 e0 03	 and	 rax, 3
  00393	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1125
  00396	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  0039a	48 c1 e0 02	 shl	 rax, 2
  0039e	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  003a1	48 0b c1	 or	 rax, rcx
  003a4	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  003aa	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1126
  003ae	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  003b2	48 c1 e0 1c	 shl	 rax, 28
  003b6	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  003ba	b9 08 00 00 00	 mov	 ecx, 8
  003bf	48 6b c9 08	 imul	 rcx, rcx, 8
  003c3	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  003ca	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1129
  003ce	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  003d2	48 c1 e8 1b	 shr	 rax, 27
  003d6	48 83 e0 01	 and	 rax, 1
  003da	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1130
  003dd	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  003e1	48 d1 e0	 shl	 rax, 1
  003e4	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  003e7	48 0b c1	 or	 rax, rcx
  003ea	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  003f0	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1131
  003f4	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  003f8	48 c1 e8 1b	 shr	 rax, 27
  003fc	48 83 e0 01	 and	 rax, 1
  00400	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1132
  00403	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00407	48 d1 e0	 shl	 rax, 1
  0040a	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0040d	48 0b c1	 or	 rax, rcx
  00410	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00416	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1133
  0041a	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0041e	48 c1 e0 1c	 shl	 rax, 28
  00422	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  00426	b9 08 00 00 00	 mov	 ecx, 8
  0042b	48 6b c9 09	 imul	 rcx, rcx, 9
  0042f	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  00436	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1136
  0043a	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0043e	48 c1 e8 1a	 shr	 rax, 26
  00442	48 83 e0 03	 and	 rax, 3
  00446	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1137
  00449	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0044d	48 c1 e0 02	 shl	 rax, 2
  00451	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  00454	48 0b c1	 or	 rax, rcx
  00457	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  0045d	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1138
  00461	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00465	48 c1 e8 1a	 shr	 rax, 26
  00469	48 83 e0 03	 and	 rax, 3
  0046d	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1139
  00470	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00474	48 c1 e0 02	 shl	 rax, 2
  00478	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0047b	48 0b c1	 or	 rax, rcx
  0047e	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00484	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1140
  00488	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0048c	48 c1 e0 1c	 shl	 rax, 28
  00490	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  00494	b9 08 00 00 00	 mov	 ecx, 8
  00499	48 6b c9 0a	 imul	 rcx, rcx, 10
  0049d	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  004a4	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1143
  004a8	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  004ac	48 c1 e8 1a	 shr	 rax, 26
  004b0	48 83 e0 03	 and	 rax, 3
  004b4	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1144
  004b7	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  004bb	48 c1 e0 02	 shl	 rax, 2
  004bf	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  004c2	48 0b c1	 or	 rax, rcx
  004c5	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  004cb	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1145
  004cf	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  004d3	48 c1 e8 1a	 shr	 rax, 26
  004d7	48 83 e0 03	 and	 rax, 3
  004db	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1146
  004de	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  004e2	48 c1 e0 02	 shl	 rax, 2
  004e6	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  004e9	48 0b c1	 or	 rax, rcx
  004ec	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  004f2	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1147
  004f6	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  004fa	48 c1 e0 1c	 shl	 rax, 28
  004fe	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  00502	b9 08 00 00 00	 mov	 ecx, 8
  00507	48 6b c9 0b	 imul	 rcx, rcx, 11
  0050b	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  00512	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1150
  00516	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0051a	48 c1 e8 1a	 shr	 rax, 26
  0051e	48 83 e0 03	 and	 rax, 3
  00522	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1151
  00525	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00529	48 c1 e0 02	 shl	 rax, 2
  0052d	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  00530	48 0b c1	 or	 rax, rcx
  00533	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00539	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1152
  0053d	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00541	48 c1 e8 1a	 shr	 rax, 26
  00545	48 83 e0 03	 and	 rax, 3
  00549	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1153
  0054c	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00550	48 c1 e0 02	 shl	 rax, 2
  00554	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  00557	48 0b c1	 or	 rax, rcx
  0055a	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00560	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1154
  00564	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00568	48 c1 e0 1c	 shl	 rax, 28
  0056c	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  00570	b9 08 00 00 00	 mov	 ecx, 8
  00575	48 6b c9 0c	 imul	 rcx, rcx, 12
  00579	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  00580	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1157
  00584	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00588	48 c1 e8 1a	 shr	 rax, 26
  0058c	48 83 e0 03	 and	 rax, 3
  00590	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1158
  00593	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00597	48 c1 e0 02	 shl	 rax, 2
  0059b	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0059e	48 0b c1	 or	 rax, rcx
  005a1	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  005a7	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1159
  005ab	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  005af	48 c1 e8 1a	 shr	 rax, 26
  005b3	48 83 e0 03	 and	 rax, 3
  005b7	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1160
  005ba	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  005be	48 c1 e0 02	 shl	 rax, 2
  005c2	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  005c5	48 0b c1	 or	 rax, rcx
  005c8	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  005ce	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1161
  005d2	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  005d6	48 c1 e0 1c	 shl	 rax, 28
  005da	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  005de	b9 08 00 00 00	 mov	 ecx, 8
  005e3	48 6b c9 0d	 imul	 rcx, rcx, 13
  005e7	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  005ee	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1164
  005f2	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  005f6	48 c1 e8 1a	 shr	 rax, 26
  005fa	48 83 e0 03	 and	 rax, 3
  005fe	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1165
  00601	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00605	48 c1 e0 02	 shl	 rax, 2
  00609	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0060c	48 0b c1	 or	 rax, rcx
  0060f	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00615	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1166
  00619	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  0061d	48 c1 e8 1a	 shr	 rax, 26
  00621	48 83 e0 03	 and	 rax, 3
  00625	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1167
  00628	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  0062c	48 c1 e0 02	 shl	 rax, 2
  00630	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  00633	48 0b c1	 or	 rax, rcx
  00636	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  0063c	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1168
  00640	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00644	48 c1 e0 1c	 shl	 rax, 28
  00648	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  0064c	b9 08 00 00 00	 mov	 ecx, 8
  00651	48 6b c9 0e	 imul	 rcx, rcx, 14
  00655	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  0065c	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1171
  00660	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00664	48 c1 e8 1a	 shr	 rax, 26
  00668	48 83 e0 03	 and	 rax, 3
  0066c	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1172
  0066f	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  00673	48 c1 e0 02	 shl	 rax, 2
  00677	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0067a	48 0b c1	 or	 rax, rcx
  0067d	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00683	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1173
  00687	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  0068b	48 c1 e8 1a	 shr	 rax, 26
  0068f	48 83 e0 03	 and	 rax, 3
  00693	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1174
  00696	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  0069a	48 c1 e0 02	 shl	 rax, 2
  0069e	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  006a1	48 0b c1	 or	 rax, rcx
  006a4	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  006aa	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1175
  006ae	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  006b2	48 c1 e0 1c	 shl	 rax, 28
  006b6	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  006ba	b9 08 00 00 00	 mov	 ecx, 8
  006bf	48 6b c9 0f	 imul	 rcx, rcx, 15
  006c3	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  006ca	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1178
  006ce	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  006d2	48 c1 e8 1b	 shr	 rax, 27
  006d6	48 83 e0 01	 and	 rax, 1
  006da	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1179
  006dd	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  006e1	48 d1 e0	 shl	 rax, 1
  006e4	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  006e7	48 0b c1	 or	 rax, rcx
  006ea	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  006f0	48 89 45 08	 mov	 QWORD PTR k0Left$[rbp], rax
; Line 1180
  006f4	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  006f8	48 c1 e8 1b	 shr	 rax, 27
  006fc	48 83 e0 01	 and	 rax, 1
  00700	89 45 44	 mov	 DWORD PTR bitToKeep$[rbp], eax
; Line 1181
  00703	48 8b 45 28	 mov	 rax, QWORD PTR k0Right$[rbp]
  00707	48 d1 e0	 shl	 rax, 1
  0070a	8b 4d 44	 mov	 ecx, DWORD PTR bitToKeep$[rbp]
  0070d	48 0b c1	 or	 rax, rcx
  00710	48 25 ff ff ff
	0f		 and	 rax, 268435455		; 0fffffffH
  00716	48 89 45 28	 mov	 QWORD PTR k0Right$[rbp], rax
; Line 1182
  0071a	48 8b 45 08	 mov	 rax, QWORD PTR k0Left$[rbp]
  0071e	48 c1 e0 1c	 shl	 rax, 28
  00722	48 0b 45 28	 or	 rax, QWORD PTR k0Right$[rbp]
  00726	b9 08 00 00 00	 mov	 ecx, 8
  0072b	48 6b c9 10	 imul	 rcx, rcx, 16
  0072f	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR roundKeys$[rbp]
  00736	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
; Line 1184
  0073a	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  00741	e8 00 00 00 00	 call	 ?compressRoundKeys@@YAXQEA_K@Z ; compressRoundKeys
; Line 1186
  00746	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0074d	5f		 pop	 rdi
  0074e	5d		 pop	 rbp
  0074f	c3		 ret	 0
?makeRoundKeys@@YAX_KQEA_K@Z ENDP			; makeRoundKeys
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compressRoundKeys@@YAXQEA_K@Z
_TEXT	SEGMENT
key$ = 8
newKey$ = 40
bit$ = 72
roundKeys$ = 320
?compressRoundKeys@@YAXQEA_K@Z PROC			; compressRoundKeys, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 189
$LN771:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 193
  00036	b8 08 00 00 00	 mov	 eax, 8
  0003b	48 6b c0 01	 imul	 rax, rax, 1
  0003f	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  00046	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0004a	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 194
  0004e	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 195
  00056	48 c7 45 48 01
	00 00 00	 mov	 QWORD PTR bit$[rbp], 1
; Line 198
  0005e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00062	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  00066	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0006a	48 23 c8	 and	 rcx, rax
  0006d	48 8b c1	 mov	 rax, rcx
  00070	48 85 c0	 test	 rax, rax
  00073	74 16		 je	 SHORT $LN2@compressRo
  00075	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00079	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  0007d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00081	48 0b c8	 or	 rcx, rax
  00084	48 8b c1	 mov	 rax, rcx
  00087	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN2@compressRo:
; Line 199
  0008b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0008f	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  00093	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00097	48 23 c8	 and	 rcx, rax
  0009a	48 8b c1	 mov	 rax, rcx
  0009d	48 85 c0	 test	 rax, rax
  000a0	74 16		 je	 SHORT $LN3@compressRo
  000a2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  000a6	48 c1 e0 18	 shl	 rax, 24
  000aa	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  000ae	48 0b c8	 or	 rcx, rax
  000b1	48 8b c1	 mov	 rax, rcx
  000b4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN3@compressRo:
; Line 200
  000b8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  000bc	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  000c0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  000c4	48 23 c8	 and	 rcx, rax
  000c7	48 8b c1	 mov	 rax, rcx
  000ca	48 85 c0	 test	 rax, rax
  000cd	74 16		 je	 SHORT $LN4@compressRo
  000cf	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  000d3	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  000d7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  000db	48 0b c8	 or	 rcx, rax
  000de	48 8b c1	 mov	 rax, rcx
  000e1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN4@compressRo:
; Line 201
  000e5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  000e9	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  000ed	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  000f1	48 23 c8	 and	 rcx, rax
  000f4	48 8b c1	 mov	 rax, rcx
  000f7	48 85 c0	 test	 rax, rax
  000fa	74 16		 je	 SHORT $LN5@compressRo
  000fc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00100	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00104	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00108	48 0b c8	 or	 rcx, rax
  0010b	48 8b c1	 mov	 rax, rcx
  0010e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN5@compressRo:
; Line 202
  00112	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00116	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  0011a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0011e	48 23 c8	 and	 rcx, rax
  00121	48 8b c1	 mov	 rax, rcx
  00124	48 85 c0	 test	 rax, rax
  00127	74 16		 je	 SHORT $LN6@compressRo
  00129	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0012d	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  00131	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00135	48 0b c8	 or	 rcx, rax
  00138	48 8b c1	 mov	 rax, rcx
  0013b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN6@compressRo:
; Line 203
  0013f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00143	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  00147	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0014b	48 23 c8	 and	 rcx, rax
  0014e	48 8b c1	 mov	 rax, rcx
  00151	48 85 c0	 test	 rax, rax
  00154	74 16		 je	 SHORT $LN7@compressRo
  00156	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0015a	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  0015e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00162	48 0b c8	 or	 rcx, rax
  00165	48 8b c1	 mov	 rax, rcx
  00168	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN7@compressRo:
; Line 204
  0016c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00170	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  00174	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00178	48 23 c8	 and	 rcx, rax
  0017b	48 8b c1	 mov	 rax, rcx
  0017e	48 85 c0	 test	 rax, rax
  00181	74 16		 je	 SHORT $LN8@compressRo
  00183	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00187	48 c1 e0 1c	 shl	 rax, 28
  0018b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0018f	48 0b c8	 or	 rcx, rax
  00192	48 8b c1	 mov	 rax, rcx
  00195	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN8@compressRo:
; Line 205
  00199	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0019d	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  001a1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  001a5	48 23 c8	 and	 rcx, rax
  001a8	48 8b c1	 mov	 rax, rcx
  001ab	48 85 c0	 test	 rax, rax
  001ae	74 16		 je	 SHORT $LN9@compressRo
  001b0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  001b4	48 c1 e0 1e	 shl	 rax, 30
  001b8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  001bc	48 0b c8	 or	 rcx, rax
  001bf	48 8b c1	 mov	 rax, rcx
  001c2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN9@compressRo:
; Line 206
  001c6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  001ca	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  001ce	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  001d2	48 23 c8	 and	 rcx, rax
  001d5	48 8b c1	 mov	 rax, rcx
  001d8	48 85 c0	 test	 rax, rax
  001db	74 16		 je	 SHORT $LN10@compressRo
  001dd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  001e1	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  001e5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  001e9	48 0b c8	 or	 rcx, rax
  001ec	48 8b c1	 mov	 rax, rcx
  001ef	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN10@compressRo:
; Line 207
  001f3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  001f7	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  001fb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  001ff	48 23 c8	 and	 rcx, rax
  00202	48 8b c1	 mov	 rax, rcx
  00205	48 85 c0	 test	 rax, rax
  00208	74 16		 je	 SHORT $LN11@compressRo
  0020a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0020e	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  00212	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00216	48 0b c8	 or	 rcx, rax
  00219	48 8b c1	 mov	 rax, rcx
  0021c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN11@compressRo:
; Line 208
  00220	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00224	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  00228	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0022c	48 23 c8	 and	 rcx, rax
  0022f	48 8b c1	 mov	 rax, rcx
  00232	48 85 c0	 test	 rax, rax
  00235	74 16		 je	 SHORT $LN12@compressRo
  00237	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0023b	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  0023f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00243	48 0b c8	 or	 rcx, rax
  00246	48 8b c1	 mov	 rax, rcx
  00249	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN12@compressRo:
; Line 209
  0024d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00251	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  00255	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00259	48 23 c8	 and	 rcx, rax
  0025c	48 8b c1	 mov	 rax, rcx
  0025f	48 85 c0	 test	 rax, rax
  00262	74 16		 je	 SHORT $LN13@compressRo
  00264	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00268	48 c1 e0 19	 shl	 rax, 25
  0026c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00270	48 0b c8	 or	 rcx, rax
  00273	48 8b c1	 mov	 rax, rcx
  00276	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN13@compressRo:
; Line 210
  0027a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0027e	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  00282	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00286	48 23 c8	 and	 rcx, rax
  00289	48 8b c1	 mov	 rax, rcx
  0028c	48 85 c0	 test	 rax, rax
  0028f	74 16		 je	 SHORT $LN14@compressRo
  00291	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00295	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  00299	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0029d	48 0b c8	 or	 rcx, rax
  002a0	48 8b c1	 mov	 rax, rcx
  002a3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN14@compressRo:
; Line 211
  002a7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  002ab	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  002af	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  002b3	48 23 c8	 and	 rcx, rax
  002b6	48 8b c1	 mov	 rax, rcx
  002b9	48 85 c0	 test	 rax, rax
  002bc	74 16		 je	 SHORT $LN15@compressRo
  002be	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  002c2	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  002c6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  002ca	48 0b c8	 or	 rcx, rax
  002cd	48 8b c1	 mov	 rax, rcx
  002d0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN15@compressRo:
; Line 212
  002d4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  002d8	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  002dc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  002e0	48 23 c8	 and	 rcx, rax
  002e3	48 8b c1	 mov	 rax, rcx
  002e6	48 85 c0	 test	 rax, rax
  002e9	74 16		 je	 SHORT $LN16@compressRo
  002eb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  002ef	48 c1 e0 1d	 shl	 rax, 29
  002f3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  002f7	48 0b c8	 or	 rcx, rax
  002fa	48 8b c1	 mov	 rax, rcx
  002fd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN16@compressRo:
; Line 213
  00301	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00305	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  00309	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0030d	48 23 c8	 and	 rcx, rax
  00310	48 8b c1	 mov	 rax, rcx
  00313	48 85 c0	 test	 rax, rax
  00316	74 16		 je	 SHORT $LN17@compressRo
  00318	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0031c	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  00320	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00324	48 0b c8	 or	 rcx, rax
  00327	48 8b c1	 mov	 rax, rcx
  0032a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN17@compressRo:
; Line 214
  0032e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00332	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  00336	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0033a	48 23 c8	 and	 rcx, rax
  0033d	48 8b c1	 mov	 rax, rcx
  00340	48 85 c0	 test	 rax, rax
  00343	74 16		 je	 SHORT $LN18@compressRo
  00345	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00349	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  0034d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00351	48 0b c8	 or	 rcx, rax
  00354	48 8b c1	 mov	 rax, rcx
  00357	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN18@compressRo:
; Line 215
  0035b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0035f	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  00363	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00367	48 23 c8	 and	 rcx, rax
  0036a	48 8b c1	 mov	 rax, rcx
  0036d	48 85 c0	 test	 rax, rax
  00370	74 16		 je	 SHORT $LN19@compressRo
  00372	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00376	48 c1 e0 1a	 shl	 rax, 26
  0037a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0037e	48 0b c8	 or	 rcx, rax
  00381	48 8b c1	 mov	 rax, rcx
  00384	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN19@compressRo:
; Line 216
  00388	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0038c	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  00390	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00394	48 23 c8	 and	 rcx, rax
  00397	48 8b c1	 mov	 rax, rcx
  0039a	48 85 c0	 test	 rax, rax
  0039d	74 16		 je	 SHORT $LN20@compressRo
  0039f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  003a3	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  003a7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  003ab	48 0b c8	 or	 rcx, rax
  003ae	48 8b c1	 mov	 rax, rcx
  003b1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN20@compressRo:
; Line 217
  003b5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  003b9	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  003bd	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  003c1	48 23 c8	 and	 rcx, rax
  003c4	48 8b c1	 mov	 rax, rcx
  003c7	48 85 c0	 test	 rax, rax
  003ca	74 16		 je	 SHORT $LN21@compressRo
  003cc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  003d0	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  003d4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  003d8	48 0b c8	 or	 rcx, rax
  003db	48 8b c1	 mov	 rax, rcx
  003de	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN21@compressRo:
; Line 218
  003e2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  003e6	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  003ea	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  003ee	48 23 c8	 and	 rcx, rax
  003f1	48 8b c1	 mov	 rax, rcx
  003f4	48 85 c0	 test	 rax, rax
  003f7	74 16		 je	 SHORT $LN22@compressRo
  003f9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  003fd	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  00401	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00405	48 0b c8	 or	 rcx, rax
  00408	48 8b c1	 mov	 rax, rcx
  0040b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN22@compressRo:
; Line 219
  0040f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00413	48 c1 e0 1e	 shl	 rax, 30
  00417	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0041b	48 23 c8	 and	 rcx, rax
  0041e	48 8b c1	 mov	 rax, rcx
  00421	48 85 c0	 test	 rax, rax
  00424	74 16		 je	 SHORT $LN23@compressRo
  00426	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0042a	48 c1 e0 1f	 shl	 rax, 31
  0042e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00432	48 0b c8	 or	 rcx, rax
  00435	48 8b c1	 mov	 rax, rcx
  00438	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN23@compressRo:
; Line 220
  0043c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00440	48 c1 e0 1d	 shl	 rax, 29
  00444	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00448	48 23 c8	 and	 rcx, rax
  0044b	48 8b c1	 mov	 rax, rcx
  0044e	48 85 c0	 test	 rax, rax
  00451	74 16		 je	 SHORT $LN24@compressRo
  00453	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00457	48 c1 e0 1b	 shl	 rax, 27
  0045b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0045f	48 0b c8	 or	 rcx, rax
  00462	48 8b c1	 mov	 rax, rcx
  00465	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN24@compressRo:
; Line 221
  00469	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0046d	48 c1 e0 1c	 shl	 rax, 28
  00471	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00475	48 23 c8	 and	 rcx, rax
  00478	48 8b c1	 mov	 rax, rcx
  0047b	48 85 c0	 test	 rax, rax
  0047e	74 16		 je	 SHORT $LN25@compressRo
  00480	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00484	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00488	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0048c	48 0b c8	 or	 rcx, rax
  0048f	48 8b c1	 mov	 rax, rcx
  00492	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN25@compressRo:
; Line 222
  00496	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0049a	48 c1 e0 1b	 shl	 rax, 27
  0049e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  004a2	48 23 c8	 and	 rcx, rax
  004a5	48 8b c1	 mov	 rax, rcx
  004a8	48 85 c0	 test	 rax, rax
  004ab	74 15		 je	 SHORT $LN26@compressRo
  004ad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  004b1	48 d1 e0	 shl	 rax, 1
  004b4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  004b8	48 0b c8	 or	 rcx, rax
  004bb	48 8b c1	 mov	 rax, rcx
  004be	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN26@compressRo:
; Line 223
  004c2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  004c6	48 c1 e0 1a	 shl	 rax, 26
  004ca	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  004ce	48 23 c8	 and	 rcx, rax
  004d1	48 8b c1	 mov	 rax, rcx
  004d4	48 85 c0	 test	 rax, rax
  004d7	74 16		 je	 SHORT $LN27@compressRo
  004d9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  004dd	48 c1 e0 11	 shl	 rax, 17
  004e1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  004e5	48 0b c8	 or	 rcx, rax
  004e8	48 8b c1	 mov	 rax, rcx
  004eb	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN27@compressRo:
; Line 224
  004ef	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  004f3	48 c1 e0 19	 shl	 rax, 25
  004f7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  004fb	48 23 c8	 and	 rcx, rax
  004fe	48 8b c1	 mov	 rax, rcx
  00501	48 85 c0	 test	 rax, rax
  00504	74 16		 je	 SHORT $LN28@compressRo
  00506	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0050a	48 c1 e0 15	 shl	 rax, 21
  0050e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00512	48 0b c8	 or	 rcx, rax
  00515	48 8b c1	 mov	 rax, rcx
  00518	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN28@compressRo:
; Line 225
  0051c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00520	48 c1 e0 18	 shl	 rax, 24
  00524	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00528	48 23 c8	 and	 rcx, rax
  0052b	48 8b c1	 mov	 rax, rcx
  0052e	48 85 c0	 test	 rax, rax
  00531	74 12		 je	 SHORT $LN29@compressRo
  00533	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00537	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0053b	48 0b c8	 or	 rcx, rax
  0053e	48 8b c1	 mov	 rax, rcx
  00541	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN29@compressRo:
; Line 226
  00545	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00549	48 c1 e0 17	 shl	 rax, 23
  0054d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00551	48 23 c8	 and	 rcx, rax
  00554	48 8b c1	 mov	 rax, rcx
  00557	48 85 c0	 test	 rax, rax
  0055a	74 16		 je	 SHORT $LN30@compressRo
  0055c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00560	48 c1 e0 0d	 shl	 rax, 13
  00564	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00568	48 0b c8	 or	 rcx, rax
  0056b	48 8b c1	 mov	 rax, rcx
  0056e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN30@compressRo:
; Line 227
  00572	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00576	48 c1 e0 16	 shl	 rax, 22
  0057a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0057e	48 23 c8	 and	 rcx, rax
  00581	48 8b c1	 mov	 rax, rcx
  00584	48 85 c0	 test	 rax, rax
  00587	74 16		 je	 SHORT $LN31@compressRo
  00589	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0058d	48 c1 e0 07	 shl	 rax, 7
  00591	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00595	48 0b c8	 or	 rcx, rax
  00598	48 8b c1	 mov	 rax, rcx
  0059b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN31@compressRo:
; Line 228
  0059f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  005a3	48 c1 e0 14	 shl	 rax, 20
  005a7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  005ab	48 23 c8	 and	 rcx, rax
  005ae	48 8b c1	 mov	 rax, rcx
  005b1	48 85 c0	 test	 rax, rax
  005b4	74 16		 je	 SHORT $LN32@compressRo
  005b6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  005ba	48 c1 e0 02	 shl	 rax, 2
  005be	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  005c2	48 0b c8	 or	 rcx, rax
  005c5	48 8b c1	 mov	 rax, rcx
  005c8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN32@compressRo:
; Line 229
  005cc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  005d0	48 c1 e0 13	 shl	 rax, 19
  005d4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  005d8	48 23 c8	 and	 rcx, rax
  005db	48 8b c1	 mov	 rax, rcx
  005de	48 85 c0	 test	 rax, rax
  005e1	74 16		 je	 SHORT $LN33@compressRo
  005e3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  005e7	48 c1 e0 14	 shl	 rax, 20
  005eb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  005ef	48 0b c8	 or	 rcx, rax
  005f2	48 8b c1	 mov	 rax, rcx
  005f5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN33@compressRo:
; Line 230
  005f9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  005fd	48 c1 e0 11	 shl	 rax, 17
  00601	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00605	48 23 c8	 and	 rcx, rax
  00608	48 8b c1	 mov	 rax, rcx
  0060b	48 85 c0	 test	 rax, rax
  0060e	74 16		 je	 SHORT $LN34@compressRo
  00610	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00614	48 c1 e0 09	 shl	 rax, 9
  00618	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0061c	48 0b c8	 or	 rcx, rax
  0061f	48 8b c1	 mov	 rax, rcx
  00622	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN34@compressRo:
; Line 231
  00626	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0062a	48 c1 e0 10	 shl	 rax, 16
  0062e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00632	48 23 c8	 and	 rcx, rax
  00635	48 8b c1	 mov	 rax, rcx
  00638	48 85 c0	 test	 rax, rax
  0063b	74 16		 je	 SHORT $LN35@compressRo
  0063d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00641	48 c1 e0 10	 shl	 rax, 16
  00645	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00649	48 0b c8	 or	 rcx, rax
  0064c	48 8b c1	 mov	 rax, rcx
  0064f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN35@compressRo:
; Line 232
  00653	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00657	48 c1 e0 0f	 shl	 rax, 15
  0065b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0065f	48 23 c8	 and	 rcx, rax
  00662	48 8b c1	 mov	 rax, rcx
  00665	48 85 c0	 test	 rax, rax
  00668	74 16		 je	 SHORT $LN36@compressRo
  0066a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0066e	48 c1 e0 17	 shl	 rax, 23
  00672	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00676	48 0b c8	 or	 rcx, rax
  00679	48 8b c1	 mov	 rax, rcx
  0067c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN36@compressRo:
; Line 233
  00680	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00684	48 c1 e0 0e	 shl	 rax, 14
  00688	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0068c	48 23 c8	 and	 rcx, rax
  0068f	48 8b c1	 mov	 rax, rcx
  00692	48 85 c0	 test	 rax, rax
  00695	74 16		 je	 SHORT $LN37@compressRo
  00697	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0069b	48 c1 e0 04	 shl	 rax, 4
  0069f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  006a3	48 0b c8	 or	 rcx, rax
  006a6	48 8b c1	 mov	 rax, rcx
  006a9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN37@compressRo:
; Line 234
  006ad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  006b1	48 c1 e0 0c	 shl	 rax, 12
  006b5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  006b9	48 23 c8	 and	 rcx, rax
  006bc	48 8b c1	 mov	 rax, rcx
  006bf	48 85 c0	 test	 rax, rax
  006c2	74 16		 je	 SHORT $LN38@compressRo
  006c4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  006c8	48 c1 e0 0b	 shl	 rax, 11
  006cc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  006d0	48 0b c8	 or	 rcx, rax
  006d3	48 8b c1	 mov	 rax, rcx
  006d6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN38@compressRo:
; Line 235
  006da	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  006de	48 c1 e0 0b	 shl	 rax, 11
  006e2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  006e6	48 23 c8	 and	 rcx, rax
  006e9	48 8b c1	 mov	 rax, rcx
  006ec	48 85 c0	 test	 rax, rax
  006ef	74 16		 je	 SHORT $LN39@compressRo
  006f1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  006f5	48 c1 e0 0e	 shl	 rax, 14
  006f9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  006fd	48 0b c8	 or	 rcx, rax
  00700	48 8b c1	 mov	 rax, rcx
  00703	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN39@compressRo:
; Line 236
  00707	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0070b	48 c1 e0 0a	 shl	 rax, 10
  0070f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00713	48 23 c8	 and	 rcx, rax
  00716	48 8b c1	 mov	 rax, rcx
  00719	48 85 c0	 test	 rax, rax
  0071c	74 16		 je	 SHORT $LN40@compressRo
  0071e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00722	48 c1 e0 05	 shl	 rax, 5
  00726	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0072a	48 0b c8	 or	 rcx, rax
  0072d	48 8b c1	 mov	 rax, rcx
  00730	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN40@compressRo:
; Line 237
  00734	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00738	48 c1 e0 09	 shl	 rax, 9
  0073c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00740	48 23 c8	 and	 rcx, rax
  00743	48 8b c1	 mov	 rax, rcx
  00746	48 85 c0	 test	 rax, rax
  00749	74 16		 je	 SHORT $LN41@compressRo
  0074b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0074f	48 c1 e0 13	 shl	 rax, 19
  00753	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00757	48 0b c8	 or	 rcx, rax
  0075a	48 8b c1	 mov	 rax, rcx
  0075d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN41@compressRo:
; Line 238
  00761	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00765	48 c1 e0 08	 shl	 rax, 8
  00769	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0076d	48 23 c8	 and	 rcx, rax
  00770	48 8b c1	 mov	 rax, rcx
  00773	48 85 c0	 test	 rax, rax
  00776	74 16		 je	 SHORT $LN42@compressRo
  00778	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0077c	48 c1 e0 0c	 shl	 rax, 12
  00780	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00784	48 0b c8	 or	 rcx, rax
  00787	48 8b c1	 mov	 rax, rcx
  0078a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN42@compressRo:
; Line 239
  0078e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00792	48 c1 e0 07	 shl	 rax, 7
  00796	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0079a	48 23 c8	 and	 rcx, rax
  0079d	48 8b c1	 mov	 rax, rcx
  007a0	48 85 c0	 test	 rax, rax
  007a3	74 16		 je	 SHORT $LN43@compressRo
  007a5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  007a9	48 c1 e0 0a	 shl	 rax, 10
  007ad	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  007b1	48 0b c8	 or	 rcx, rax
  007b4	48 8b c1	 mov	 rax, rcx
  007b7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN43@compressRo:
; Line 240
  007bb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  007bf	48 c1 e0 06	 shl	 rax, 6
  007c3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  007c7	48 23 c8	 and	 rcx, rax
  007ca	48 8b c1	 mov	 rax, rcx
  007cd	48 85 c0	 test	 rax, rax
  007d0	74 16		 je	 SHORT $LN44@compressRo
  007d2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  007d6	48 c1 e0 03	 shl	 rax, 3
  007da	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  007de	48 0b c8	 or	 rcx, rax
  007e1	48 8b c1	 mov	 rax, rcx
  007e4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN44@compressRo:
; Line 241
  007e8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  007ec	48 c1 e0 05	 shl	 rax, 5
  007f0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  007f4	48 23 c8	 and	 rcx, rax
  007f7	48 8b c1	 mov	 rax, rcx
  007fa	48 85 c0	 test	 rax, rax
  007fd	74 16		 je	 SHORT $LN45@compressRo
  007ff	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00803	48 c1 e0 0f	 shl	 rax, 15
  00807	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0080b	48 0b c8	 or	 rcx, rax
  0080e	48 8b c1	 mov	 rax, rcx
  00811	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN45@compressRo:
; Line 242
  00815	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00819	48 c1 e0 04	 shl	 rax, 4
  0081d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00821	48 23 c8	 and	 rcx, rax
  00824	48 8b c1	 mov	 rax, rcx
  00827	48 85 c0	 test	 rax, rax
  0082a	74 16		 je	 SHORT $LN46@compressRo
  0082c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00830	48 c1 e0 16	 shl	 rax, 22
  00834	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00838	48 0b c8	 or	 rcx, rax
  0083b	48 8b c1	 mov	 rax, rcx
  0083e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN46@compressRo:
; Line 243
  00842	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00846	48 c1 e0 03	 shl	 rax, 3
  0084a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0084e	48 23 c8	 and	 rcx, rax
  00851	48 8b c1	 mov	 rax, rcx
  00854	48 85 c0	 test	 rax, rax
  00857	74 16		 je	 SHORT $LN47@compressRo
  00859	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0085d	48 c1 e0 06	 shl	 rax, 6
  00861	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00865	48 0b c8	 or	 rcx, rax
  00868	48 8b c1	 mov	 rax, rcx
  0086b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN47@compressRo:
; Line 244
  0086f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00873	48 d1 e0	 shl	 rax, 1
  00876	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0087a	48 23 c8	 and	 rcx, rax
  0087d	48 8b c1	 mov	 rax, rcx
  00880	48 85 c0	 test	 rax, rax
  00883	74 16		 je	 SHORT $LN48@compressRo
  00885	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00889	48 c1 e0 12	 shl	 rax, 18
  0088d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00891	48 0b c8	 or	 rcx, rax
  00894	48 8b c1	 mov	 rax, rcx
  00897	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN48@compressRo:
; Line 245
  0089b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0089f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  008a3	48 23 c8	 and	 rcx, rax
  008a6	48 8b c1	 mov	 rax, rcx
  008a9	48 85 c0	 test	 rax, rax
  008ac	74 16		 je	 SHORT $LN49@compressRo
  008ae	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  008b2	48 c1 e0 08	 shl	 rax, 8
  008b6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  008ba	48 0b c8	 or	 rcx, rax
  008bd	48 8b c1	 mov	 rax, rcx
  008c0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN49@compressRo:
; Line 246
  008c4	b8 08 00 00 00	 mov	 eax, 8
  008c9	48 6b c0 01	 imul	 rax, rax, 1
  008cd	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  008d4	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  008d8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 248
  008dc	b8 08 00 00 00	 mov	 eax, 8
  008e1	48 6b c0 02	 imul	 rax, rax, 2
  008e5	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  008ec	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  008f0	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 249
  008f4	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 252
  008fc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00900	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  00904	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00908	48 23 c8	 and	 rcx, rax
  0090b	48 8b c1	 mov	 rax, rcx
  0090e	48 85 c0	 test	 rax, rax
  00911	74 16		 je	 SHORT $LN50@compressRo
  00913	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00917	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  0091b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0091f	48 0b c8	 or	 rcx, rax
  00922	48 8b c1	 mov	 rax, rcx
  00925	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN50@compressRo:
; Line 253
  00929	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0092d	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  00931	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00935	48 23 c8	 and	 rcx, rax
  00938	48 8b c1	 mov	 rax, rcx
  0093b	48 85 c0	 test	 rax, rax
  0093e	74 16		 je	 SHORT $LN51@compressRo
  00940	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00944	48 c1 e0 18	 shl	 rax, 24
  00948	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0094c	48 0b c8	 or	 rcx, rax
  0094f	48 8b c1	 mov	 rax, rcx
  00952	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN51@compressRo:
; Line 254
  00956	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0095a	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  0095e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00962	48 23 c8	 and	 rcx, rax
  00965	48 8b c1	 mov	 rax, rcx
  00968	48 85 c0	 test	 rax, rax
  0096b	74 16		 je	 SHORT $LN52@compressRo
  0096d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00971	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  00975	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00979	48 0b c8	 or	 rcx, rax
  0097c	48 8b c1	 mov	 rax, rcx
  0097f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN52@compressRo:
; Line 255
  00983	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00987	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  0098b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0098f	48 23 c8	 and	 rcx, rax
  00992	48 8b c1	 mov	 rax, rcx
  00995	48 85 c0	 test	 rax, rax
  00998	74 16		 je	 SHORT $LN53@compressRo
  0099a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0099e	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  009a2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  009a6	48 0b c8	 or	 rcx, rax
  009a9	48 8b c1	 mov	 rax, rcx
  009ac	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN53@compressRo:
; Line 256
  009b0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  009b4	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  009b8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  009bc	48 23 c8	 and	 rcx, rax
  009bf	48 8b c1	 mov	 rax, rcx
  009c2	48 85 c0	 test	 rax, rax
  009c5	74 16		 je	 SHORT $LN54@compressRo
  009c7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  009cb	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  009cf	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  009d3	48 0b c8	 or	 rcx, rax
  009d6	48 8b c1	 mov	 rax, rcx
  009d9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN54@compressRo:
; Line 257
  009dd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  009e1	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  009e5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  009e9	48 23 c8	 and	 rcx, rax
  009ec	48 8b c1	 mov	 rax, rcx
  009ef	48 85 c0	 test	 rax, rax
  009f2	74 16		 je	 SHORT $LN55@compressRo
  009f4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  009f8	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  009fc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00a00	48 0b c8	 or	 rcx, rax
  00a03	48 8b c1	 mov	 rax, rcx
  00a06	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN55@compressRo:
; Line 258
  00a0a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00a0e	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  00a12	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00a16	48 23 c8	 and	 rcx, rax
  00a19	48 8b c1	 mov	 rax, rcx
  00a1c	48 85 c0	 test	 rax, rax
  00a1f	74 16		 je	 SHORT $LN56@compressRo
  00a21	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00a25	48 c1 e0 1c	 shl	 rax, 28
  00a29	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00a2d	48 0b c8	 or	 rcx, rax
  00a30	48 8b c1	 mov	 rax, rcx
  00a33	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN56@compressRo:
; Line 259
  00a37	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00a3b	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00a3f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00a43	48 23 c8	 and	 rcx, rax
  00a46	48 8b c1	 mov	 rax, rcx
  00a49	48 85 c0	 test	 rax, rax
  00a4c	74 16		 je	 SHORT $LN57@compressRo
  00a4e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00a52	48 c1 e0 1e	 shl	 rax, 30
  00a56	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00a5a	48 0b c8	 or	 rcx, rax
  00a5d	48 8b c1	 mov	 rax, rcx
  00a60	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN57@compressRo:
; Line 260
  00a64	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00a68	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  00a6c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00a70	48 23 c8	 and	 rcx, rax
  00a73	48 8b c1	 mov	 rax, rcx
  00a76	48 85 c0	 test	 rax, rax
  00a79	74 16		 je	 SHORT $LN58@compressRo
  00a7b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00a7f	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  00a83	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00a87	48 0b c8	 or	 rcx, rax
  00a8a	48 8b c1	 mov	 rax, rcx
  00a8d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN58@compressRo:
; Line 261
  00a91	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00a95	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  00a99	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00a9d	48 23 c8	 and	 rcx, rax
  00aa0	48 8b c1	 mov	 rax, rcx
  00aa3	48 85 c0	 test	 rax, rax
  00aa6	74 16		 je	 SHORT $LN59@compressRo
  00aa8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00aac	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  00ab0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00ab4	48 0b c8	 or	 rcx, rax
  00ab7	48 8b c1	 mov	 rax, rcx
  00aba	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN59@compressRo:
; Line 262
  00abe	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00ac2	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  00ac6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00aca	48 23 c8	 and	 rcx, rax
  00acd	48 8b c1	 mov	 rax, rcx
  00ad0	48 85 c0	 test	 rax, rax
  00ad3	74 16		 je	 SHORT $LN60@compressRo
  00ad5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00ad9	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  00add	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00ae1	48 0b c8	 or	 rcx, rax
  00ae4	48 8b c1	 mov	 rax, rcx
  00ae7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN60@compressRo:
; Line 263
  00aeb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00aef	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  00af3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00af7	48 23 c8	 and	 rcx, rax
  00afa	48 8b c1	 mov	 rax, rcx
  00afd	48 85 c0	 test	 rax, rax
  00b00	74 16		 je	 SHORT $LN61@compressRo
  00b02	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00b06	48 c1 e0 19	 shl	 rax, 25
  00b0a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00b0e	48 0b c8	 or	 rcx, rax
  00b11	48 8b c1	 mov	 rax, rcx
  00b14	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN61@compressRo:
; Line 264
  00b18	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00b1c	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  00b20	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00b24	48 23 c8	 and	 rcx, rax
  00b27	48 8b c1	 mov	 rax, rcx
  00b2a	48 85 c0	 test	 rax, rax
  00b2d	74 16		 je	 SHORT $LN62@compressRo
  00b2f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00b33	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  00b37	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00b3b	48 0b c8	 or	 rcx, rax
  00b3e	48 8b c1	 mov	 rax, rcx
  00b41	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN62@compressRo:
; Line 265
  00b45	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00b49	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  00b4d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00b51	48 23 c8	 and	 rcx, rax
  00b54	48 8b c1	 mov	 rax, rcx
  00b57	48 85 c0	 test	 rax, rax
  00b5a	74 16		 je	 SHORT $LN63@compressRo
  00b5c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00b60	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  00b64	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00b68	48 0b c8	 or	 rcx, rax
  00b6b	48 8b c1	 mov	 rax, rcx
  00b6e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN63@compressRo:
; Line 266
  00b72	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00b76	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00b7a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00b7e	48 23 c8	 and	 rcx, rax
  00b81	48 8b c1	 mov	 rax, rcx
  00b84	48 85 c0	 test	 rax, rax
  00b87	74 16		 je	 SHORT $LN64@compressRo
  00b89	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00b8d	48 c1 e0 1d	 shl	 rax, 29
  00b91	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00b95	48 0b c8	 or	 rcx, rax
  00b98	48 8b c1	 mov	 rax, rcx
  00b9b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN64@compressRo:
; Line 267
  00b9f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00ba3	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  00ba7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00bab	48 23 c8	 and	 rcx, rax
  00bae	48 8b c1	 mov	 rax, rcx
  00bb1	48 85 c0	 test	 rax, rax
  00bb4	74 16		 je	 SHORT $LN65@compressRo
  00bb6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00bba	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  00bbe	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00bc2	48 0b c8	 or	 rcx, rax
  00bc5	48 8b c1	 mov	 rax, rcx
  00bc8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN65@compressRo:
; Line 268
  00bcc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00bd0	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  00bd4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00bd8	48 23 c8	 and	 rcx, rax
  00bdb	48 8b c1	 mov	 rax, rcx
  00bde	48 85 c0	 test	 rax, rax
  00be1	74 16		 je	 SHORT $LN66@compressRo
  00be3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00be7	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  00beb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00bef	48 0b c8	 or	 rcx, rax
  00bf2	48 8b c1	 mov	 rax, rcx
  00bf5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN66@compressRo:
; Line 269
  00bf9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00bfd	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  00c01	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00c05	48 23 c8	 and	 rcx, rax
  00c08	48 8b c1	 mov	 rax, rcx
  00c0b	48 85 c0	 test	 rax, rax
  00c0e	74 16		 je	 SHORT $LN67@compressRo
  00c10	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00c14	48 c1 e0 1a	 shl	 rax, 26
  00c18	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00c1c	48 0b c8	 or	 rcx, rax
  00c1f	48 8b c1	 mov	 rax, rcx
  00c22	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN67@compressRo:
; Line 270
  00c26	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00c2a	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  00c2e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00c32	48 23 c8	 and	 rcx, rax
  00c35	48 8b c1	 mov	 rax, rcx
  00c38	48 85 c0	 test	 rax, rax
  00c3b	74 16		 je	 SHORT $LN68@compressRo
  00c3d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00c41	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  00c45	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00c49	48 0b c8	 or	 rcx, rax
  00c4c	48 8b c1	 mov	 rax, rcx
  00c4f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN68@compressRo:
; Line 271
  00c53	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00c57	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  00c5b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00c5f	48 23 c8	 and	 rcx, rax
  00c62	48 8b c1	 mov	 rax, rcx
  00c65	48 85 c0	 test	 rax, rax
  00c68	74 16		 je	 SHORT $LN69@compressRo
  00c6a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00c6e	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  00c72	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00c76	48 0b c8	 or	 rcx, rax
  00c79	48 8b c1	 mov	 rax, rcx
  00c7c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN69@compressRo:
; Line 272
  00c80	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00c84	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00c88	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00c8c	48 23 c8	 and	 rcx, rax
  00c8f	48 8b c1	 mov	 rax, rcx
  00c92	48 85 c0	 test	 rax, rax
  00c95	74 16		 je	 SHORT $LN70@compressRo
  00c97	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00c9b	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  00c9f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00ca3	48 0b c8	 or	 rcx, rax
  00ca6	48 8b c1	 mov	 rax, rcx
  00ca9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN70@compressRo:
; Line 273
  00cad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00cb1	48 c1 e0 1e	 shl	 rax, 30
  00cb5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00cb9	48 23 c8	 and	 rcx, rax
  00cbc	48 8b c1	 mov	 rax, rcx
  00cbf	48 85 c0	 test	 rax, rax
  00cc2	74 16		 je	 SHORT $LN71@compressRo
  00cc4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00cc8	48 c1 e0 1f	 shl	 rax, 31
  00ccc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00cd0	48 0b c8	 or	 rcx, rax
  00cd3	48 8b c1	 mov	 rax, rcx
  00cd6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN71@compressRo:
; Line 274
  00cda	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00cde	48 c1 e0 1d	 shl	 rax, 29
  00ce2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00ce6	48 23 c8	 and	 rcx, rax
  00ce9	48 8b c1	 mov	 rax, rcx
  00cec	48 85 c0	 test	 rax, rax
  00cef	74 16		 je	 SHORT $LN72@compressRo
  00cf1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00cf5	48 c1 e0 1b	 shl	 rax, 27
  00cf9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00cfd	48 0b c8	 or	 rcx, rax
  00d00	48 8b c1	 mov	 rax, rcx
  00d03	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN72@compressRo:
; Line 275
  00d07	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00d0b	48 c1 e0 1c	 shl	 rax, 28
  00d0f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00d13	48 23 c8	 and	 rcx, rax
  00d16	48 8b c1	 mov	 rax, rcx
  00d19	48 85 c0	 test	 rax, rax
  00d1c	74 16		 je	 SHORT $LN73@compressRo
  00d1e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00d22	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00d26	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00d2a	48 0b c8	 or	 rcx, rax
  00d2d	48 8b c1	 mov	 rax, rcx
  00d30	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN73@compressRo:
; Line 276
  00d34	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00d38	48 c1 e0 1b	 shl	 rax, 27
  00d3c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00d40	48 23 c8	 and	 rcx, rax
  00d43	48 8b c1	 mov	 rax, rcx
  00d46	48 85 c0	 test	 rax, rax
  00d49	74 15		 je	 SHORT $LN74@compressRo
  00d4b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00d4f	48 d1 e0	 shl	 rax, 1
  00d52	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00d56	48 0b c8	 or	 rcx, rax
  00d59	48 8b c1	 mov	 rax, rcx
  00d5c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN74@compressRo:
; Line 277
  00d60	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00d64	48 c1 e0 1a	 shl	 rax, 26
  00d68	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00d6c	48 23 c8	 and	 rcx, rax
  00d6f	48 8b c1	 mov	 rax, rcx
  00d72	48 85 c0	 test	 rax, rax
  00d75	74 16		 je	 SHORT $LN75@compressRo
  00d77	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00d7b	48 c1 e0 11	 shl	 rax, 17
  00d7f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00d83	48 0b c8	 or	 rcx, rax
  00d86	48 8b c1	 mov	 rax, rcx
  00d89	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN75@compressRo:
; Line 278
  00d8d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00d91	48 c1 e0 19	 shl	 rax, 25
  00d95	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00d99	48 23 c8	 and	 rcx, rax
  00d9c	48 8b c1	 mov	 rax, rcx
  00d9f	48 85 c0	 test	 rax, rax
  00da2	74 16		 je	 SHORT $LN76@compressRo
  00da4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00da8	48 c1 e0 15	 shl	 rax, 21
  00dac	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00db0	48 0b c8	 or	 rcx, rax
  00db3	48 8b c1	 mov	 rax, rcx
  00db6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN76@compressRo:
; Line 279
  00dba	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00dbe	48 c1 e0 18	 shl	 rax, 24
  00dc2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00dc6	48 23 c8	 and	 rcx, rax
  00dc9	48 8b c1	 mov	 rax, rcx
  00dcc	48 85 c0	 test	 rax, rax
  00dcf	74 12		 je	 SHORT $LN77@compressRo
  00dd1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00dd5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00dd9	48 0b c8	 or	 rcx, rax
  00ddc	48 8b c1	 mov	 rax, rcx
  00ddf	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN77@compressRo:
; Line 280
  00de3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00de7	48 c1 e0 17	 shl	 rax, 23
  00deb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00def	48 23 c8	 and	 rcx, rax
  00df2	48 8b c1	 mov	 rax, rcx
  00df5	48 85 c0	 test	 rax, rax
  00df8	74 16		 je	 SHORT $LN78@compressRo
  00dfa	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00dfe	48 c1 e0 0d	 shl	 rax, 13
  00e02	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00e06	48 0b c8	 or	 rcx, rax
  00e09	48 8b c1	 mov	 rax, rcx
  00e0c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN78@compressRo:
; Line 281
  00e10	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00e14	48 c1 e0 16	 shl	 rax, 22
  00e18	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00e1c	48 23 c8	 and	 rcx, rax
  00e1f	48 8b c1	 mov	 rax, rcx
  00e22	48 85 c0	 test	 rax, rax
  00e25	74 16		 je	 SHORT $LN79@compressRo
  00e27	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00e2b	48 c1 e0 07	 shl	 rax, 7
  00e2f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00e33	48 0b c8	 or	 rcx, rax
  00e36	48 8b c1	 mov	 rax, rcx
  00e39	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN79@compressRo:
; Line 282
  00e3d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00e41	48 c1 e0 14	 shl	 rax, 20
  00e45	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00e49	48 23 c8	 and	 rcx, rax
  00e4c	48 8b c1	 mov	 rax, rcx
  00e4f	48 85 c0	 test	 rax, rax
  00e52	74 16		 je	 SHORT $LN80@compressRo
  00e54	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00e58	48 c1 e0 02	 shl	 rax, 2
  00e5c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00e60	48 0b c8	 or	 rcx, rax
  00e63	48 8b c1	 mov	 rax, rcx
  00e66	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN80@compressRo:
; Line 283
  00e6a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00e6e	48 c1 e0 13	 shl	 rax, 19
  00e72	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00e76	48 23 c8	 and	 rcx, rax
  00e79	48 8b c1	 mov	 rax, rcx
  00e7c	48 85 c0	 test	 rax, rax
  00e7f	74 16		 je	 SHORT $LN81@compressRo
  00e81	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00e85	48 c1 e0 14	 shl	 rax, 20
  00e89	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00e8d	48 0b c8	 or	 rcx, rax
  00e90	48 8b c1	 mov	 rax, rcx
  00e93	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN81@compressRo:
; Line 284
  00e97	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00e9b	48 c1 e0 11	 shl	 rax, 17
  00e9f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00ea3	48 23 c8	 and	 rcx, rax
  00ea6	48 8b c1	 mov	 rax, rcx
  00ea9	48 85 c0	 test	 rax, rax
  00eac	74 16		 je	 SHORT $LN82@compressRo
  00eae	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00eb2	48 c1 e0 09	 shl	 rax, 9
  00eb6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00eba	48 0b c8	 or	 rcx, rax
  00ebd	48 8b c1	 mov	 rax, rcx
  00ec0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN82@compressRo:
; Line 285
  00ec4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00ec8	48 c1 e0 10	 shl	 rax, 16
  00ecc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00ed0	48 23 c8	 and	 rcx, rax
  00ed3	48 8b c1	 mov	 rax, rcx
  00ed6	48 85 c0	 test	 rax, rax
  00ed9	74 16		 je	 SHORT $LN83@compressRo
  00edb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00edf	48 c1 e0 10	 shl	 rax, 16
  00ee3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00ee7	48 0b c8	 or	 rcx, rax
  00eea	48 8b c1	 mov	 rax, rcx
  00eed	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN83@compressRo:
; Line 286
  00ef1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00ef5	48 c1 e0 0f	 shl	 rax, 15
  00ef9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00efd	48 23 c8	 and	 rcx, rax
  00f00	48 8b c1	 mov	 rax, rcx
  00f03	48 85 c0	 test	 rax, rax
  00f06	74 16		 je	 SHORT $LN84@compressRo
  00f08	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00f0c	48 c1 e0 17	 shl	 rax, 23
  00f10	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00f14	48 0b c8	 or	 rcx, rax
  00f17	48 8b c1	 mov	 rax, rcx
  00f1a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN84@compressRo:
; Line 287
  00f1e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00f22	48 c1 e0 0e	 shl	 rax, 14
  00f26	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00f2a	48 23 c8	 and	 rcx, rax
  00f2d	48 8b c1	 mov	 rax, rcx
  00f30	48 85 c0	 test	 rax, rax
  00f33	74 16		 je	 SHORT $LN85@compressRo
  00f35	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00f39	48 c1 e0 04	 shl	 rax, 4
  00f3d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00f41	48 0b c8	 or	 rcx, rax
  00f44	48 8b c1	 mov	 rax, rcx
  00f47	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN85@compressRo:
; Line 288
  00f4b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00f4f	48 c1 e0 0c	 shl	 rax, 12
  00f53	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00f57	48 23 c8	 and	 rcx, rax
  00f5a	48 8b c1	 mov	 rax, rcx
  00f5d	48 85 c0	 test	 rax, rax
  00f60	74 16		 je	 SHORT $LN86@compressRo
  00f62	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00f66	48 c1 e0 0b	 shl	 rax, 11
  00f6a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00f6e	48 0b c8	 or	 rcx, rax
  00f71	48 8b c1	 mov	 rax, rcx
  00f74	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN86@compressRo:
; Line 289
  00f78	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00f7c	48 c1 e0 0b	 shl	 rax, 11
  00f80	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00f84	48 23 c8	 and	 rcx, rax
  00f87	48 8b c1	 mov	 rax, rcx
  00f8a	48 85 c0	 test	 rax, rax
  00f8d	74 16		 je	 SHORT $LN87@compressRo
  00f8f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00f93	48 c1 e0 0e	 shl	 rax, 14
  00f97	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00f9b	48 0b c8	 or	 rcx, rax
  00f9e	48 8b c1	 mov	 rax, rcx
  00fa1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN87@compressRo:
; Line 290
  00fa5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00fa9	48 c1 e0 0a	 shl	 rax, 10
  00fad	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00fb1	48 23 c8	 and	 rcx, rax
  00fb4	48 8b c1	 mov	 rax, rcx
  00fb7	48 85 c0	 test	 rax, rax
  00fba	74 16		 je	 SHORT $LN88@compressRo
  00fbc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00fc0	48 c1 e0 05	 shl	 rax, 5
  00fc4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00fc8	48 0b c8	 or	 rcx, rax
  00fcb	48 8b c1	 mov	 rax, rcx
  00fce	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN88@compressRo:
; Line 291
  00fd2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00fd6	48 c1 e0 09	 shl	 rax, 9
  00fda	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  00fde	48 23 c8	 and	 rcx, rax
  00fe1	48 8b c1	 mov	 rax, rcx
  00fe4	48 85 c0	 test	 rax, rax
  00fe7	74 16		 je	 SHORT $LN89@compressRo
  00fe9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  00fed	48 c1 e0 13	 shl	 rax, 19
  00ff1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  00ff5	48 0b c8	 or	 rcx, rax
  00ff8	48 8b c1	 mov	 rax, rcx
  00ffb	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN89@compressRo:
; Line 292
  00fff	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01003	48 c1 e0 08	 shl	 rax, 8
  01007	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0100b	48 23 c8	 and	 rcx, rax
  0100e	48 8b c1	 mov	 rax, rcx
  01011	48 85 c0	 test	 rax, rax
  01014	74 16		 je	 SHORT $LN90@compressRo
  01016	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0101a	48 c1 e0 0c	 shl	 rax, 12
  0101e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01022	48 0b c8	 or	 rcx, rax
  01025	48 8b c1	 mov	 rax, rcx
  01028	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN90@compressRo:
; Line 293
  0102c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01030	48 c1 e0 07	 shl	 rax, 7
  01034	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01038	48 23 c8	 and	 rcx, rax
  0103b	48 8b c1	 mov	 rax, rcx
  0103e	48 85 c0	 test	 rax, rax
  01041	74 16		 je	 SHORT $LN91@compressRo
  01043	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01047	48 c1 e0 0a	 shl	 rax, 10
  0104b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0104f	48 0b c8	 or	 rcx, rax
  01052	48 8b c1	 mov	 rax, rcx
  01055	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN91@compressRo:
; Line 294
  01059	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0105d	48 c1 e0 06	 shl	 rax, 6
  01061	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01065	48 23 c8	 and	 rcx, rax
  01068	48 8b c1	 mov	 rax, rcx
  0106b	48 85 c0	 test	 rax, rax
  0106e	74 16		 je	 SHORT $LN92@compressRo
  01070	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01074	48 c1 e0 03	 shl	 rax, 3
  01078	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0107c	48 0b c8	 or	 rcx, rax
  0107f	48 8b c1	 mov	 rax, rcx
  01082	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN92@compressRo:
; Line 295
  01086	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0108a	48 c1 e0 05	 shl	 rax, 5
  0108e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01092	48 23 c8	 and	 rcx, rax
  01095	48 8b c1	 mov	 rax, rcx
  01098	48 85 c0	 test	 rax, rax
  0109b	74 16		 je	 SHORT $LN93@compressRo
  0109d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  010a1	48 c1 e0 0f	 shl	 rax, 15
  010a5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  010a9	48 0b c8	 or	 rcx, rax
  010ac	48 8b c1	 mov	 rax, rcx
  010af	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN93@compressRo:
; Line 296
  010b3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  010b7	48 c1 e0 04	 shl	 rax, 4
  010bb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  010bf	48 23 c8	 and	 rcx, rax
  010c2	48 8b c1	 mov	 rax, rcx
  010c5	48 85 c0	 test	 rax, rax
  010c8	74 16		 je	 SHORT $LN94@compressRo
  010ca	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  010ce	48 c1 e0 16	 shl	 rax, 22
  010d2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  010d6	48 0b c8	 or	 rcx, rax
  010d9	48 8b c1	 mov	 rax, rcx
  010dc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN94@compressRo:
; Line 297
  010e0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  010e4	48 c1 e0 03	 shl	 rax, 3
  010e8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  010ec	48 23 c8	 and	 rcx, rax
  010ef	48 8b c1	 mov	 rax, rcx
  010f2	48 85 c0	 test	 rax, rax
  010f5	74 16		 je	 SHORT $LN95@compressRo
  010f7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  010fb	48 c1 e0 06	 shl	 rax, 6
  010ff	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01103	48 0b c8	 or	 rcx, rax
  01106	48 8b c1	 mov	 rax, rcx
  01109	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN95@compressRo:
; Line 298
  0110d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01111	48 d1 e0	 shl	 rax, 1
  01114	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01118	48 23 c8	 and	 rcx, rax
  0111b	48 8b c1	 mov	 rax, rcx
  0111e	48 85 c0	 test	 rax, rax
  01121	74 16		 je	 SHORT $LN96@compressRo
  01123	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01127	48 c1 e0 12	 shl	 rax, 18
  0112b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0112f	48 0b c8	 or	 rcx, rax
  01132	48 8b c1	 mov	 rax, rcx
  01135	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN96@compressRo:
; Line 299
  01139	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0113d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01141	48 23 c8	 and	 rcx, rax
  01144	48 8b c1	 mov	 rax, rcx
  01147	48 85 c0	 test	 rax, rax
  0114a	74 16		 je	 SHORT $LN97@compressRo
  0114c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01150	48 c1 e0 08	 shl	 rax, 8
  01154	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01158	48 0b c8	 or	 rcx, rax
  0115b	48 8b c1	 mov	 rax, rcx
  0115e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN97@compressRo:
; Line 300
  01162	b8 08 00 00 00	 mov	 eax, 8
  01167	48 6b c0 02	 imul	 rax, rax, 2
  0116b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  01172	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  01176	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 302
  0117a	b8 08 00 00 00	 mov	 eax, 8
  0117f	48 6b c0 03	 imul	 rax, rax, 3
  01183	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  0118a	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0118e	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 303
  01192	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 306
  0119a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0119e	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  011a2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  011a6	48 23 c8	 and	 rcx, rax
  011a9	48 8b c1	 mov	 rax, rcx
  011ac	48 85 c0	 test	 rax, rax
  011af	74 16		 je	 SHORT $LN98@compressRo
  011b1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  011b5	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  011b9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  011bd	48 0b c8	 or	 rcx, rax
  011c0	48 8b c1	 mov	 rax, rcx
  011c3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN98@compressRo:
; Line 307
  011c7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  011cb	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  011cf	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  011d3	48 23 c8	 and	 rcx, rax
  011d6	48 8b c1	 mov	 rax, rcx
  011d9	48 85 c0	 test	 rax, rax
  011dc	74 16		 je	 SHORT $LN99@compressRo
  011de	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  011e2	48 c1 e0 18	 shl	 rax, 24
  011e6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  011ea	48 0b c8	 or	 rcx, rax
  011ed	48 8b c1	 mov	 rax, rcx
  011f0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN99@compressRo:
; Line 308
  011f4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  011f8	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  011fc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01200	48 23 c8	 and	 rcx, rax
  01203	48 8b c1	 mov	 rax, rcx
  01206	48 85 c0	 test	 rax, rax
  01209	74 16		 je	 SHORT $LN100@compressRo
  0120b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0120f	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  01213	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01217	48 0b c8	 or	 rcx, rax
  0121a	48 8b c1	 mov	 rax, rcx
  0121d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN100@compressRo:
; Line 309
  01221	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01225	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  01229	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0122d	48 23 c8	 and	 rcx, rax
  01230	48 8b c1	 mov	 rax, rcx
  01233	48 85 c0	 test	 rax, rax
  01236	74 16		 je	 SHORT $LN101@compressRo
  01238	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0123c	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  01240	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01244	48 0b c8	 or	 rcx, rax
  01247	48 8b c1	 mov	 rax, rcx
  0124a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN101@compressRo:
; Line 310
  0124e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01252	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  01256	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0125a	48 23 c8	 and	 rcx, rax
  0125d	48 8b c1	 mov	 rax, rcx
  01260	48 85 c0	 test	 rax, rax
  01263	74 16		 je	 SHORT $LN102@compressRo
  01265	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01269	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  0126d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01271	48 0b c8	 or	 rcx, rax
  01274	48 8b c1	 mov	 rax, rcx
  01277	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN102@compressRo:
; Line 311
  0127b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0127f	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  01283	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01287	48 23 c8	 and	 rcx, rax
  0128a	48 8b c1	 mov	 rax, rcx
  0128d	48 85 c0	 test	 rax, rax
  01290	74 16		 je	 SHORT $LN103@compressRo
  01292	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01296	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  0129a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0129e	48 0b c8	 or	 rcx, rax
  012a1	48 8b c1	 mov	 rax, rcx
  012a4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN103@compressRo:
; Line 312
  012a8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  012ac	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  012b0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  012b4	48 23 c8	 and	 rcx, rax
  012b7	48 8b c1	 mov	 rax, rcx
  012ba	48 85 c0	 test	 rax, rax
  012bd	74 16		 je	 SHORT $LN104@compressRo
  012bf	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  012c3	48 c1 e0 1c	 shl	 rax, 28
  012c7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  012cb	48 0b c8	 or	 rcx, rax
  012ce	48 8b c1	 mov	 rax, rcx
  012d1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN104@compressRo:
; Line 313
  012d5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  012d9	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  012dd	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  012e1	48 23 c8	 and	 rcx, rax
  012e4	48 8b c1	 mov	 rax, rcx
  012e7	48 85 c0	 test	 rax, rax
  012ea	74 16		 je	 SHORT $LN105@compressRo
  012ec	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  012f0	48 c1 e0 1e	 shl	 rax, 30
  012f4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  012f8	48 0b c8	 or	 rcx, rax
  012fb	48 8b c1	 mov	 rax, rcx
  012fe	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN105@compressRo:
; Line 314
  01302	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01306	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  0130a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0130e	48 23 c8	 and	 rcx, rax
  01311	48 8b c1	 mov	 rax, rcx
  01314	48 85 c0	 test	 rax, rax
  01317	74 16		 je	 SHORT $LN106@compressRo
  01319	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0131d	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  01321	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01325	48 0b c8	 or	 rcx, rax
  01328	48 8b c1	 mov	 rax, rcx
  0132b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN106@compressRo:
; Line 315
  0132f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01333	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  01337	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0133b	48 23 c8	 and	 rcx, rax
  0133e	48 8b c1	 mov	 rax, rcx
  01341	48 85 c0	 test	 rax, rax
  01344	74 16		 je	 SHORT $LN107@compressRo
  01346	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0134a	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  0134e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01352	48 0b c8	 or	 rcx, rax
  01355	48 8b c1	 mov	 rax, rcx
  01358	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN107@compressRo:
; Line 316
  0135c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01360	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  01364	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01368	48 23 c8	 and	 rcx, rax
  0136b	48 8b c1	 mov	 rax, rcx
  0136e	48 85 c0	 test	 rax, rax
  01371	74 16		 je	 SHORT $LN108@compressRo
  01373	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01377	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  0137b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0137f	48 0b c8	 or	 rcx, rax
  01382	48 8b c1	 mov	 rax, rcx
  01385	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN108@compressRo:
; Line 317
  01389	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0138d	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  01391	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01395	48 23 c8	 and	 rcx, rax
  01398	48 8b c1	 mov	 rax, rcx
  0139b	48 85 c0	 test	 rax, rax
  0139e	74 16		 je	 SHORT $LN109@compressRo
  013a0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  013a4	48 c1 e0 19	 shl	 rax, 25
  013a8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  013ac	48 0b c8	 or	 rcx, rax
  013af	48 8b c1	 mov	 rax, rcx
  013b2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN109@compressRo:
; Line 318
  013b6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  013ba	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  013be	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  013c2	48 23 c8	 and	 rcx, rax
  013c5	48 8b c1	 mov	 rax, rcx
  013c8	48 85 c0	 test	 rax, rax
  013cb	74 16		 je	 SHORT $LN110@compressRo
  013cd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  013d1	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  013d5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  013d9	48 0b c8	 or	 rcx, rax
  013dc	48 8b c1	 mov	 rax, rcx
  013df	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN110@compressRo:
; Line 319
  013e3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  013e7	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  013eb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  013ef	48 23 c8	 and	 rcx, rax
  013f2	48 8b c1	 mov	 rax, rcx
  013f5	48 85 c0	 test	 rax, rax
  013f8	74 16		 je	 SHORT $LN111@compressRo
  013fa	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  013fe	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  01402	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01406	48 0b c8	 or	 rcx, rax
  01409	48 8b c1	 mov	 rax, rcx
  0140c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN111@compressRo:
; Line 320
  01410	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01414	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  01418	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0141c	48 23 c8	 and	 rcx, rax
  0141f	48 8b c1	 mov	 rax, rcx
  01422	48 85 c0	 test	 rax, rax
  01425	74 16		 je	 SHORT $LN112@compressRo
  01427	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0142b	48 c1 e0 1d	 shl	 rax, 29
  0142f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01433	48 0b c8	 or	 rcx, rax
  01436	48 8b c1	 mov	 rax, rcx
  01439	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN112@compressRo:
; Line 321
  0143d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01441	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  01445	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01449	48 23 c8	 and	 rcx, rax
  0144c	48 8b c1	 mov	 rax, rcx
  0144f	48 85 c0	 test	 rax, rax
  01452	74 16		 je	 SHORT $LN113@compressRo
  01454	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01458	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  0145c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01460	48 0b c8	 or	 rcx, rax
  01463	48 8b c1	 mov	 rax, rcx
  01466	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN113@compressRo:
; Line 322
  0146a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0146e	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  01472	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01476	48 23 c8	 and	 rcx, rax
  01479	48 8b c1	 mov	 rax, rcx
  0147c	48 85 c0	 test	 rax, rax
  0147f	74 16		 je	 SHORT $LN114@compressRo
  01481	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01485	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  01489	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0148d	48 0b c8	 or	 rcx, rax
  01490	48 8b c1	 mov	 rax, rcx
  01493	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN114@compressRo:
; Line 323
  01497	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0149b	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  0149f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  014a3	48 23 c8	 and	 rcx, rax
  014a6	48 8b c1	 mov	 rax, rcx
  014a9	48 85 c0	 test	 rax, rax
  014ac	74 16		 je	 SHORT $LN115@compressRo
  014ae	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  014b2	48 c1 e0 1a	 shl	 rax, 26
  014b6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  014ba	48 0b c8	 or	 rcx, rax
  014bd	48 8b c1	 mov	 rax, rcx
  014c0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN115@compressRo:
; Line 324
  014c4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  014c8	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  014cc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  014d0	48 23 c8	 and	 rcx, rax
  014d3	48 8b c1	 mov	 rax, rcx
  014d6	48 85 c0	 test	 rax, rax
  014d9	74 16		 je	 SHORT $LN116@compressRo
  014db	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  014df	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  014e3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  014e7	48 0b c8	 or	 rcx, rax
  014ea	48 8b c1	 mov	 rax, rcx
  014ed	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN116@compressRo:
; Line 325
  014f1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  014f5	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  014f9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  014fd	48 23 c8	 and	 rcx, rax
  01500	48 8b c1	 mov	 rax, rcx
  01503	48 85 c0	 test	 rax, rax
  01506	74 16		 je	 SHORT $LN117@compressRo
  01508	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0150c	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  01510	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01514	48 0b c8	 or	 rcx, rax
  01517	48 8b c1	 mov	 rax, rcx
  0151a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN117@compressRo:
; Line 326
  0151e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01522	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  01526	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0152a	48 23 c8	 and	 rcx, rax
  0152d	48 8b c1	 mov	 rax, rcx
  01530	48 85 c0	 test	 rax, rax
  01533	74 16		 je	 SHORT $LN118@compressRo
  01535	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01539	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  0153d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01541	48 0b c8	 or	 rcx, rax
  01544	48 8b c1	 mov	 rax, rcx
  01547	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN118@compressRo:
; Line 327
  0154b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0154f	48 c1 e0 1e	 shl	 rax, 30
  01553	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01557	48 23 c8	 and	 rcx, rax
  0155a	48 8b c1	 mov	 rax, rcx
  0155d	48 85 c0	 test	 rax, rax
  01560	74 16		 je	 SHORT $LN119@compressRo
  01562	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01566	48 c1 e0 1f	 shl	 rax, 31
  0156a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0156e	48 0b c8	 or	 rcx, rax
  01571	48 8b c1	 mov	 rax, rcx
  01574	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN119@compressRo:
; Line 328
  01578	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0157c	48 c1 e0 1d	 shl	 rax, 29
  01580	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01584	48 23 c8	 and	 rcx, rax
  01587	48 8b c1	 mov	 rax, rcx
  0158a	48 85 c0	 test	 rax, rax
  0158d	74 16		 je	 SHORT $LN120@compressRo
  0158f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01593	48 c1 e0 1b	 shl	 rax, 27
  01597	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0159b	48 0b c8	 or	 rcx, rax
  0159e	48 8b c1	 mov	 rax, rcx
  015a1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN120@compressRo:
; Line 329
  015a5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  015a9	48 c1 e0 1c	 shl	 rax, 28
  015ad	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  015b1	48 23 c8	 and	 rcx, rax
  015b4	48 8b c1	 mov	 rax, rcx
  015b7	48 85 c0	 test	 rax, rax
  015ba	74 16		 je	 SHORT $LN121@compressRo
  015bc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  015c0	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  015c4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  015c8	48 0b c8	 or	 rcx, rax
  015cb	48 8b c1	 mov	 rax, rcx
  015ce	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN121@compressRo:
; Line 330
  015d2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  015d6	48 c1 e0 1b	 shl	 rax, 27
  015da	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  015de	48 23 c8	 and	 rcx, rax
  015e1	48 8b c1	 mov	 rax, rcx
  015e4	48 85 c0	 test	 rax, rax
  015e7	74 15		 je	 SHORT $LN122@compressRo
  015e9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  015ed	48 d1 e0	 shl	 rax, 1
  015f0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  015f4	48 0b c8	 or	 rcx, rax
  015f7	48 8b c1	 mov	 rax, rcx
  015fa	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN122@compressRo:
; Line 331
  015fe	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01602	48 c1 e0 1a	 shl	 rax, 26
  01606	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0160a	48 23 c8	 and	 rcx, rax
  0160d	48 8b c1	 mov	 rax, rcx
  01610	48 85 c0	 test	 rax, rax
  01613	74 16		 je	 SHORT $LN123@compressRo
  01615	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01619	48 c1 e0 11	 shl	 rax, 17
  0161d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01621	48 0b c8	 or	 rcx, rax
  01624	48 8b c1	 mov	 rax, rcx
  01627	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN123@compressRo:
; Line 332
  0162b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0162f	48 c1 e0 19	 shl	 rax, 25
  01633	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01637	48 23 c8	 and	 rcx, rax
  0163a	48 8b c1	 mov	 rax, rcx
  0163d	48 85 c0	 test	 rax, rax
  01640	74 16		 je	 SHORT $LN124@compressRo
  01642	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01646	48 c1 e0 15	 shl	 rax, 21
  0164a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0164e	48 0b c8	 or	 rcx, rax
  01651	48 8b c1	 mov	 rax, rcx
  01654	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN124@compressRo:
; Line 333
  01658	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0165c	48 c1 e0 18	 shl	 rax, 24
  01660	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01664	48 23 c8	 and	 rcx, rax
  01667	48 8b c1	 mov	 rax, rcx
  0166a	48 85 c0	 test	 rax, rax
  0166d	74 12		 je	 SHORT $LN125@compressRo
  0166f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01673	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01677	48 0b c8	 or	 rcx, rax
  0167a	48 8b c1	 mov	 rax, rcx
  0167d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN125@compressRo:
; Line 334
  01681	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01685	48 c1 e0 17	 shl	 rax, 23
  01689	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0168d	48 23 c8	 and	 rcx, rax
  01690	48 8b c1	 mov	 rax, rcx
  01693	48 85 c0	 test	 rax, rax
  01696	74 16		 je	 SHORT $LN126@compressRo
  01698	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0169c	48 c1 e0 0d	 shl	 rax, 13
  016a0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  016a4	48 0b c8	 or	 rcx, rax
  016a7	48 8b c1	 mov	 rax, rcx
  016aa	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN126@compressRo:
; Line 335
  016ae	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  016b2	48 c1 e0 16	 shl	 rax, 22
  016b6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  016ba	48 23 c8	 and	 rcx, rax
  016bd	48 8b c1	 mov	 rax, rcx
  016c0	48 85 c0	 test	 rax, rax
  016c3	74 16		 je	 SHORT $LN127@compressRo
  016c5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  016c9	48 c1 e0 07	 shl	 rax, 7
  016cd	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  016d1	48 0b c8	 or	 rcx, rax
  016d4	48 8b c1	 mov	 rax, rcx
  016d7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN127@compressRo:
; Line 336
  016db	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  016df	48 c1 e0 14	 shl	 rax, 20
  016e3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  016e7	48 23 c8	 and	 rcx, rax
  016ea	48 8b c1	 mov	 rax, rcx
  016ed	48 85 c0	 test	 rax, rax
  016f0	74 16		 je	 SHORT $LN128@compressRo
  016f2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  016f6	48 c1 e0 02	 shl	 rax, 2
  016fa	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  016fe	48 0b c8	 or	 rcx, rax
  01701	48 8b c1	 mov	 rax, rcx
  01704	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN128@compressRo:
; Line 337
  01708	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0170c	48 c1 e0 13	 shl	 rax, 19
  01710	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01714	48 23 c8	 and	 rcx, rax
  01717	48 8b c1	 mov	 rax, rcx
  0171a	48 85 c0	 test	 rax, rax
  0171d	74 16		 je	 SHORT $LN129@compressRo
  0171f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01723	48 c1 e0 14	 shl	 rax, 20
  01727	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0172b	48 0b c8	 or	 rcx, rax
  0172e	48 8b c1	 mov	 rax, rcx
  01731	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN129@compressRo:
; Line 338
  01735	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01739	48 c1 e0 11	 shl	 rax, 17
  0173d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01741	48 23 c8	 and	 rcx, rax
  01744	48 8b c1	 mov	 rax, rcx
  01747	48 85 c0	 test	 rax, rax
  0174a	74 16		 je	 SHORT $LN130@compressRo
  0174c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01750	48 c1 e0 09	 shl	 rax, 9
  01754	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01758	48 0b c8	 or	 rcx, rax
  0175b	48 8b c1	 mov	 rax, rcx
  0175e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN130@compressRo:
; Line 339
  01762	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01766	48 c1 e0 10	 shl	 rax, 16
  0176a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0176e	48 23 c8	 and	 rcx, rax
  01771	48 8b c1	 mov	 rax, rcx
  01774	48 85 c0	 test	 rax, rax
  01777	74 16		 je	 SHORT $LN131@compressRo
  01779	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0177d	48 c1 e0 10	 shl	 rax, 16
  01781	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01785	48 0b c8	 or	 rcx, rax
  01788	48 8b c1	 mov	 rax, rcx
  0178b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN131@compressRo:
; Line 340
  0178f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01793	48 c1 e0 0f	 shl	 rax, 15
  01797	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0179b	48 23 c8	 and	 rcx, rax
  0179e	48 8b c1	 mov	 rax, rcx
  017a1	48 85 c0	 test	 rax, rax
  017a4	74 16		 je	 SHORT $LN132@compressRo
  017a6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  017aa	48 c1 e0 17	 shl	 rax, 23
  017ae	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  017b2	48 0b c8	 or	 rcx, rax
  017b5	48 8b c1	 mov	 rax, rcx
  017b8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN132@compressRo:
; Line 341
  017bc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  017c0	48 c1 e0 0e	 shl	 rax, 14
  017c4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  017c8	48 23 c8	 and	 rcx, rax
  017cb	48 8b c1	 mov	 rax, rcx
  017ce	48 85 c0	 test	 rax, rax
  017d1	74 16		 je	 SHORT $LN133@compressRo
  017d3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  017d7	48 c1 e0 04	 shl	 rax, 4
  017db	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  017df	48 0b c8	 or	 rcx, rax
  017e2	48 8b c1	 mov	 rax, rcx
  017e5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN133@compressRo:
; Line 342
  017e9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  017ed	48 c1 e0 0c	 shl	 rax, 12
  017f1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  017f5	48 23 c8	 and	 rcx, rax
  017f8	48 8b c1	 mov	 rax, rcx
  017fb	48 85 c0	 test	 rax, rax
  017fe	74 16		 je	 SHORT $LN134@compressRo
  01800	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01804	48 c1 e0 0b	 shl	 rax, 11
  01808	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0180c	48 0b c8	 or	 rcx, rax
  0180f	48 8b c1	 mov	 rax, rcx
  01812	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN134@compressRo:
; Line 343
  01816	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0181a	48 c1 e0 0b	 shl	 rax, 11
  0181e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01822	48 23 c8	 and	 rcx, rax
  01825	48 8b c1	 mov	 rax, rcx
  01828	48 85 c0	 test	 rax, rax
  0182b	74 16		 je	 SHORT $LN135@compressRo
  0182d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01831	48 c1 e0 0e	 shl	 rax, 14
  01835	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01839	48 0b c8	 or	 rcx, rax
  0183c	48 8b c1	 mov	 rax, rcx
  0183f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN135@compressRo:
; Line 344
  01843	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01847	48 c1 e0 0a	 shl	 rax, 10
  0184b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0184f	48 23 c8	 and	 rcx, rax
  01852	48 8b c1	 mov	 rax, rcx
  01855	48 85 c0	 test	 rax, rax
  01858	74 16		 je	 SHORT $LN136@compressRo
  0185a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0185e	48 c1 e0 05	 shl	 rax, 5
  01862	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01866	48 0b c8	 or	 rcx, rax
  01869	48 8b c1	 mov	 rax, rcx
  0186c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN136@compressRo:
; Line 345
  01870	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01874	48 c1 e0 09	 shl	 rax, 9
  01878	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0187c	48 23 c8	 and	 rcx, rax
  0187f	48 8b c1	 mov	 rax, rcx
  01882	48 85 c0	 test	 rax, rax
  01885	74 16		 je	 SHORT $LN137@compressRo
  01887	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0188b	48 c1 e0 13	 shl	 rax, 19
  0188f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01893	48 0b c8	 or	 rcx, rax
  01896	48 8b c1	 mov	 rax, rcx
  01899	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN137@compressRo:
; Line 346
  0189d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  018a1	48 c1 e0 08	 shl	 rax, 8
  018a5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  018a9	48 23 c8	 and	 rcx, rax
  018ac	48 8b c1	 mov	 rax, rcx
  018af	48 85 c0	 test	 rax, rax
  018b2	74 16		 je	 SHORT $LN138@compressRo
  018b4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  018b8	48 c1 e0 0c	 shl	 rax, 12
  018bc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  018c0	48 0b c8	 or	 rcx, rax
  018c3	48 8b c1	 mov	 rax, rcx
  018c6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN138@compressRo:
; Line 347
  018ca	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  018ce	48 c1 e0 07	 shl	 rax, 7
  018d2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  018d6	48 23 c8	 and	 rcx, rax
  018d9	48 8b c1	 mov	 rax, rcx
  018dc	48 85 c0	 test	 rax, rax
  018df	74 16		 je	 SHORT $LN139@compressRo
  018e1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  018e5	48 c1 e0 0a	 shl	 rax, 10
  018e9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  018ed	48 0b c8	 or	 rcx, rax
  018f0	48 8b c1	 mov	 rax, rcx
  018f3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN139@compressRo:
; Line 348
  018f7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  018fb	48 c1 e0 06	 shl	 rax, 6
  018ff	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01903	48 23 c8	 and	 rcx, rax
  01906	48 8b c1	 mov	 rax, rcx
  01909	48 85 c0	 test	 rax, rax
  0190c	74 16		 je	 SHORT $LN140@compressRo
  0190e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01912	48 c1 e0 03	 shl	 rax, 3
  01916	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0191a	48 0b c8	 or	 rcx, rax
  0191d	48 8b c1	 mov	 rax, rcx
  01920	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN140@compressRo:
; Line 349
  01924	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01928	48 c1 e0 05	 shl	 rax, 5
  0192c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01930	48 23 c8	 and	 rcx, rax
  01933	48 8b c1	 mov	 rax, rcx
  01936	48 85 c0	 test	 rax, rax
  01939	74 16		 je	 SHORT $LN141@compressRo
  0193b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0193f	48 c1 e0 0f	 shl	 rax, 15
  01943	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01947	48 0b c8	 or	 rcx, rax
  0194a	48 8b c1	 mov	 rax, rcx
  0194d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN141@compressRo:
; Line 350
  01951	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01955	48 c1 e0 04	 shl	 rax, 4
  01959	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0195d	48 23 c8	 and	 rcx, rax
  01960	48 8b c1	 mov	 rax, rcx
  01963	48 85 c0	 test	 rax, rax
  01966	74 16		 je	 SHORT $LN142@compressRo
  01968	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0196c	48 c1 e0 16	 shl	 rax, 22
  01970	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01974	48 0b c8	 or	 rcx, rax
  01977	48 8b c1	 mov	 rax, rcx
  0197a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN142@compressRo:
; Line 351
  0197e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01982	48 c1 e0 03	 shl	 rax, 3
  01986	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0198a	48 23 c8	 and	 rcx, rax
  0198d	48 8b c1	 mov	 rax, rcx
  01990	48 85 c0	 test	 rax, rax
  01993	74 16		 je	 SHORT $LN143@compressRo
  01995	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01999	48 c1 e0 06	 shl	 rax, 6
  0199d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  019a1	48 0b c8	 or	 rcx, rax
  019a4	48 8b c1	 mov	 rax, rcx
  019a7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN143@compressRo:
; Line 352
  019ab	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  019af	48 d1 e0	 shl	 rax, 1
  019b2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  019b6	48 23 c8	 and	 rcx, rax
  019b9	48 8b c1	 mov	 rax, rcx
  019bc	48 85 c0	 test	 rax, rax
  019bf	74 16		 je	 SHORT $LN144@compressRo
  019c1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  019c5	48 c1 e0 12	 shl	 rax, 18
  019c9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  019cd	48 0b c8	 or	 rcx, rax
  019d0	48 8b c1	 mov	 rax, rcx
  019d3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN144@compressRo:
; Line 353
  019d7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  019db	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  019df	48 23 c8	 and	 rcx, rax
  019e2	48 8b c1	 mov	 rax, rcx
  019e5	48 85 c0	 test	 rax, rax
  019e8	74 16		 je	 SHORT $LN145@compressRo
  019ea	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  019ee	48 c1 e0 08	 shl	 rax, 8
  019f2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  019f6	48 0b c8	 or	 rcx, rax
  019f9	48 8b c1	 mov	 rax, rcx
  019fc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN145@compressRo:
; Line 354
  01a00	b8 08 00 00 00	 mov	 eax, 8
  01a05	48 6b c0 03	 imul	 rax, rax, 3
  01a09	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  01a10	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  01a14	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 356
  01a18	b8 08 00 00 00	 mov	 eax, 8
  01a1d	48 6b c0 04	 imul	 rax, rax, 4
  01a21	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  01a28	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01a2c	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 357
  01a30	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 360
  01a38	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01a3c	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  01a40	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01a44	48 23 c8	 and	 rcx, rax
  01a47	48 8b c1	 mov	 rax, rcx
  01a4a	48 85 c0	 test	 rax, rax
  01a4d	74 16		 je	 SHORT $LN146@compressRo
  01a4f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01a53	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  01a57	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01a5b	48 0b c8	 or	 rcx, rax
  01a5e	48 8b c1	 mov	 rax, rcx
  01a61	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN146@compressRo:
; Line 361
  01a65	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01a69	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  01a6d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01a71	48 23 c8	 and	 rcx, rax
  01a74	48 8b c1	 mov	 rax, rcx
  01a77	48 85 c0	 test	 rax, rax
  01a7a	74 16		 je	 SHORT $LN147@compressRo
  01a7c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01a80	48 c1 e0 18	 shl	 rax, 24
  01a84	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01a88	48 0b c8	 or	 rcx, rax
  01a8b	48 8b c1	 mov	 rax, rcx
  01a8e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN147@compressRo:
; Line 362
  01a92	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01a96	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  01a9a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01a9e	48 23 c8	 and	 rcx, rax
  01aa1	48 8b c1	 mov	 rax, rcx
  01aa4	48 85 c0	 test	 rax, rax
  01aa7	74 16		 je	 SHORT $LN148@compressRo
  01aa9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01aad	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  01ab1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01ab5	48 0b c8	 or	 rcx, rax
  01ab8	48 8b c1	 mov	 rax, rcx
  01abb	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN148@compressRo:
; Line 363
  01abf	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01ac3	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  01ac7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01acb	48 23 c8	 and	 rcx, rax
  01ace	48 8b c1	 mov	 rax, rcx
  01ad1	48 85 c0	 test	 rax, rax
  01ad4	74 16		 je	 SHORT $LN149@compressRo
  01ad6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01ada	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  01ade	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01ae2	48 0b c8	 or	 rcx, rax
  01ae5	48 8b c1	 mov	 rax, rcx
  01ae8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN149@compressRo:
; Line 364
  01aec	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01af0	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  01af4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01af8	48 23 c8	 and	 rcx, rax
  01afb	48 8b c1	 mov	 rax, rcx
  01afe	48 85 c0	 test	 rax, rax
  01b01	74 16		 je	 SHORT $LN150@compressRo
  01b03	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01b07	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  01b0b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01b0f	48 0b c8	 or	 rcx, rax
  01b12	48 8b c1	 mov	 rax, rcx
  01b15	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN150@compressRo:
; Line 365
  01b19	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01b1d	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  01b21	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01b25	48 23 c8	 and	 rcx, rax
  01b28	48 8b c1	 mov	 rax, rcx
  01b2b	48 85 c0	 test	 rax, rax
  01b2e	74 16		 je	 SHORT $LN151@compressRo
  01b30	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01b34	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  01b38	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01b3c	48 0b c8	 or	 rcx, rax
  01b3f	48 8b c1	 mov	 rax, rcx
  01b42	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN151@compressRo:
; Line 366
  01b46	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01b4a	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  01b4e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01b52	48 23 c8	 and	 rcx, rax
  01b55	48 8b c1	 mov	 rax, rcx
  01b58	48 85 c0	 test	 rax, rax
  01b5b	74 16		 je	 SHORT $LN152@compressRo
  01b5d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01b61	48 c1 e0 1c	 shl	 rax, 28
  01b65	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01b69	48 0b c8	 or	 rcx, rax
  01b6c	48 8b c1	 mov	 rax, rcx
  01b6f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN152@compressRo:
; Line 367
  01b73	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01b77	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  01b7b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01b7f	48 23 c8	 and	 rcx, rax
  01b82	48 8b c1	 mov	 rax, rcx
  01b85	48 85 c0	 test	 rax, rax
  01b88	74 16		 je	 SHORT $LN153@compressRo
  01b8a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01b8e	48 c1 e0 1e	 shl	 rax, 30
  01b92	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01b96	48 0b c8	 or	 rcx, rax
  01b99	48 8b c1	 mov	 rax, rcx
  01b9c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN153@compressRo:
; Line 368
  01ba0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01ba4	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  01ba8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01bac	48 23 c8	 and	 rcx, rax
  01baf	48 8b c1	 mov	 rax, rcx
  01bb2	48 85 c0	 test	 rax, rax
  01bb5	74 16		 je	 SHORT $LN154@compressRo
  01bb7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01bbb	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  01bbf	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01bc3	48 0b c8	 or	 rcx, rax
  01bc6	48 8b c1	 mov	 rax, rcx
  01bc9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN154@compressRo:
; Line 369
  01bcd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01bd1	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  01bd5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01bd9	48 23 c8	 and	 rcx, rax
  01bdc	48 8b c1	 mov	 rax, rcx
  01bdf	48 85 c0	 test	 rax, rax
  01be2	74 16		 je	 SHORT $LN155@compressRo
  01be4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01be8	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  01bec	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01bf0	48 0b c8	 or	 rcx, rax
  01bf3	48 8b c1	 mov	 rax, rcx
  01bf6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN155@compressRo:
; Line 370
  01bfa	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01bfe	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  01c02	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01c06	48 23 c8	 and	 rcx, rax
  01c09	48 8b c1	 mov	 rax, rcx
  01c0c	48 85 c0	 test	 rax, rax
  01c0f	74 16		 je	 SHORT $LN156@compressRo
  01c11	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01c15	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  01c19	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01c1d	48 0b c8	 or	 rcx, rax
  01c20	48 8b c1	 mov	 rax, rcx
  01c23	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN156@compressRo:
; Line 371
  01c27	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01c2b	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  01c2f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01c33	48 23 c8	 and	 rcx, rax
  01c36	48 8b c1	 mov	 rax, rcx
  01c39	48 85 c0	 test	 rax, rax
  01c3c	74 16		 je	 SHORT $LN157@compressRo
  01c3e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01c42	48 c1 e0 19	 shl	 rax, 25
  01c46	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01c4a	48 0b c8	 or	 rcx, rax
  01c4d	48 8b c1	 mov	 rax, rcx
  01c50	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN157@compressRo:
; Line 372
  01c54	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01c58	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  01c5c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01c60	48 23 c8	 and	 rcx, rax
  01c63	48 8b c1	 mov	 rax, rcx
  01c66	48 85 c0	 test	 rax, rax
  01c69	74 16		 je	 SHORT $LN158@compressRo
  01c6b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01c6f	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  01c73	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01c77	48 0b c8	 or	 rcx, rax
  01c7a	48 8b c1	 mov	 rax, rcx
  01c7d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN158@compressRo:
; Line 373
  01c81	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01c85	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  01c89	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01c8d	48 23 c8	 and	 rcx, rax
  01c90	48 8b c1	 mov	 rax, rcx
  01c93	48 85 c0	 test	 rax, rax
  01c96	74 16		 je	 SHORT $LN159@compressRo
  01c98	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01c9c	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  01ca0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01ca4	48 0b c8	 or	 rcx, rax
  01ca7	48 8b c1	 mov	 rax, rcx
  01caa	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN159@compressRo:
; Line 374
  01cae	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01cb2	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  01cb6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01cba	48 23 c8	 and	 rcx, rax
  01cbd	48 8b c1	 mov	 rax, rcx
  01cc0	48 85 c0	 test	 rax, rax
  01cc3	74 16		 je	 SHORT $LN160@compressRo
  01cc5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01cc9	48 c1 e0 1d	 shl	 rax, 29
  01ccd	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01cd1	48 0b c8	 or	 rcx, rax
  01cd4	48 8b c1	 mov	 rax, rcx
  01cd7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN160@compressRo:
; Line 375
  01cdb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01cdf	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  01ce3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01ce7	48 23 c8	 and	 rcx, rax
  01cea	48 8b c1	 mov	 rax, rcx
  01ced	48 85 c0	 test	 rax, rax
  01cf0	74 16		 je	 SHORT $LN161@compressRo
  01cf2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01cf6	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  01cfa	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01cfe	48 0b c8	 or	 rcx, rax
  01d01	48 8b c1	 mov	 rax, rcx
  01d04	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN161@compressRo:
; Line 376
  01d08	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01d0c	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  01d10	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01d14	48 23 c8	 and	 rcx, rax
  01d17	48 8b c1	 mov	 rax, rcx
  01d1a	48 85 c0	 test	 rax, rax
  01d1d	74 16		 je	 SHORT $LN162@compressRo
  01d1f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01d23	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  01d27	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01d2b	48 0b c8	 or	 rcx, rax
  01d2e	48 8b c1	 mov	 rax, rcx
  01d31	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN162@compressRo:
; Line 377
  01d35	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01d39	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  01d3d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01d41	48 23 c8	 and	 rcx, rax
  01d44	48 8b c1	 mov	 rax, rcx
  01d47	48 85 c0	 test	 rax, rax
  01d4a	74 16		 je	 SHORT $LN163@compressRo
  01d4c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01d50	48 c1 e0 1a	 shl	 rax, 26
  01d54	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01d58	48 0b c8	 or	 rcx, rax
  01d5b	48 8b c1	 mov	 rax, rcx
  01d5e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN163@compressRo:
; Line 378
  01d62	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01d66	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  01d6a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01d6e	48 23 c8	 and	 rcx, rax
  01d71	48 8b c1	 mov	 rax, rcx
  01d74	48 85 c0	 test	 rax, rax
  01d77	74 16		 je	 SHORT $LN164@compressRo
  01d79	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01d7d	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  01d81	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01d85	48 0b c8	 or	 rcx, rax
  01d88	48 8b c1	 mov	 rax, rcx
  01d8b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN164@compressRo:
; Line 379
  01d8f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01d93	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  01d97	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01d9b	48 23 c8	 and	 rcx, rax
  01d9e	48 8b c1	 mov	 rax, rcx
  01da1	48 85 c0	 test	 rax, rax
  01da4	74 16		 je	 SHORT $LN165@compressRo
  01da6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01daa	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  01dae	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01db2	48 0b c8	 or	 rcx, rax
  01db5	48 8b c1	 mov	 rax, rcx
  01db8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN165@compressRo:
; Line 380
  01dbc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01dc0	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  01dc4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01dc8	48 23 c8	 and	 rcx, rax
  01dcb	48 8b c1	 mov	 rax, rcx
  01dce	48 85 c0	 test	 rax, rax
  01dd1	74 16		 je	 SHORT $LN166@compressRo
  01dd3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01dd7	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  01ddb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01ddf	48 0b c8	 or	 rcx, rax
  01de2	48 8b c1	 mov	 rax, rcx
  01de5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN166@compressRo:
; Line 381
  01de9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01ded	48 c1 e0 1e	 shl	 rax, 30
  01df1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01df5	48 23 c8	 and	 rcx, rax
  01df8	48 8b c1	 mov	 rax, rcx
  01dfb	48 85 c0	 test	 rax, rax
  01dfe	74 16		 je	 SHORT $LN167@compressRo
  01e00	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01e04	48 c1 e0 1f	 shl	 rax, 31
  01e08	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01e0c	48 0b c8	 or	 rcx, rax
  01e0f	48 8b c1	 mov	 rax, rcx
  01e12	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN167@compressRo:
; Line 382
  01e16	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01e1a	48 c1 e0 1d	 shl	 rax, 29
  01e1e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01e22	48 23 c8	 and	 rcx, rax
  01e25	48 8b c1	 mov	 rax, rcx
  01e28	48 85 c0	 test	 rax, rax
  01e2b	74 16		 je	 SHORT $LN168@compressRo
  01e2d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01e31	48 c1 e0 1b	 shl	 rax, 27
  01e35	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01e39	48 0b c8	 or	 rcx, rax
  01e3c	48 8b c1	 mov	 rax, rcx
  01e3f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN168@compressRo:
; Line 383
  01e43	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01e47	48 c1 e0 1c	 shl	 rax, 28
  01e4b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01e4f	48 23 c8	 and	 rcx, rax
  01e52	48 8b c1	 mov	 rax, rcx
  01e55	48 85 c0	 test	 rax, rax
  01e58	74 16		 je	 SHORT $LN169@compressRo
  01e5a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01e5e	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  01e62	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01e66	48 0b c8	 or	 rcx, rax
  01e69	48 8b c1	 mov	 rax, rcx
  01e6c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN169@compressRo:
; Line 384
  01e70	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01e74	48 c1 e0 1b	 shl	 rax, 27
  01e78	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01e7c	48 23 c8	 and	 rcx, rax
  01e7f	48 8b c1	 mov	 rax, rcx
  01e82	48 85 c0	 test	 rax, rax
  01e85	74 15		 je	 SHORT $LN170@compressRo
  01e87	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01e8b	48 d1 e0	 shl	 rax, 1
  01e8e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01e92	48 0b c8	 or	 rcx, rax
  01e95	48 8b c1	 mov	 rax, rcx
  01e98	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN170@compressRo:
; Line 385
  01e9c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01ea0	48 c1 e0 1a	 shl	 rax, 26
  01ea4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01ea8	48 23 c8	 and	 rcx, rax
  01eab	48 8b c1	 mov	 rax, rcx
  01eae	48 85 c0	 test	 rax, rax
  01eb1	74 16		 je	 SHORT $LN171@compressRo
  01eb3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01eb7	48 c1 e0 11	 shl	 rax, 17
  01ebb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01ebf	48 0b c8	 or	 rcx, rax
  01ec2	48 8b c1	 mov	 rax, rcx
  01ec5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN171@compressRo:
; Line 386
  01ec9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01ecd	48 c1 e0 19	 shl	 rax, 25
  01ed1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01ed5	48 23 c8	 and	 rcx, rax
  01ed8	48 8b c1	 mov	 rax, rcx
  01edb	48 85 c0	 test	 rax, rax
  01ede	74 16		 je	 SHORT $LN172@compressRo
  01ee0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01ee4	48 c1 e0 15	 shl	 rax, 21
  01ee8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01eec	48 0b c8	 or	 rcx, rax
  01eef	48 8b c1	 mov	 rax, rcx
  01ef2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN172@compressRo:
; Line 387
  01ef6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01efa	48 c1 e0 18	 shl	 rax, 24
  01efe	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01f02	48 23 c8	 and	 rcx, rax
  01f05	48 8b c1	 mov	 rax, rcx
  01f08	48 85 c0	 test	 rax, rax
  01f0b	74 12		 je	 SHORT $LN173@compressRo
  01f0d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01f11	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01f15	48 0b c8	 or	 rcx, rax
  01f18	48 8b c1	 mov	 rax, rcx
  01f1b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN173@compressRo:
; Line 388
  01f1f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01f23	48 c1 e0 17	 shl	 rax, 23
  01f27	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01f2b	48 23 c8	 and	 rcx, rax
  01f2e	48 8b c1	 mov	 rax, rcx
  01f31	48 85 c0	 test	 rax, rax
  01f34	74 16		 je	 SHORT $LN174@compressRo
  01f36	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01f3a	48 c1 e0 0d	 shl	 rax, 13
  01f3e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01f42	48 0b c8	 or	 rcx, rax
  01f45	48 8b c1	 mov	 rax, rcx
  01f48	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN174@compressRo:
; Line 389
  01f4c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01f50	48 c1 e0 16	 shl	 rax, 22
  01f54	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01f58	48 23 c8	 and	 rcx, rax
  01f5b	48 8b c1	 mov	 rax, rcx
  01f5e	48 85 c0	 test	 rax, rax
  01f61	74 16		 je	 SHORT $LN175@compressRo
  01f63	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01f67	48 c1 e0 07	 shl	 rax, 7
  01f6b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01f6f	48 0b c8	 or	 rcx, rax
  01f72	48 8b c1	 mov	 rax, rcx
  01f75	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN175@compressRo:
; Line 390
  01f79	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01f7d	48 c1 e0 14	 shl	 rax, 20
  01f81	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01f85	48 23 c8	 and	 rcx, rax
  01f88	48 8b c1	 mov	 rax, rcx
  01f8b	48 85 c0	 test	 rax, rax
  01f8e	74 16		 je	 SHORT $LN176@compressRo
  01f90	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01f94	48 c1 e0 02	 shl	 rax, 2
  01f98	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01f9c	48 0b c8	 or	 rcx, rax
  01f9f	48 8b c1	 mov	 rax, rcx
  01fa2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN176@compressRo:
; Line 391
  01fa6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01faa	48 c1 e0 13	 shl	 rax, 19
  01fae	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01fb2	48 23 c8	 and	 rcx, rax
  01fb5	48 8b c1	 mov	 rax, rcx
  01fb8	48 85 c0	 test	 rax, rax
  01fbb	74 16		 je	 SHORT $LN177@compressRo
  01fbd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01fc1	48 c1 e0 14	 shl	 rax, 20
  01fc5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01fc9	48 0b c8	 or	 rcx, rax
  01fcc	48 8b c1	 mov	 rax, rcx
  01fcf	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN177@compressRo:
; Line 392
  01fd3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01fd7	48 c1 e0 11	 shl	 rax, 17
  01fdb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  01fdf	48 23 c8	 and	 rcx, rax
  01fe2	48 8b c1	 mov	 rax, rcx
  01fe5	48 85 c0	 test	 rax, rax
  01fe8	74 16		 je	 SHORT $LN178@compressRo
  01fea	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  01fee	48 c1 e0 09	 shl	 rax, 9
  01ff2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  01ff6	48 0b c8	 or	 rcx, rax
  01ff9	48 8b c1	 mov	 rax, rcx
  01ffc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN178@compressRo:
; Line 393
  02000	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02004	48 c1 e0 10	 shl	 rax, 16
  02008	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0200c	48 23 c8	 and	 rcx, rax
  0200f	48 8b c1	 mov	 rax, rcx
  02012	48 85 c0	 test	 rax, rax
  02015	74 16		 je	 SHORT $LN179@compressRo
  02017	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0201b	48 c1 e0 10	 shl	 rax, 16
  0201f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02023	48 0b c8	 or	 rcx, rax
  02026	48 8b c1	 mov	 rax, rcx
  02029	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN179@compressRo:
; Line 394
  0202d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02031	48 c1 e0 0f	 shl	 rax, 15
  02035	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02039	48 23 c8	 and	 rcx, rax
  0203c	48 8b c1	 mov	 rax, rcx
  0203f	48 85 c0	 test	 rax, rax
  02042	74 16		 je	 SHORT $LN180@compressRo
  02044	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02048	48 c1 e0 17	 shl	 rax, 23
  0204c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02050	48 0b c8	 or	 rcx, rax
  02053	48 8b c1	 mov	 rax, rcx
  02056	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN180@compressRo:
; Line 395
  0205a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0205e	48 c1 e0 0e	 shl	 rax, 14
  02062	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02066	48 23 c8	 and	 rcx, rax
  02069	48 8b c1	 mov	 rax, rcx
  0206c	48 85 c0	 test	 rax, rax
  0206f	74 16		 je	 SHORT $LN181@compressRo
  02071	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02075	48 c1 e0 04	 shl	 rax, 4
  02079	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0207d	48 0b c8	 or	 rcx, rax
  02080	48 8b c1	 mov	 rax, rcx
  02083	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN181@compressRo:
; Line 396
  02087	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0208b	48 c1 e0 0c	 shl	 rax, 12
  0208f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02093	48 23 c8	 and	 rcx, rax
  02096	48 8b c1	 mov	 rax, rcx
  02099	48 85 c0	 test	 rax, rax
  0209c	74 16		 je	 SHORT $LN182@compressRo
  0209e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  020a2	48 c1 e0 0b	 shl	 rax, 11
  020a6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  020aa	48 0b c8	 or	 rcx, rax
  020ad	48 8b c1	 mov	 rax, rcx
  020b0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN182@compressRo:
; Line 397
  020b4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  020b8	48 c1 e0 0b	 shl	 rax, 11
  020bc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  020c0	48 23 c8	 and	 rcx, rax
  020c3	48 8b c1	 mov	 rax, rcx
  020c6	48 85 c0	 test	 rax, rax
  020c9	74 16		 je	 SHORT $LN183@compressRo
  020cb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  020cf	48 c1 e0 0e	 shl	 rax, 14
  020d3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  020d7	48 0b c8	 or	 rcx, rax
  020da	48 8b c1	 mov	 rax, rcx
  020dd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN183@compressRo:
; Line 398
  020e1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  020e5	48 c1 e0 0a	 shl	 rax, 10
  020e9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  020ed	48 23 c8	 and	 rcx, rax
  020f0	48 8b c1	 mov	 rax, rcx
  020f3	48 85 c0	 test	 rax, rax
  020f6	74 16		 je	 SHORT $LN184@compressRo
  020f8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  020fc	48 c1 e0 05	 shl	 rax, 5
  02100	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02104	48 0b c8	 or	 rcx, rax
  02107	48 8b c1	 mov	 rax, rcx
  0210a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN184@compressRo:
; Line 399
  0210e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02112	48 c1 e0 09	 shl	 rax, 9
  02116	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0211a	48 23 c8	 and	 rcx, rax
  0211d	48 8b c1	 mov	 rax, rcx
  02120	48 85 c0	 test	 rax, rax
  02123	74 16		 je	 SHORT $LN185@compressRo
  02125	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02129	48 c1 e0 13	 shl	 rax, 19
  0212d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02131	48 0b c8	 or	 rcx, rax
  02134	48 8b c1	 mov	 rax, rcx
  02137	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN185@compressRo:
; Line 400
  0213b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0213f	48 c1 e0 08	 shl	 rax, 8
  02143	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02147	48 23 c8	 and	 rcx, rax
  0214a	48 8b c1	 mov	 rax, rcx
  0214d	48 85 c0	 test	 rax, rax
  02150	74 16		 je	 SHORT $LN186@compressRo
  02152	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02156	48 c1 e0 0c	 shl	 rax, 12
  0215a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0215e	48 0b c8	 or	 rcx, rax
  02161	48 8b c1	 mov	 rax, rcx
  02164	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN186@compressRo:
; Line 401
  02168	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0216c	48 c1 e0 07	 shl	 rax, 7
  02170	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02174	48 23 c8	 and	 rcx, rax
  02177	48 8b c1	 mov	 rax, rcx
  0217a	48 85 c0	 test	 rax, rax
  0217d	74 16		 je	 SHORT $LN187@compressRo
  0217f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02183	48 c1 e0 0a	 shl	 rax, 10
  02187	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0218b	48 0b c8	 or	 rcx, rax
  0218e	48 8b c1	 mov	 rax, rcx
  02191	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN187@compressRo:
; Line 402
  02195	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02199	48 c1 e0 06	 shl	 rax, 6
  0219d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  021a1	48 23 c8	 and	 rcx, rax
  021a4	48 8b c1	 mov	 rax, rcx
  021a7	48 85 c0	 test	 rax, rax
  021aa	74 16		 je	 SHORT $LN188@compressRo
  021ac	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  021b0	48 c1 e0 03	 shl	 rax, 3
  021b4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  021b8	48 0b c8	 or	 rcx, rax
  021bb	48 8b c1	 mov	 rax, rcx
  021be	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN188@compressRo:
; Line 403
  021c2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  021c6	48 c1 e0 05	 shl	 rax, 5
  021ca	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  021ce	48 23 c8	 and	 rcx, rax
  021d1	48 8b c1	 mov	 rax, rcx
  021d4	48 85 c0	 test	 rax, rax
  021d7	74 16		 je	 SHORT $LN189@compressRo
  021d9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  021dd	48 c1 e0 0f	 shl	 rax, 15
  021e1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  021e5	48 0b c8	 or	 rcx, rax
  021e8	48 8b c1	 mov	 rax, rcx
  021eb	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN189@compressRo:
; Line 404
  021ef	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  021f3	48 c1 e0 04	 shl	 rax, 4
  021f7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  021fb	48 23 c8	 and	 rcx, rax
  021fe	48 8b c1	 mov	 rax, rcx
  02201	48 85 c0	 test	 rax, rax
  02204	74 16		 je	 SHORT $LN190@compressRo
  02206	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0220a	48 c1 e0 16	 shl	 rax, 22
  0220e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02212	48 0b c8	 or	 rcx, rax
  02215	48 8b c1	 mov	 rax, rcx
  02218	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN190@compressRo:
; Line 405
  0221c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02220	48 c1 e0 03	 shl	 rax, 3
  02224	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02228	48 23 c8	 and	 rcx, rax
  0222b	48 8b c1	 mov	 rax, rcx
  0222e	48 85 c0	 test	 rax, rax
  02231	74 16		 je	 SHORT $LN191@compressRo
  02233	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02237	48 c1 e0 06	 shl	 rax, 6
  0223b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0223f	48 0b c8	 or	 rcx, rax
  02242	48 8b c1	 mov	 rax, rcx
  02245	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN191@compressRo:
; Line 406
  02249	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0224d	48 d1 e0	 shl	 rax, 1
  02250	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02254	48 23 c8	 and	 rcx, rax
  02257	48 8b c1	 mov	 rax, rcx
  0225a	48 85 c0	 test	 rax, rax
  0225d	74 16		 je	 SHORT $LN192@compressRo
  0225f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02263	48 c1 e0 12	 shl	 rax, 18
  02267	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0226b	48 0b c8	 or	 rcx, rax
  0226e	48 8b c1	 mov	 rax, rcx
  02271	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN192@compressRo:
; Line 407
  02275	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02279	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0227d	48 23 c8	 and	 rcx, rax
  02280	48 8b c1	 mov	 rax, rcx
  02283	48 85 c0	 test	 rax, rax
  02286	74 16		 je	 SHORT $LN193@compressRo
  02288	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0228c	48 c1 e0 08	 shl	 rax, 8
  02290	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02294	48 0b c8	 or	 rcx, rax
  02297	48 8b c1	 mov	 rax, rcx
  0229a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN193@compressRo:
; Line 408
  0229e	b8 08 00 00 00	 mov	 eax, 8
  022a3	48 6b c0 04	 imul	 rax, rax, 4
  022a7	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  022ae	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  022b2	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 410
  022b6	b8 08 00 00 00	 mov	 eax, 8
  022bb	48 6b c0 05	 imul	 rax, rax, 5
  022bf	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  022c6	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  022ca	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 411
  022ce	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 414
  022d6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  022da	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  022de	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  022e2	48 23 c8	 and	 rcx, rax
  022e5	48 8b c1	 mov	 rax, rcx
  022e8	48 85 c0	 test	 rax, rax
  022eb	74 16		 je	 SHORT $LN194@compressRo
  022ed	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  022f1	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  022f5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  022f9	48 0b c8	 or	 rcx, rax
  022fc	48 8b c1	 mov	 rax, rcx
  022ff	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN194@compressRo:
; Line 415
  02303	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02307	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  0230b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0230f	48 23 c8	 and	 rcx, rax
  02312	48 8b c1	 mov	 rax, rcx
  02315	48 85 c0	 test	 rax, rax
  02318	74 16		 je	 SHORT $LN195@compressRo
  0231a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0231e	48 c1 e0 18	 shl	 rax, 24
  02322	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02326	48 0b c8	 or	 rcx, rax
  02329	48 8b c1	 mov	 rax, rcx
  0232c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN195@compressRo:
; Line 416
  02330	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02334	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  02338	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0233c	48 23 c8	 and	 rcx, rax
  0233f	48 8b c1	 mov	 rax, rcx
  02342	48 85 c0	 test	 rax, rax
  02345	74 16		 je	 SHORT $LN196@compressRo
  02347	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0234b	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  0234f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02353	48 0b c8	 or	 rcx, rax
  02356	48 8b c1	 mov	 rax, rcx
  02359	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN196@compressRo:
; Line 417
  0235d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02361	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  02365	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02369	48 23 c8	 and	 rcx, rax
  0236c	48 8b c1	 mov	 rax, rcx
  0236f	48 85 c0	 test	 rax, rax
  02372	74 16		 je	 SHORT $LN197@compressRo
  02374	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02378	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0237c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02380	48 0b c8	 or	 rcx, rax
  02383	48 8b c1	 mov	 rax, rcx
  02386	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN197@compressRo:
; Line 418
  0238a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0238e	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  02392	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02396	48 23 c8	 and	 rcx, rax
  02399	48 8b c1	 mov	 rax, rcx
  0239c	48 85 c0	 test	 rax, rax
  0239f	74 16		 je	 SHORT $LN198@compressRo
  023a1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  023a5	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  023a9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  023ad	48 0b c8	 or	 rcx, rax
  023b0	48 8b c1	 mov	 rax, rcx
  023b3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN198@compressRo:
; Line 419
  023b7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  023bb	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  023bf	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  023c3	48 23 c8	 and	 rcx, rax
  023c6	48 8b c1	 mov	 rax, rcx
  023c9	48 85 c0	 test	 rax, rax
  023cc	74 16		 je	 SHORT $LN199@compressRo
  023ce	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  023d2	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  023d6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  023da	48 0b c8	 or	 rcx, rax
  023dd	48 8b c1	 mov	 rax, rcx
  023e0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN199@compressRo:
; Line 420
  023e4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  023e8	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  023ec	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  023f0	48 23 c8	 and	 rcx, rax
  023f3	48 8b c1	 mov	 rax, rcx
  023f6	48 85 c0	 test	 rax, rax
  023f9	74 16		 je	 SHORT $LN200@compressRo
  023fb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  023ff	48 c1 e0 1c	 shl	 rax, 28
  02403	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02407	48 0b c8	 or	 rcx, rax
  0240a	48 8b c1	 mov	 rax, rcx
  0240d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN200@compressRo:
; Line 421
  02411	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02415	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  02419	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0241d	48 23 c8	 and	 rcx, rax
  02420	48 8b c1	 mov	 rax, rcx
  02423	48 85 c0	 test	 rax, rax
  02426	74 16		 je	 SHORT $LN201@compressRo
  02428	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0242c	48 c1 e0 1e	 shl	 rax, 30
  02430	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02434	48 0b c8	 or	 rcx, rax
  02437	48 8b c1	 mov	 rax, rcx
  0243a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN201@compressRo:
; Line 422
  0243e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02442	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  02446	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0244a	48 23 c8	 and	 rcx, rax
  0244d	48 8b c1	 mov	 rax, rcx
  02450	48 85 c0	 test	 rax, rax
  02453	74 16		 je	 SHORT $LN202@compressRo
  02455	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02459	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  0245d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02461	48 0b c8	 or	 rcx, rax
  02464	48 8b c1	 mov	 rax, rcx
  02467	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN202@compressRo:
; Line 423
  0246b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0246f	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  02473	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02477	48 23 c8	 and	 rcx, rax
  0247a	48 8b c1	 mov	 rax, rcx
  0247d	48 85 c0	 test	 rax, rax
  02480	74 16		 je	 SHORT $LN203@compressRo
  02482	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02486	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  0248a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0248e	48 0b c8	 or	 rcx, rax
  02491	48 8b c1	 mov	 rax, rcx
  02494	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN203@compressRo:
; Line 424
  02498	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0249c	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  024a0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  024a4	48 23 c8	 and	 rcx, rax
  024a7	48 8b c1	 mov	 rax, rcx
  024aa	48 85 c0	 test	 rax, rax
  024ad	74 16		 je	 SHORT $LN204@compressRo
  024af	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  024b3	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  024b7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  024bb	48 0b c8	 or	 rcx, rax
  024be	48 8b c1	 mov	 rax, rcx
  024c1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN204@compressRo:
; Line 425
  024c5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  024c9	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  024cd	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  024d1	48 23 c8	 and	 rcx, rax
  024d4	48 8b c1	 mov	 rax, rcx
  024d7	48 85 c0	 test	 rax, rax
  024da	74 16		 je	 SHORT $LN205@compressRo
  024dc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  024e0	48 c1 e0 19	 shl	 rax, 25
  024e4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  024e8	48 0b c8	 or	 rcx, rax
  024eb	48 8b c1	 mov	 rax, rcx
  024ee	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN205@compressRo:
; Line 426
  024f2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  024f6	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  024fa	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  024fe	48 23 c8	 and	 rcx, rax
  02501	48 8b c1	 mov	 rax, rcx
  02504	48 85 c0	 test	 rax, rax
  02507	74 16		 je	 SHORT $LN206@compressRo
  02509	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0250d	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  02511	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02515	48 0b c8	 or	 rcx, rax
  02518	48 8b c1	 mov	 rax, rcx
  0251b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN206@compressRo:
; Line 427
  0251f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02523	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  02527	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0252b	48 23 c8	 and	 rcx, rax
  0252e	48 8b c1	 mov	 rax, rcx
  02531	48 85 c0	 test	 rax, rax
  02534	74 16		 je	 SHORT $LN207@compressRo
  02536	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0253a	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  0253e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02542	48 0b c8	 or	 rcx, rax
  02545	48 8b c1	 mov	 rax, rcx
  02548	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN207@compressRo:
; Line 428
  0254c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02550	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  02554	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02558	48 23 c8	 and	 rcx, rax
  0255b	48 8b c1	 mov	 rax, rcx
  0255e	48 85 c0	 test	 rax, rax
  02561	74 16		 je	 SHORT $LN208@compressRo
  02563	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02567	48 c1 e0 1d	 shl	 rax, 29
  0256b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0256f	48 0b c8	 or	 rcx, rax
  02572	48 8b c1	 mov	 rax, rcx
  02575	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN208@compressRo:
; Line 429
  02579	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0257d	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  02581	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02585	48 23 c8	 and	 rcx, rax
  02588	48 8b c1	 mov	 rax, rcx
  0258b	48 85 c0	 test	 rax, rax
  0258e	74 16		 je	 SHORT $LN209@compressRo
  02590	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02594	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  02598	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0259c	48 0b c8	 or	 rcx, rax
  0259f	48 8b c1	 mov	 rax, rcx
  025a2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN209@compressRo:
; Line 430
  025a6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  025aa	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  025ae	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  025b2	48 23 c8	 and	 rcx, rax
  025b5	48 8b c1	 mov	 rax, rcx
  025b8	48 85 c0	 test	 rax, rax
  025bb	74 16		 je	 SHORT $LN210@compressRo
  025bd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  025c1	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  025c5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  025c9	48 0b c8	 or	 rcx, rax
  025cc	48 8b c1	 mov	 rax, rcx
  025cf	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN210@compressRo:
; Line 431
  025d3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  025d7	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  025db	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  025df	48 23 c8	 and	 rcx, rax
  025e2	48 8b c1	 mov	 rax, rcx
  025e5	48 85 c0	 test	 rax, rax
  025e8	74 16		 je	 SHORT $LN211@compressRo
  025ea	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  025ee	48 c1 e0 1a	 shl	 rax, 26
  025f2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  025f6	48 0b c8	 or	 rcx, rax
  025f9	48 8b c1	 mov	 rax, rcx
  025fc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN211@compressRo:
; Line 432
  02600	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02604	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  02608	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0260c	48 23 c8	 and	 rcx, rax
  0260f	48 8b c1	 mov	 rax, rcx
  02612	48 85 c0	 test	 rax, rax
  02615	74 16		 je	 SHORT $LN212@compressRo
  02617	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0261b	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  0261f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02623	48 0b c8	 or	 rcx, rax
  02626	48 8b c1	 mov	 rax, rcx
  02629	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN212@compressRo:
; Line 433
  0262d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02631	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  02635	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02639	48 23 c8	 and	 rcx, rax
  0263c	48 8b c1	 mov	 rax, rcx
  0263f	48 85 c0	 test	 rax, rax
  02642	74 16		 je	 SHORT $LN213@compressRo
  02644	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02648	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  0264c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02650	48 0b c8	 or	 rcx, rax
  02653	48 8b c1	 mov	 rax, rcx
  02656	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN213@compressRo:
; Line 434
  0265a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0265e	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  02662	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02666	48 23 c8	 and	 rcx, rax
  02669	48 8b c1	 mov	 rax, rcx
  0266c	48 85 c0	 test	 rax, rax
  0266f	74 16		 je	 SHORT $LN214@compressRo
  02671	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02675	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  02679	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0267d	48 0b c8	 or	 rcx, rax
  02680	48 8b c1	 mov	 rax, rcx
  02683	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN214@compressRo:
; Line 435
  02687	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0268b	48 c1 e0 1e	 shl	 rax, 30
  0268f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02693	48 23 c8	 and	 rcx, rax
  02696	48 8b c1	 mov	 rax, rcx
  02699	48 85 c0	 test	 rax, rax
  0269c	74 16		 je	 SHORT $LN215@compressRo
  0269e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  026a2	48 c1 e0 1f	 shl	 rax, 31
  026a6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  026aa	48 0b c8	 or	 rcx, rax
  026ad	48 8b c1	 mov	 rax, rcx
  026b0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN215@compressRo:
; Line 436
  026b4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  026b8	48 c1 e0 1d	 shl	 rax, 29
  026bc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  026c0	48 23 c8	 and	 rcx, rax
  026c3	48 8b c1	 mov	 rax, rcx
  026c6	48 85 c0	 test	 rax, rax
  026c9	74 16		 je	 SHORT $LN216@compressRo
  026cb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  026cf	48 c1 e0 1b	 shl	 rax, 27
  026d3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  026d7	48 0b c8	 or	 rcx, rax
  026da	48 8b c1	 mov	 rax, rcx
  026dd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN216@compressRo:
; Line 437
  026e1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  026e5	48 c1 e0 1c	 shl	 rax, 28
  026e9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  026ed	48 23 c8	 and	 rcx, rax
  026f0	48 8b c1	 mov	 rax, rcx
  026f3	48 85 c0	 test	 rax, rax
  026f6	74 16		 je	 SHORT $LN217@compressRo
  026f8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  026fc	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  02700	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02704	48 0b c8	 or	 rcx, rax
  02707	48 8b c1	 mov	 rax, rcx
  0270a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN217@compressRo:
; Line 438
  0270e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02712	48 c1 e0 1b	 shl	 rax, 27
  02716	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0271a	48 23 c8	 and	 rcx, rax
  0271d	48 8b c1	 mov	 rax, rcx
  02720	48 85 c0	 test	 rax, rax
  02723	74 15		 je	 SHORT $LN218@compressRo
  02725	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02729	48 d1 e0	 shl	 rax, 1
  0272c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02730	48 0b c8	 or	 rcx, rax
  02733	48 8b c1	 mov	 rax, rcx
  02736	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN218@compressRo:
; Line 439
  0273a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0273e	48 c1 e0 1a	 shl	 rax, 26
  02742	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02746	48 23 c8	 and	 rcx, rax
  02749	48 8b c1	 mov	 rax, rcx
  0274c	48 85 c0	 test	 rax, rax
  0274f	74 16		 je	 SHORT $LN219@compressRo
  02751	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02755	48 c1 e0 11	 shl	 rax, 17
  02759	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0275d	48 0b c8	 or	 rcx, rax
  02760	48 8b c1	 mov	 rax, rcx
  02763	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN219@compressRo:
; Line 440
  02767	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0276b	48 c1 e0 19	 shl	 rax, 25
  0276f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02773	48 23 c8	 and	 rcx, rax
  02776	48 8b c1	 mov	 rax, rcx
  02779	48 85 c0	 test	 rax, rax
  0277c	74 16		 je	 SHORT $LN220@compressRo
  0277e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02782	48 c1 e0 15	 shl	 rax, 21
  02786	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0278a	48 0b c8	 or	 rcx, rax
  0278d	48 8b c1	 mov	 rax, rcx
  02790	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN220@compressRo:
; Line 441
  02794	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02798	48 c1 e0 18	 shl	 rax, 24
  0279c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  027a0	48 23 c8	 and	 rcx, rax
  027a3	48 8b c1	 mov	 rax, rcx
  027a6	48 85 c0	 test	 rax, rax
  027a9	74 12		 je	 SHORT $LN221@compressRo
  027ab	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  027af	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  027b3	48 0b c8	 or	 rcx, rax
  027b6	48 8b c1	 mov	 rax, rcx
  027b9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN221@compressRo:
; Line 442
  027bd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  027c1	48 c1 e0 17	 shl	 rax, 23
  027c5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  027c9	48 23 c8	 and	 rcx, rax
  027cc	48 8b c1	 mov	 rax, rcx
  027cf	48 85 c0	 test	 rax, rax
  027d2	74 16		 je	 SHORT $LN222@compressRo
  027d4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  027d8	48 c1 e0 0d	 shl	 rax, 13
  027dc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  027e0	48 0b c8	 or	 rcx, rax
  027e3	48 8b c1	 mov	 rax, rcx
  027e6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN222@compressRo:
; Line 443
  027ea	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  027ee	48 c1 e0 16	 shl	 rax, 22
  027f2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  027f6	48 23 c8	 and	 rcx, rax
  027f9	48 8b c1	 mov	 rax, rcx
  027fc	48 85 c0	 test	 rax, rax
  027ff	74 16		 je	 SHORT $LN223@compressRo
  02801	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02805	48 c1 e0 07	 shl	 rax, 7
  02809	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0280d	48 0b c8	 or	 rcx, rax
  02810	48 8b c1	 mov	 rax, rcx
  02813	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN223@compressRo:
; Line 444
  02817	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0281b	48 c1 e0 14	 shl	 rax, 20
  0281f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02823	48 23 c8	 and	 rcx, rax
  02826	48 8b c1	 mov	 rax, rcx
  02829	48 85 c0	 test	 rax, rax
  0282c	74 16		 je	 SHORT $LN224@compressRo
  0282e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02832	48 c1 e0 02	 shl	 rax, 2
  02836	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0283a	48 0b c8	 or	 rcx, rax
  0283d	48 8b c1	 mov	 rax, rcx
  02840	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN224@compressRo:
; Line 445
  02844	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02848	48 c1 e0 13	 shl	 rax, 19
  0284c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02850	48 23 c8	 and	 rcx, rax
  02853	48 8b c1	 mov	 rax, rcx
  02856	48 85 c0	 test	 rax, rax
  02859	74 16		 je	 SHORT $LN225@compressRo
  0285b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0285f	48 c1 e0 14	 shl	 rax, 20
  02863	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02867	48 0b c8	 or	 rcx, rax
  0286a	48 8b c1	 mov	 rax, rcx
  0286d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN225@compressRo:
; Line 446
  02871	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02875	48 c1 e0 11	 shl	 rax, 17
  02879	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0287d	48 23 c8	 and	 rcx, rax
  02880	48 8b c1	 mov	 rax, rcx
  02883	48 85 c0	 test	 rax, rax
  02886	74 16		 je	 SHORT $LN226@compressRo
  02888	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0288c	48 c1 e0 09	 shl	 rax, 9
  02890	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02894	48 0b c8	 or	 rcx, rax
  02897	48 8b c1	 mov	 rax, rcx
  0289a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN226@compressRo:
; Line 447
  0289e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  028a2	48 c1 e0 10	 shl	 rax, 16
  028a6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  028aa	48 23 c8	 and	 rcx, rax
  028ad	48 8b c1	 mov	 rax, rcx
  028b0	48 85 c0	 test	 rax, rax
  028b3	74 16		 je	 SHORT $LN227@compressRo
  028b5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  028b9	48 c1 e0 10	 shl	 rax, 16
  028bd	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  028c1	48 0b c8	 or	 rcx, rax
  028c4	48 8b c1	 mov	 rax, rcx
  028c7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN227@compressRo:
; Line 448
  028cb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  028cf	48 c1 e0 0f	 shl	 rax, 15
  028d3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  028d7	48 23 c8	 and	 rcx, rax
  028da	48 8b c1	 mov	 rax, rcx
  028dd	48 85 c0	 test	 rax, rax
  028e0	74 16		 je	 SHORT $LN228@compressRo
  028e2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  028e6	48 c1 e0 17	 shl	 rax, 23
  028ea	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  028ee	48 0b c8	 or	 rcx, rax
  028f1	48 8b c1	 mov	 rax, rcx
  028f4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN228@compressRo:
; Line 449
  028f8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  028fc	48 c1 e0 0e	 shl	 rax, 14
  02900	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02904	48 23 c8	 and	 rcx, rax
  02907	48 8b c1	 mov	 rax, rcx
  0290a	48 85 c0	 test	 rax, rax
  0290d	74 16		 je	 SHORT $LN229@compressRo
  0290f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02913	48 c1 e0 04	 shl	 rax, 4
  02917	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0291b	48 0b c8	 or	 rcx, rax
  0291e	48 8b c1	 mov	 rax, rcx
  02921	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN229@compressRo:
; Line 450
  02925	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02929	48 c1 e0 0c	 shl	 rax, 12
  0292d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02931	48 23 c8	 and	 rcx, rax
  02934	48 8b c1	 mov	 rax, rcx
  02937	48 85 c0	 test	 rax, rax
  0293a	74 16		 je	 SHORT $LN230@compressRo
  0293c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02940	48 c1 e0 0b	 shl	 rax, 11
  02944	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02948	48 0b c8	 or	 rcx, rax
  0294b	48 8b c1	 mov	 rax, rcx
  0294e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN230@compressRo:
; Line 451
  02952	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02956	48 c1 e0 0b	 shl	 rax, 11
  0295a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0295e	48 23 c8	 and	 rcx, rax
  02961	48 8b c1	 mov	 rax, rcx
  02964	48 85 c0	 test	 rax, rax
  02967	74 16		 je	 SHORT $LN231@compressRo
  02969	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0296d	48 c1 e0 0e	 shl	 rax, 14
  02971	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02975	48 0b c8	 or	 rcx, rax
  02978	48 8b c1	 mov	 rax, rcx
  0297b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN231@compressRo:
; Line 452
  0297f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02983	48 c1 e0 0a	 shl	 rax, 10
  02987	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0298b	48 23 c8	 and	 rcx, rax
  0298e	48 8b c1	 mov	 rax, rcx
  02991	48 85 c0	 test	 rax, rax
  02994	74 16		 je	 SHORT $LN232@compressRo
  02996	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0299a	48 c1 e0 05	 shl	 rax, 5
  0299e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  029a2	48 0b c8	 or	 rcx, rax
  029a5	48 8b c1	 mov	 rax, rcx
  029a8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN232@compressRo:
; Line 453
  029ac	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  029b0	48 c1 e0 09	 shl	 rax, 9
  029b4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  029b8	48 23 c8	 and	 rcx, rax
  029bb	48 8b c1	 mov	 rax, rcx
  029be	48 85 c0	 test	 rax, rax
  029c1	74 16		 je	 SHORT $LN233@compressRo
  029c3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  029c7	48 c1 e0 13	 shl	 rax, 19
  029cb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  029cf	48 0b c8	 or	 rcx, rax
  029d2	48 8b c1	 mov	 rax, rcx
  029d5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN233@compressRo:
; Line 454
  029d9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  029dd	48 c1 e0 08	 shl	 rax, 8
  029e1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  029e5	48 23 c8	 and	 rcx, rax
  029e8	48 8b c1	 mov	 rax, rcx
  029eb	48 85 c0	 test	 rax, rax
  029ee	74 16		 je	 SHORT $LN234@compressRo
  029f0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  029f4	48 c1 e0 0c	 shl	 rax, 12
  029f8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  029fc	48 0b c8	 or	 rcx, rax
  029ff	48 8b c1	 mov	 rax, rcx
  02a02	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN234@compressRo:
; Line 455
  02a06	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02a0a	48 c1 e0 07	 shl	 rax, 7
  02a0e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02a12	48 23 c8	 and	 rcx, rax
  02a15	48 8b c1	 mov	 rax, rcx
  02a18	48 85 c0	 test	 rax, rax
  02a1b	74 16		 je	 SHORT $LN235@compressRo
  02a1d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02a21	48 c1 e0 0a	 shl	 rax, 10
  02a25	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02a29	48 0b c8	 or	 rcx, rax
  02a2c	48 8b c1	 mov	 rax, rcx
  02a2f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN235@compressRo:
; Line 456
  02a33	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02a37	48 c1 e0 06	 shl	 rax, 6
  02a3b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02a3f	48 23 c8	 and	 rcx, rax
  02a42	48 8b c1	 mov	 rax, rcx
  02a45	48 85 c0	 test	 rax, rax
  02a48	74 16		 je	 SHORT $LN236@compressRo
  02a4a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02a4e	48 c1 e0 03	 shl	 rax, 3
  02a52	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02a56	48 0b c8	 or	 rcx, rax
  02a59	48 8b c1	 mov	 rax, rcx
  02a5c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN236@compressRo:
; Line 457
  02a60	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02a64	48 c1 e0 05	 shl	 rax, 5
  02a68	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02a6c	48 23 c8	 and	 rcx, rax
  02a6f	48 8b c1	 mov	 rax, rcx
  02a72	48 85 c0	 test	 rax, rax
  02a75	74 16		 je	 SHORT $LN237@compressRo
  02a77	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02a7b	48 c1 e0 0f	 shl	 rax, 15
  02a7f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02a83	48 0b c8	 or	 rcx, rax
  02a86	48 8b c1	 mov	 rax, rcx
  02a89	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN237@compressRo:
; Line 458
  02a8d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02a91	48 c1 e0 04	 shl	 rax, 4
  02a95	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02a99	48 23 c8	 and	 rcx, rax
  02a9c	48 8b c1	 mov	 rax, rcx
  02a9f	48 85 c0	 test	 rax, rax
  02aa2	74 16		 je	 SHORT $LN238@compressRo
  02aa4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02aa8	48 c1 e0 16	 shl	 rax, 22
  02aac	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02ab0	48 0b c8	 or	 rcx, rax
  02ab3	48 8b c1	 mov	 rax, rcx
  02ab6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN238@compressRo:
; Line 459
  02aba	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02abe	48 c1 e0 03	 shl	 rax, 3
  02ac2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02ac6	48 23 c8	 and	 rcx, rax
  02ac9	48 8b c1	 mov	 rax, rcx
  02acc	48 85 c0	 test	 rax, rax
  02acf	74 16		 je	 SHORT $LN239@compressRo
  02ad1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02ad5	48 c1 e0 06	 shl	 rax, 6
  02ad9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02add	48 0b c8	 or	 rcx, rax
  02ae0	48 8b c1	 mov	 rax, rcx
  02ae3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN239@compressRo:
; Line 460
  02ae7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02aeb	48 d1 e0	 shl	 rax, 1
  02aee	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02af2	48 23 c8	 and	 rcx, rax
  02af5	48 8b c1	 mov	 rax, rcx
  02af8	48 85 c0	 test	 rax, rax
  02afb	74 16		 je	 SHORT $LN240@compressRo
  02afd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02b01	48 c1 e0 12	 shl	 rax, 18
  02b05	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02b09	48 0b c8	 or	 rcx, rax
  02b0c	48 8b c1	 mov	 rax, rcx
  02b0f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN240@compressRo:
; Line 461
  02b13	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02b17	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02b1b	48 23 c8	 and	 rcx, rax
  02b1e	48 8b c1	 mov	 rax, rcx
  02b21	48 85 c0	 test	 rax, rax
  02b24	74 16		 je	 SHORT $LN241@compressRo
  02b26	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02b2a	48 c1 e0 08	 shl	 rax, 8
  02b2e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02b32	48 0b c8	 or	 rcx, rax
  02b35	48 8b c1	 mov	 rax, rcx
  02b38	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN241@compressRo:
; Line 462
  02b3c	b8 08 00 00 00	 mov	 eax, 8
  02b41	48 6b c0 05	 imul	 rax, rax, 5
  02b45	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  02b4c	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  02b50	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 464
  02b54	b8 08 00 00 00	 mov	 eax, 8
  02b59	48 6b c0 06	 imul	 rax, rax, 6
  02b5d	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  02b64	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  02b68	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 465
  02b6c	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 468
  02b74	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02b78	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  02b7c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02b80	48 23 c8	 and	 rcx, rax
  02b83	48 8b c1	 mov	 rax, rcx
  02b86	48 85 c0	 test	 rax, rax
  02b89	74 16		 je	 SHORT $LN242@compressRo
  02b8b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02b8f	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  02b93	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02b97	48 0b c8	 or	 rcx, rax
  02b9a	48 8b c1	 mov	 rax, rcx
  02b9d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN242@compressRo:
; Line 469
  02ba1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02ba5	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  02ba9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02bad	48 23 c8	 and	 rcx, rax
  02bb0	48 8b c1	 mov	 rax, rcx
  02bb3	48 85 c0	 test	 rax, rax
  02bb6	74 16		 je	 SHORT $LN243@compressRo
  02bb8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02bbc	48 c1 e0 18	 shl	 rax, 24
  02bc0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02bc4	48 0b c8	 or	 rcx, rax
  02bc7	48 8b c1	 mov	 rax, rcx
  02bca	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN243@compressRo:
; Line 470
  02bce	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02bd2	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  02bd6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02bda	48 23 c8	 and	 rcx, rax
  02bdd	48 8b c1	 mov	 rax, rcx
  02be0	48 85 c0	 test	 rax, rax
  02be3	74 16		 je	 SHORT $LN244@compressRo
  02be5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02be9	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  02bed	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02bf1	48 0b c8	 or	 rcx, rax
  02bf4	48 8b c1	 mov	 rax, rcx
  02bf7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN244@compressRo:
; Line 471
  02bfb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02bff	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  02c03	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02c07	48 23 c8	 and	 rcx, rax
  02c0a	48 8b c1	 mov	 rax, rcx
  02c0d	48 85 c0	 test	 rax, rax
  02c10	74 16		 je	 SHORT $LN245@compressRo
  02c12	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02c16	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  02c1a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02c1e	48 0b c8	 or	 rcx, rax
  02c21	48 8b c1	 mov	 rax, rcx
  02c24	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN245@compressRo:
; Line 472
  02c28	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02c2c	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  02c30	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02c34	48 23 c8	 and	 rcx, rax
  02c37	48 8b c1	 mov	 rax, rcx
  02c3a	48 85 c0	 test	 rax, rax
  02c3d	74 16		 je	 SHORT $LN246@compressRo
  02c3f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02c43	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  02c47	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02c4b	48 0b c8	 or	 rcx, rax
  02c4e	48 8b c1	 mov	 rax, rcx
  02c51	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN246@compressRo:
; Line 473
  02c55	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02c59	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  02c5d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02c61	48 23 c8	 and	 rcx, rax
  02c64	48 8b c1	 mov	 rax, rcx
  02c67	48 85 c0	 test	 rax, rax
  02c6a	74 16		 je	 SHORT $LN247@compressRo
  02c6c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02c70	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  02c74	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02c78	48 0b c8	 or	 rcx, rax
  02c7b	48 8b c1	 mov	 rax, rcx
  02c7e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN247@compressRo:
; Line 474
  02c82	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02c86	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  02c8a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02c8e	48 23 c8	 and	 rcx, rax
  02c91	48 8b c1	 mov	 rax, rcx
  02c94	48 85 c0	 test	 rax, rax
  02c97	74 16		 je	 SHORT $LN248@compressRo
  02c99	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02c9d	48 c1 e0 1c	 shl	 rax, 28
  02ca1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02ca5	48 0b c8	 or	 rcx, rax
  02ca8	48 8b c1	 mov	 rax, rcx
  02cab	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN248@compressRo:
; Line 475
  02caf	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02cb3	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  02cb7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02cbb	48 23 c8	 and	 rcx, rax
  02cbe	48 8b c1	 mov	 rax, rcx
  02cc1	48 85 c0	 test	 rax, rax
  02cc4	74 16		 je	 SHORT $LN249@compressRo
  02cc6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02cca	48 c1 e0 1e	 shl	 rax, 30
  02cce	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02cd2	48 0b c8	 or	 rcx, rax
  02cd5	48 8b c1	 mov	 rax, rcx
  02cd8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN249@compressRo:
; Line 476
  02cdc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02ce0	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  02ce4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02ce8	48 23 c8	 and	 rcx, rax
  02ceb	48 8b c1	 mov	 rax, rcx
  02cee	48 85 c0	 test	 rax, rax
  02cf1	74 16		 je	 SHORT $LN250@compressRo
  02cf3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02cf7	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  02cfb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02cff	48 0b c8	 or	 rcx, rax
  02d02	48 8b c1	 mov	 rax, rcx
  02d05	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN250@compressRo:
; Line 477
  02d09	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02d0d	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  02d11	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02d15	48 23 c8	 and	 rcx, rax
  02d18	48 8b c1	 mov	 rax, rcx
  02d1b	48 85 c0	 test	 rax, rax
  02d1e	74 16		 je	 SHORT $LN251@compressRo
  02d20	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02d24	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  02d28	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02d2c	48 0b c8	 or	 rcx, rax
  02d2f	48 8b c1	 mov	 rax, rcx
  02d32	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN251@compressRo:
; Line 478
  02d36	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02d3a	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  02d3e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02d42	48 23 c8	 and	 rcx, rax
  02d45	48 8b c1	 mov	 rax, rcx
  02d48	48 85 c0	 test	 rax, rax
  02d4b	74 16		 je	 SHORT $LN252@compressRo
  02d4d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02d51	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  02d55	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02d59	48 0b c8	 or	 rcx, rax
  02d5c	48 8b c1	 mov	 rax, rcx
  02d5f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN252@compressRo:
; Line 479
  02d63	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02d67	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  02d6b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02d6f	48 23 c8	 and	 rcx, rax
  02d72	48 8b c1	 mov	 rax, rcx
  02d75	48 85 c0	 test	 rax, rax
  02d78	74 16		 je	 SHORT $LN253@compressRo
  02d7a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02d7e	48 c1 e0 19	 shl	 rax, 25
  02d82	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02d86	48 0b c8	 or	 rcx, rax
  02d89	48 8b c1	 mov	 rax, rcx
  02d8c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN253@compressRo:
; Line 480
  02d90	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02d94	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  02d98	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02d9c	48 23 c8	 and	 rcx, rax
  02d9f	48 8b c1	 mov	 rax, rcx
  02da2	48 85 c0	 test	 rax, rax
  02da5	74 16		 je	 SHORT $LN254@compressRo
  02da7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02dab	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  02daf	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02db3	48 0b c8	 or	 rcx, rax
  02db6	48 8b c1	 mov	 rax, rcx
  02db9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN254@compressRo:
; Line 481
  02dbd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02dc1	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  02dc5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02dc9	48 23 c8	 and	 rcx, rax
  02dcc	48 8b c1	 mov	 rax, rcx
  02dcf	48 85 c0	 test	 rax, rax
  02dd2	74 16		 je	 SHORT $LN255@compressRo
  02dd4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02dd8	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  02ddc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02de0	48 0b c8	 or	 rcx, rax
  02de3	48 8b c1	 mov	 rax, rcx
  02de6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN255@compressRo:
; Line 482
  02dea	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02dee	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  02df2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02df6	48 23 c8	 and	 rcx, rax
  02df9	48 8b c1	 mov	 rax, rcx
  02dfc	48 85 c0	 test	 rax, rax
  02dff	74 16		 je	 SHORT $LN256@compressRo
  02e01	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02e05	48 c1 e0 1d	 shl	 rax, 29
  02e09	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02e0d	48 0b c8	 or	 rcx, rax
  02e10	48 8b c1	 mov	 rax, rcx
  02e13	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN256@compressRo:
; Line 483
  02e17	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02e1b	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  02e1f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02e23	48 23 c8	 and	 rcx, rax
  02e26	48 8b c1	 mov	 rax, rcx
  02e29	48 85 c0	 test	 rax, rax
  02e2c	74 16		 je	 SHORT $LN257@compressRo
  02e2e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02e32	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  02e36	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02e3a	48 0b c8	 or	 rcx, rax
  02e3d	48 8b c1	 mov	 rax, rcx
  02e40	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN257@compressRo:
; Line 484
  02e44	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02e48	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  02e4c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02e50	48 23 c8	 and	 rcx, rax
  02e53	48 8b c1	 mov	 rax, rcx
  02e56	48 85 c0	 test	 rax, rax
  02e59	74 16		 je	 SHORT $LN258@compressRo
  02e5b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02e5f	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  02e63	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02e67	48 0b c8	 or	 rcx, rax
  02e6a	48 8b c1	 mov	 rax, rcx
  02e6d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN258@compressRo:
; Line 485
  02e71	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02e75	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  02e79	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02e7d	48 23 c8	 and	 rcx, rax
  02e80	48 8b c1	 mov	 rax, rcx
  02e83	48 85 c0	 test	 rax, rax
  02e86	74 16		 je	 SHORT $LN259@compressRo
  02e88	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02e8c	48 c1 e0 1a	 shl	 rax, 26
  02e90	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02e94	48 0b c8	 or	 rcx, rax
  02e97	48 8b c1	 mov	 rax, rcx
  02e9a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN259@compressRo:
; Line 486
  02e9e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02ea2	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  02ea6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02eaa	48 23 c8	 and	 rcx, rax
  02ead	48 8b c1	 mov	 rax, rcx
  02eb0	48 85 c0	 test	 rax, rax
  02eb3	74 16		 je	 SHORT $LN260@compressRo
  02eb5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02eb9	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  02ebd	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02ec1	48 0b c8	 or	 rcx, rax
  02ec4	48 8b c1	 mov	 rax, rcx
  02ec7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN260@compressRo:
; Line 487
  02ecb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02ecf	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  02ed3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02ed7	48 23 c8	 and	 rcx, rax
  02eda	48 8b c1	 mov	 rax, rcx
  02edd	48 85 c0	 test	 rax, rax
  02ee0	74 16		 je	 SHORT $LN261@compressRo
  02ee2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02ee6	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  02eea	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02eee	48 0b c8	 or	 rcx, rax
  02ef1	48 8b c1	 mov	 rax, rcx
  02ef4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN261@compressRo:
; Line 488
  02ef8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02efc	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  02f00	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02f04	48 23 c8	 and	 rcx, rax
  02f07	48 8b c1	 mov	 rax, rcx
  02f0a	48 85 c0	 test	 rax, rax
  02f0d	74 16		 je	 SHORT $LN262@compressRo
  02f0f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02f13	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  02f17	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02f1b	48 0b c8	 or	 rcx, rax
  02f1e	48 8b c1	 mov	 rax, rcx
  02f21	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN262@compressRo:
; Line 489
  02f25	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02f29	48 c1 e0 1e	 shl	 rax, 30
  02f2d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02f31	48 23 c8	 and	 rcx, rax
  02f34	48 8b c1	 mov	 rax, rcx
  02f37	48 85 c0	 test	 rax, rax
  02f3a	74 16		 je	 SHORT $LN263@compressRo
  02f3c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02f40	48 c1 e0 1f	 shl	 rax, 31
  02f44	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02f48	48 0b c8	 or	 rcx, rax
  02f4b	48 8b c1	 mov	 rax, rcx
  02f4e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN263@compressRo:
; Line 490
  02f52	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02f56	48 c1 e0 1d	 shl	 rax, 29
  02f5a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02f5e	48 23 c8	 and	 rcx, rax
  02f61	48 8b c1	 mov	 rax, rcx
  02f64	48 85 c0	 test	 rax, rax
  02f67	74 16		 je	 SHORT $LN264@compressRo
  02f69	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02f6d	48 c1 e0 1b	 shl	 rax, 27
  02f71	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02f75	48 0b c8	 or	 rcx, rax
  02f78	48 8b c1	 mov	 rax, rcx
  02f7b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN264@compressRo:
; Line 491
  02f7f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02f83	48 c1 e0 1c	 shl	 rax, 28
  02f87	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02f8b	48 23 c8	 and	 rcx, rax
  02f8e	48 8b c1	 mov	 rax, rcx
  02f91	48 85 c0	 test	 rax, rax
  02f94	74 16		 je	 SHORT $LN265@compressRo
  02f96	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02f9a	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  02f9e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02fa2	48 0b c8	 or	 rcx, rax
  02fa5	48 8b c1	 mov	 rax, rcx
  02fa8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN265@compressRo:
; Line 492
  02fac	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02fb0	48 c1 e0 1b	 shl	 rax, 27
  02fb4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02fb8	48 23 c8	 and	 rcx, rax
  02fbb	48 8b c1	 mov	 rax, rcx
  02fbe	48 85 c0	 test	 rax, rax
  02fc1	74 15		 je	 SHORT $LN266@compressRo
  02fc3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02fc7	48 d1 e0	 shl	 rax, 1
  02fca	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02fce	48 0b c8	 or	 rcx, rax
  02fd1	48 8b c1	 mov	 rax, rcx
  02fd4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN266@compressRo:
; Line 493
  02fd8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02fdc	48 c1 e0 1a	 shl	 rax, 26
  02fe0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  02fe4	48 23 c8	 and	 rcx, rax
  02fe7	48 8b c1	 mov	 rax, rcx
  02fea	48 85 c0	 test	 rax, rax
  02fed	74 16		 je	 SHORT $LN267@compressRo
  02fef	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  02ff3	48 c1 e0 11	 shl	 rax, 17
  02ff7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  02ffb	48 0b c8	 or	 rcx, rax
  02ffe	48 8b c1	 mov	 rax, rcx
  03001	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN267@compressRo:
; Line 494
  03005	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03009	48 c1 e0 19	 shl	 rax, 25
  0300d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03011	48 23 c8	 and	 rcx, rax
  03014	48 8b c1	 mov	 rax, rcx
  03017	48 85 c0	 test	 rax, rax
  0301a	74 16		 je	 SHORT $LN268@compressRo
  0301c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03020	48 c1 e0 15	 shl	 rax, 21
  03024	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03028	48 0b c8	 or	 rcx, rax
  0302b	48 8b c1	 mov	 rax, rcx
  0302e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN268@compressRo:
; Line 495
  03032	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03036	48 c1 e0 18	 shl	 rax, 24
  0303a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0303e	48 23 c8	 and	 rcx, rax
  03041	48 8b c1	 mov	 rax, rcx
  03044	48 85 c0	 test	 rax, rax
  03047	74 12		 je	 SHORT $LN269@compressRo
  03049	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0304d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03051	48 0b c8	 or	 rcx, rax
  03054	48 8b c1	 mov	 rax, rcx
  03057	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN269@compressRo:
; Line 496
  0305b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0305f	48 c1 e0 17	 shl	 rax, 23
  03063	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03067	48 23 c8	 and	 rcx, rax
  0306a	48 8b c1	 mov	 rax, rcx
  0306d	48 85 c0	 test	 rax, rax
  03070	74 16		 je	 SHORT $LN270@compressRo
  03072	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03076	48 c1 e0 0d	 shl	 rax, 13
  0307a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0307e	48 0b c8	 or	 rcx, rax
  03081	48 8b c1	 mov	 rax, rcx
  03084	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN270@compressRo:
; Line 497
  03088	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0308c	48 c1 e0 16	 shl	 rax, 22
  03090	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03094	48 23 c8	 and	 rcx, rax
  03097	48 8b c1	 mov	 rax, rcx
  0309a	48 85 c0	 test	 rax, rax
  0309d	74 16		 je	 SHORT $LN271@compressRo
  0309f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  030a3	48 c1 e0 07	 shl	 rax, 7
  030a7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  030ab	48 0b c8	 or	 rcx, rax
  030ae	48 8b c1	 mov	 rax, rcx
  030b1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN271@compressRo:
; Line 498
  030b5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  030b9	48 c1 e0 14	 shl	 rax, 20
  030bd	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  030c1	48 23 c8	 and	 rcx, rax
  030c4	48 8b c1	 mov	 rax, rcx
  030c7	48 85 c0	 test	 rax, rax
  030ca	74 16		 je	 SHORT $LN272@compressRo
  030cc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  030d0	48 c1 e0 02	 shl	 rax, 2
  030d4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  030d8	48 0b c8	 or	 rcx, rax
  030db	48 8b c1	 mov	 rax, rcx
  030de	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN272@compressRo:
; Line 499
  030e2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  030e6	48 c1 e0 13	 shl	 rax, 19
  030ea	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  030ee	48 23 c8	 and	 rcx, rax
  030f1	48 8b c1	 mov	 rax, rcx
  030f4	48 85 c0	 test	 rax, rax
  030f7	74 16		 je	 SHORT $LN273@compressRo
  030f9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  030fd	48 c1 e0 14	 shl	 rax, 20
  03101	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03105	48 0b c8	 or	 rcx, rax
  03108	48 8b c1	 mov	 rax, rcx
  0310b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN273@compressRo:
; Line 500
  0310f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03113	48 c1 e0 11	 shl	 rax, 17
  03117	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0311b	48 23 c8	 and	 rcx, rax
  0311e	48 8b c1	 mov	 rax, rcx
  03121	48 85 c0	 test	 rax, rax
  03124	74 16		 je	 SHORT $LN274@compressRo
  03126	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0312a	48 c1 e0 09	 shl	 rax, 9
  0312e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03132	48 0b c8	 or	 rcx, rax
  03135	48 8b c1	 mov	 rax, rcx
  03138	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN274@compressRo:
; Line 501
  0313c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03140	48 c1 e0 10	 shl	 rax, 16
  03144	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03148	48 23 c8	 and	 rcx, rax
  0314b	48 8b c1	 mov	 rax, rcx
  0314e	48 85 c0	 test	 rax, rax
  03151	74 16		 je	 SHORT $LN275@compressRo
  03153	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03157	48 c1 e0 10	 shl	 rax, 16
  0315b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0315f	48 0b c8	 or	 rcx, rax
  03162	48 8b c1	 mov	 rax, rcx
  03165	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN275@compressRo:
; Line 502
  03169	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0316d	48 c1 e0 0f	 shl	 rax, 15
  03171	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03175	48 23 c8	 and	 rcx, rax
  03178	48 8b c1	 mov	 rax, rcx
  0317b	48 85 c0	 test	 rax, rax
  0317e	74 16		 je	 SHORT $LN276@compressRo
  03180	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03184	48 c1 e0 17	 shl	 rax, 23
  03188	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0318c	48 0b c8	 or	 rcx, rax
  0318f	48 8b c1	 mov	 rax, rcx
  03192	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN276@compressRo:
; Line 503
  03196	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0319a	48 c1 e0 0e	 shl	 rax, 14
  0319e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  031a2	48 23 c8	 and	 rcx, rax
  031a5	48 8b c1	 mov	 rax, rcx
  031a8	48 85 c0	 test	 rax, rax
  031ab	74 16		 je	 SHORT $LN277@compressRo
  031ad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  031b1	48 c1 e0 04	 shl	 rax, 4
  031b5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  031b9	48 0b c8	 or	 rcx, rax
  031bc	48 8b c1	 mov	 rax, rcx
  031bf	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN277@compressRo:
; Line 504
  031c3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  031c7	48 c1 e0 0c	 shl	 rax, 12
  031cb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  031cf	48 23 c8	 and	 rcx, rax
  031d2	48 8b c1	 mov	 rax, rcx
  031d5	48 85 c0	 test	 rax, rax
  031d8	74 16		 je	 SHORT $LN278@compressRo
  031da	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  031de	48 c1 e0 0b	 shl	 rax, 11
  031e2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  031e6	48 0b c8	 or	 rcx, rax
  031e9	48 8b c1	 mov	 rax, rcx
  031ec	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN278@compressRo:
; Line 505
  031f0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  031f4	48 c1 e0 0b	 shl	 rax, 11
  031f8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  031fc	48 23 c8	 and	 rcx, rax
  031ff	48 8b c1	 mov	 rax, rcx
  03202	48 85 c0	 test	 rax, rax
  03205	74 16		 je	 SHORT $LN279@compressRo
  03207	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0320b	48 c1 e0 0e	 shl	 rax, 14
  0320f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03213	48 0b c8	 or	 rcx, rax
  03216	48 8b c1	 mov	 rax, rcx
  03219	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN279@compressRo:
; Line 506
  0321d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03221	48 c1 e0 0a	 shl	 rax, 10
  03225	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03229	48 23 c8	 and	 rcx, rax
  0322c	48 8b c1	 mov	 rax, rcx
  0322f	48 85 c0	 test	 rax, rax
  03232	74 16		 je	 SHORT $LN280@compressRo
  03234	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03238	48 c1 e0 05	 shl	 rax, 5
  0323c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03240	48 0b c8	 or	 rcx, rax
  03243	48 8b c1	 mov	 rax, rcx
  03246	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN280@compressRo:
; Line 507
  0324a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0324e	48 c1 e0 09	 shl	 rax, 9
  03252	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03256	48 23 c8	 and	 rcx, rax
  03259	48 8b c1	 mov	 rax, rcx
  0325c	48 85 c0	 test	 rax, rax
  0325f	74 16		 je	 SHORT $LN281@compressRo
  03261	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03265	48 c1 e0 13	 shl	 rax, 19
  03269	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0326d	48 0b c8	 or	 rcx, rax
  03270	48 8b c1	 mov	 rax, rcx
  03273	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN281@compressRo:
; Line 508
  03277	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0327b	48 c1 e0 08	 shl	 rax, 8
  0327f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03283	48 23 c8	 and	 rcx, rax
  03286	48 8b c1	 mov	 rax, rcx
  03289	48 85 c0	 test	 rax, rax
  0328c	74 16		 je	 SHORT $LN282@compressRo
  0328e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03292	48 c1 e0 0c	 shl	 rax, 12
  03296	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0329a	48 0b c8	 or	 rcx, rax
  0329d	48 8b c1	 mov	 rax, rcx
  032a0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN282@compressRo:
; Line 509
  032a4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  032a8	48 c1 e0 07	 shl	 rax, 7
  032ac	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  032b0	48 23 c8	 and	 rcx, rax
  032b3	48 8b c1	 mov	 rax, rcx
  032b6	48 85 c0	 test	 rax, rax
  032b9	74 16		 je	 SHORT $LN283@compressRo
  032bb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  032bf	48 c1 e0 0a	 shl	 rax, 10
  032c3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  032c7	48 0b c8	 or	 rcx, rax
  032ca	48 8b c1	 mov	 rax, rcx
  032cd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN283@compressRo:
; Line 510
  032d1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  032d5	48 c1 e0 06	 shl	 rax, 6
  032d9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  032dd	48 23 c8	 and	 rcx, rax
  032e0	48 8b c1	 mov	 rax, rcx
  032e3	48 85 c0	 test	 rax, rax
  032e6	74 16		 je	 SHORT $LN284@compressRo
  032e8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  032ec	48 c1 e0 03	 shl	 rax, 3
  032f0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  032f4	48 0b c8	 or	 rcx, rax
  032f7	48 8b c1	 mov	 rax, rcx
  032fa	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN284@compressRo:
; Line 511
  032fe	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03302	48 c1 e0 05	 shl	 rax, 5
  03306	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0330a	48 23 c8	 and	 rcx, rax
  0330d	48 8b c1	 mov	 rax, rcx
  03310	48 85 c0	 test	 rax, rax
  03313	74 16		 je	 SHORT $LN285@compressRo
  03315	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03319	48 c1 e0 0f	 shl	 rax, 15
  0331d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03321	48 0b c8	 or	 rcx, rax
  03324	48 8b c1	 mov	 rax, rcx
  03327	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN285@compressRo:
; Line 512
  0332b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0332f	48 c1 e0 04	 shl	 rax, 4
  03333	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03337	48 23 c8	 and	 rcx, rax
  0333a	48 8b c1	 mov	 rax, rcx
  0333d	48 85 c0	 test	 rax, rax
  03340	74 16		 je	 SHORT $LN286@compressRo
  03342	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03346	48 c1 e0 16	 shl	 rax, 22
  0334a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0334e	48 0b c8	 or	 rcx, rax
  03351	48 8b c1	 mov	 rax, rcx
  03354	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN286@compressRo:
; Line 513
  03358	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0335c	48 c1 e0 03	 shl	 rax, 3
  03360	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03364	48 23 c8	 and	 rcx, rax
  03367	48 8b c1	 mov	 rax, rcx
  0336a	48 85 c0	 test	 rax, rax
  0336d	74 16		 je	 SHORT $LN287@compressRo
  0336f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03373	48 c1 e0 06	 shl	 rax, 6
  03377	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0337b	48 0b c8	 or	 rcx, rax
  0337e	48 8b c1	 mov	 rax, rcx
  03381	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN287@compressRo:
; Line 514
  03385	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03389	48 d1 e0	 shl	 rax, 1
  0338c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03390	48 23 c8	 and	 rcx, rax
  03393	48 8b c1	 mov	 rax, rcx
  03396	48 85 c0	 test	 rax, rax
  03399	74 16		 je	 SHORT $LN288@compressRo
  0339b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0339f	48 c1 e0 12	 shl	 rax, 18
  033a3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  033a7	48 0b c8	 or	 rcx, rax
  033aa	48 8b c1	 mov	 rax, rcx
  033ad	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN288@compressRo:
; Line 515
  033b1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  033b5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  033b9	48 23 c8	 and	 rcx, rax
  033bc	48 8b c1	 mov	 rax, rcx
  033bf	48 85 c0	 test	 rax, rax
  033c2	74 16		 je	 SHORT $LN289@compressRo
  033c4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  033c8	48 c1 e0 08	 shl	 rax, 8
  033cc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  033d0	48 0b c8	 or	 rcx, rax
  033d3	48 8b c1	 mov	 rax, rcx
  033d6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN289@compressRo:
; Line 516
  033da	b8 08 00 00 00	 mov	 eax, 8
  033df	48 6b c0 06	 imul	 rax, rax, 6
  033e3	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  033ea	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  033ee	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 518
  033f2	b8 08 00 00 00	 mov	 eax, 8
  033f7	48 6b c0 07	 imul	 rax, rax, 7
  033fb	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  03402	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  03406	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 519
  0340a	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 522
  03412	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03416	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  0341a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0341e	48 23 c8	 and	 rcx, rax
  03421	48 8b c1	 mov	 rax, rcx
  03424	48 85 c0	 test	 rax, rax
  03427	74 16		 je	 SHORT $LN290@compressRo
  03429	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0342d	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  03431	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03435	48 0b c8	 or	 rcx, rax
  03438	48 8b c1	 mov	 rax, rcx
  0343b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN290@compressRo:
; Line 523
  0343f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03443	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  03447	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0344b	48 23 c8	 and	 rcx, rax
  0344e	48 8b c1	 mov	 rax, rcx
  03451	48 85 c0	 test	 rax, rax
  03454	74 16		 je	 SHORT $LN291@compressRo
  03456	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0345a	48 c1 e0 18	 shl	 rax, 24
  0345e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03462	48 0b c8	 or	 rcx, rax
  03465	48 8b c1	 mov	 rax, rcx
  03468	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN291@compressRo:
; Line 524
  0346c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03470	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  03474	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03478	48 23 c8	 and	 rcx, rax
  0347b	48 8b c1	 mov	 rax, rcx
  0347e	48 85 c0	 test	 rax, rax
  03481	74 16		 je	 SHORT $LN292@compressRo
  03483	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03487	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  0348b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0348f	48 0b c8	 or	 rcx, rax
  03492	48 8b c1	 mov	 rax, rcx
  03495	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN292@compressRo:
; Line 525
  03499	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0349d	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  034a1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  034a5	48 23 c8	 and	 rcx, rax
  034a8	48 8b c1	 mov	 rax, rcx
  034ab	48 85 c0	 test	 rax, rax
  034ae	74 16		 je	 SHORT $LN293@compressRo
  034b0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  034b4	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  034b8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  034bc	48 0b c8	 or	 rcx, rax
  034bf	48 8b c1	 mov	 rax, rcx
  034c2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN293@compressRo:
; Line 526
  034c6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  034ca	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  034ce	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  034d2	48 23 c8	 and	 rcx, rax
  034d5	48 8b c1	 mov	 rax, rcx
  034d8	48 85 c0	 test	 rax, rax
  034db	74 16		 je	 SHORT $LN294@compressRo
  034dd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  034e1	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  034e5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  034e9	48 0b c8	 or	 rcx, rax
  034ec	48 8b c1	 mov	 rax, rcx
  034ef	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN294@compressRo:
; Line 527
  034f3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  034f7	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  034fb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  034ff	48 23 c8	 and	 rcx, rax
  03502	48 8b c1	 mov	 rax, rcx
  03505	48 85 c0	 test	 rax, rax
  03508	74 16		 je	 SHORT $LN295@compressRo
  0350a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0350e	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  03512	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03516	48 0b c8	 or	 rcx, rax
  03519	48 8b c1	 mov	 rax, rcx
  0351c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN295@compressRo:
; Line 528
  03520	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03524	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  03528	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0352c	48 23 c8	 and	 rcx, rax
  0352f	48 8b c1	 mov	 rax, rcx
  03532	48 85 c0	 test	 rax, rax
  03535	74 16		 je	 SHORT $LN296@compressRo
  03537	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0353b	48 c1 e0 1c	 shl	 rax, 28
  0353f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03543	48 0b c8	 or	 rcx, rax
  03546	48 8b c1	 mov	 rax, rcx
  03549	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN296@compressRo:
; Line 529
  0354d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03551	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  03555	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03559	48 23 c8	 and	 rcx, rax
  0355c	48 8b c1	 mov	 rax, rcx
  0355f	48 85 c0	 test	 rax, rax
  03562	74 16		 je	 SHORT $LN297@compressRo
  03564	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03568	48 c1 e0 1e	 shl	 rax, 30
  0356c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03570	48 0b c8	 or	 rcx, rax
  03573	48 8b c1	 mov	 rax, rcx
  03576	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN297@compressRo:
; Line 530
  0357a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0357e	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  03582	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03586	48 23 c8	 and	 rcx, rax
  03589	48 8b c1	 mov	 rax, rcx
  0358c	48 85 c0	 test	 rax, rax
  0358f	74 16		 je	 SHORT $LN298@compressRo
  03591	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03595	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  03599	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0359d	48 0b c8	 or	 rcx, rax
  035a0	48 8b c1	 mov	 rax, rcx
  035a3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN298@compressRo:
; Line 531
  035a7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  035ab	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  035af	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  035b3	48 23 c8	 and	 rcx, rax
  035b6	48 8b c1	 mov	 rax, rcx
  035b9	48 85 c0	 test	 rax, rax
  035bc	74 16		 je	 SHORT $LN299@compressRo
  035be	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  035c2	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  035c6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  035ca	48 0b c8	 or	 rcx, rax
  035cd	48 8b c1	 mov	 rax, rcx
  035d0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN299@compressRo:
; Line 532
  035d4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  035d8	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  035dc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  035e0	48 23 c8	 and	 rcx, rax
  035e3	48 8b c1	 mov	 rax, rcx
  035e6	48 85 c0	 test	 rax, rax
  035e9	74 16		 je	 SHORT $LN300@compressRo
  035eb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  035ef	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  035f3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  035f7	48 0b c8	 or	 rcx, rax
  035fa	48 8b c1	 mov	 rax, rcx
  035fd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN300@compressRo:
; Line 533
  03601	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03605	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  03609	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0360d	48 23 c8	 and	 rcx, rax
  03610	48 8b c1	 mov	 rax, rcx
  03613	48 85 c0	 test	 rax, rax
  03616	74 16		 je	 SHORT $LN301@compressRo
  03618	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0361c	48 c1 e0 19	 shl	 rax, 25
  03620	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03624	48 0b c8	 or	 rcx, rax
  03627	48 8b c1	 mov	 rax, rcx
  0362a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN301@compressRo:
; Line 534
  0362e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03632	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  03636	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0363a	48 23 c8	 and	 rcx, rax
  0363d	48 8b c1	 mov	 rax, rcx
  03640	48 85 c0	 test	 rax, rax
  03643	74 16		 je	 SHORT $LN302@compressRo
  03645	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03649	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  0364d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03651	48 0b c8	 or	 rcx, rax
  03654	48 8b c1	 mov	 rax, rcx
  03657	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN302@compressRo:
; Line 535
  0365b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0365f	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  03663	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03667	48 23 c8	 and	 rcx, rax
  0366a	48 8b c1	 mov	 rax, rcx
  0366d	48 85 c0	 test	 rax, rax
  03670	74 16		 je	 SHORT $LN303@compressRo
  03672	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03676	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  0367a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0367e	48 0b c8	 or	 rcx, rax
  03681	48 8b c1	 mov	 rax, rcx
  03684	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN303@compressRo:
; Line 536
  03688	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0368c	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  03690	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03694	48 23 c8	 and	 rcx, rax
  03697	48 8b c1	 mov	 rax, rcx
  0369a	48 85 c0	 test	 rax, rax
  0369d	74 16		 je	 SHORT $LN304@compressRo
  0369f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  036a3	48 c1 e0 1d	 shl	 rax, 29
  036a7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  036ab	48 0b c8	 or	 rcx, rax
  036ae	48 8b c1	 mov	 rax, rcx
  036b1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN304@compressRo:
; Line 537
  036b5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  036b9	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  036bd	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  036c1	48 23 c8	 and	 rcx, rax
  036c4	48 8b c1	 mov	 rax, rcx
  036c7	48 85 c0	 test	 rax, rax
  036ca	74 16		 je	 SHORT $LN305@compressRo
  036cc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  036d0	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  036d4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  036d8	48 0b c8	 or	 rcx, rax
  036db	48 8b c1	 mov	 rax, rcx
  036de	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN305@compressRo:
; Line 538
  036e2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  036e6	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  036ea	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  036ee	48 23 c8	 and	 rcx, rax
  036f1	48 8b c1	 mov	 rax, rcx
  036f4	48 85 c0	 test	 rax, rax
  036f7	74 16		 je	 SHORT $LN306@compressRo
  036f9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  036fd	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  03701	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03705	48 0b c8	 or	 rcx, rax
  03708	48 8b c1	 mov	 rax, rcx
  0370b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN306@compressRo:
; Line 539
  0370f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03713	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  03717	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0371b	48 23 c8	 and	 rcx, rax
  0371e	48 8b c1	 mov	 rax, rcx
  03721	48 85 c0	 test	 rax, rax
  03724	74 16		 je	 SHORT $LN307@compressRo
  03726	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0372a	48 c1 e0 1a	 shl	 rax, 26
  0372e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03732	48 0b c8	 or	 rcx, rax
  03735	48 8b c1	 mov	 rax, rcx
  03738	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN307@compressRo:
; Line 540
  0373c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03740	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  03744	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03748	48 23 c8	 and	 rcx, rax
  0374b	48 8b c1	 mov	 rax, rcx
  0374e	48 85 c0	 test	 rax, rax
  03751	74 16		 je	 SHORT $LN308@compressRo
  03753	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03757	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  0375b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0375f	48 0b c8	 or	 rcx, rax
  03762	48 8b c1	 mov	 rax, rcx
  03765	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN308@compressRo:
; Line 541
  03769	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0376d	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  03771	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03775	48 23 c8	 and	 rcx, rax
  03778	48 8b c1	 mov	 rax, rcx
  0377b	48 85 c0	 test	 rax, rax
  0377e	74 16		 je	 SHORT $LN309@compressRo
  03780	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03784	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  03788	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0378c	48 0b c8	 or	 rcx, rax
  0378f	48 8b c1	 mov	 rax, rcx
  03792	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN309@compressRo:
; Line 542
  03796	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0379a	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0379e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  037a2	48 23 c8	 and	 rcx, rax
  037a5	48 8b c1	 mov	 rax, rcx
  037a8	48 85 c0	 test	 rax, rax
  037ab	74 16		 je	 SHORT $LN310@compressRo
  037ad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  037b1	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  037b5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  037b9	48 0b c8	 or	 rcx, rax
  037bc	48 8b c1	 mov	 rax, rcx
  037bf	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN310@compressRo:
; Line 543
  037c3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  037c7	48 c1 e0 1e	 shl	 rax, 30
  037cb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  037cf	48 23 c8	 and	 rcx, rax
  037d2	48 8b c1	 mov	 rax, rcx
  037d5	48 85 c0	 test	 rax, rax
  037d8	74 16		 je	 SHORT $LN311@compressRo
  037da	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  037de	48 c1 e0 1f	 shl	 rax, 31
  037e2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  037e6	48 0b c8	 or	 rcx, rax
  037e9	48 8b c1	 mov	 rax, rcx
  037ec	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN311@compressRo:
; Line 544
  037f0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  037f4	48 c1 e0 1d	 shl	 rax, 29
  037f8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  037fc	48 23 c8	 and	 rcx, rax
  037ff	48 8b c1	 mov	 rax, rcx
  03802	48 85 c0	 test	 rax, rax
  03805	74 16		 je	 SHORT $LN312@compressRo
  03807	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0380b	48 c1 e0 1b	 shl	 rax, 27
  0380f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03813	48 0b c8	 or	 rcx, rax
  03816	48 8b c1	 mov	 rax, rcx
  03819	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN312@compressRo:
; Line 545
  0381d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03821	48 c1 e0 1c	 shl	 rax, 28
  03825	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03829	48 23 c8	 and	 rcx, rax
  0382c	48 8b c1	 mov	 rax, rcx
  0382f	48 85 c0	 test	 rax, rax
  03832	74 16		 je	 SHORT $LN313@compressRo
  03834	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03838	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  0383c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03840	48 0b c8	 or	 rcx, rax
  03843	48 8b c1	 mov	 rax, rcx
  03846	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN313@compressRo:
; Line 546
  0384a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0384e	48 c1 e0 1b	 shl	 rax, 27
  03852	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03856	48 23 c8	 and	 rcx, rax
  03859	48 8b c1	 mov	 rax, rcx
  0385c	48 85 c0	 test	 rax, rax
  0385f	74 15		 je	 SHORT $LN314@compressRo
  03861	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03865	48 d1 e0	 shl	 rax, 1
  03868	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0386c	48 0b c8	 or	 rcx, rax
  0386f	48 8b c1	 mov	 rax, rcx
  03872	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN314@compressRo:
; Line 547
  03876	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0387a	48 c1 e0 1a	 shl	 rax, 26
  0387e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03882	48 23 c8	 and	 rcx, rax
  03885	48 8b c1	 mov	 rax, rcx
  03888	48 85 c0	 test	 rax, rax
  0388b	74 16		 je	 SHORT $LN315@compressRo
  0388d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03891	48 c1 e0 11	 shl	 rax, 17
  03895	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03899	48 0b c8	 or	 rcx, rax
  0389c	48 8b c1	 mov	 rax, rcx
  0389f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN315@compressRo:
; Line 548
  038a3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  038a7	48 c1 e0 19	 shl	 rax, 25
  038ab	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  038af	48 23 c8	 and	 rcx, rax
  038b2	48 8b c1	 mov	 rax, rcx
  038b5	48 85 c0	 test	 rax, rax
  038b8	74 16		 je	 SHORT $LN316@compressRo
  038ba	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  038be	48 c1 e0 15	 shl	 rax, 21
  038c2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  038c6	48 0b c8	 or	 rcx, rax
  038c9	48 8b c1	 mov	 rax, rcx
  038cc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN316@compressRo:
; Line 549
  038d0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  038d4	48 c1 e0 18	 shl	 rax, 24
  038d8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  038dc	48 23 c8	 and	 rcx, rax
  038df	48 8b c1	 mov	 rax, rcx
  038e2	48 85 c0	 test	 rax, rax
  038e5	74 12		 je	 SHORT $LN317@compressRo
  038e7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  038eb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  038ef	48 0b c8	 or	 rcx, rax
  038f2	48 8b c1	 mov	 rax, rcx
  038f5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN317@compressRo:
; Line 550
  038f9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  038fd	48 c1 e0 17	 shl	 rax, 23
  03901	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03905	48 23 c8	 and	 rcx, rax
  03908	48 8b c1	 mov	 rax, rcx
  0390b	48 85 c0	 test	 rax, rax
  0390e	74 16		 je	 SHORT $LN318@compressRo
  03910	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03914	48 c1 e0 0d	 shl	 rax, 13
  03918	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0391c	48 0b c8	 or	 rcx, rax
  0391f	48 8b c1	 mov	 rax, rcx
  03922	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN318@compressRo:
; Line 551
  03926	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0392a	48 c1 e0 16	 shl	 rax, 22
  0392e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03932	48 23 c8	 and	 rcx, rax
  03935	48 8b c1	 mov	 rax, rcx
  03938	48 85 c0	 test	 rax, rax
  0393b	74 16		 je	 SHORT $LN319@compressRo
  0393d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03941	48 c1 e0 07	 shl	 rax, 7
  03945	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03949	48 0b c8	 or	 rcx, rax
  0394c	48 8b c1	 mov	 rax, rcx
  0394f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN319@compressRo:
; Line 552
  03953	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03957	48 c1 e0 14	 shl	 rax, 20
  0395b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0395f	48 23 c8	 and	 rcx, rax
  03962	48 8b c1	 mov	 rax, rcx
  03965	48 85 c0	 test	 rax, rax
  03968	74 16		 je	 SHORT $LN320@compressRo
  0396a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0396e	48 c1 e0 02	 shl	 rax, 2
  03972	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03976	48 0b c8	 or	 rcx, rax
  03979	48 8b c1	 mov	 rax, rcx
  0397c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN320@compressRo:
; Line 553
  03980	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03984	48 c1 e0 13	 shl	 rax, 19
  03988	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0398c	48 23 c8	 and	 rcx, rax
  0398f	48 8b c1	 mov	 rax, rcx
  03992	48 85 c0	 test	 rax, rax
  03995	74 16		 je	 SHORT $LN321@compressRo
  03997	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0399b	48 c1 e0 14	 shl	 rax, 20
  0399f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  039a3	48 0b c8	 or	 rcx, rax
  039a6	48 8b c1	 mov	 rax, rcx
  039a9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN321@compressRo:
; Line 554
  039ad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  039b1	48 c1 e0 11	 shl	 rax, 17
  039b5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  039b9	48 23 c8	 and	 rcx, rax
  039bc	48 8b c1	 mov	 rax, rcx
  039bf	48 85 c0	 test	 rax, rax
  039c2	74 16		 je	 SHORT $LN322@compressRo
  039c4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  039c8	48 c1 e0 09	 shl	 rax, 9
  039cc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  039d0	48 0b c8	 or	 rcx, rax
  039d3	48 8b c1	 mov	 rax, rcx
  039d6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN322@compressRo:
; Line 555
  039da	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  039de	48 c1 e0 10	 shl	 rax, 16
  039e2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  039e6	48 23 c8	 and	 rcx, rax
  039e9	48 8b c1	 mov	 rax, rcx
  039ec	48 85 c0	 test	 rax, rax
  039ef	74 16		 je	 SHORT $LN323@compressRo
  039f1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  039f5	48 c1 e0 10	 shl	 rax, 16
  039f9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  039fd	48 0b c8	 or	 rcx, rax
  03a00	48 8b c1	 mov	 rax, rcx
  03a03	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN323@compressRo:
; Line 556
  03a07	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03a0b	48 c1 e0 0f	 shl	 rax, 15
  03a0f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03a13	48 23 c8	 and	 rcx, rax
  03a16	48 8b c1	 mov	 rax, rcx
  03a19	48 85 c0	 test	 rax, rax
  03a1c	74 16		 je	 SHORT $LN324@compressRo
  03a1e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03a22	48 c1 e0 17	 shl	 rax, 23
  03a26	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03a2a	48 0b c8	 or	 rcx, rax
  03a2d	48 8b c1	 mov	 rax, rcx
  03a30	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN324@compressRo:
; Line 557
  03a34	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03a38	48 c1 e0 0e	 shl	 rax, 14
  03a3c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03a40	48 23 c8	 and	 rcx, rax
  03a43	48 8b c1	 mov	 rax, rcx
  03a46	48 85 c0	 test	 rax, rax
  03a49	74 16		 je	 SHORT $LN325@compressRo
  03a4b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03a4f	48 c1 e0 04	 shl	 rax, 4
  03a53	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03a57	48 0b c8	 or	 rcx, rax
  03a5a	48 8b c1	 mov	 rax, rcx
  03a5d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN325@compressRo:
; Line 558
  03a61	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03a65	48 c1 e0 0c	 shl	 rax, 12
  03a69	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03a6d	48 23 c8	 and	 rcx, rax
  03a70	48 8b c1	 mov	 rax, rcx
  03a73	48 85 c0	 test	 rax, rax
  03a76	74 16		 je	 SHORT $LN326@compressRo
  03a78	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03a7c	48 c1 e0 0b	 shl	 rax, 11
  03a80	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03a84	48 0b c8	 or	 rcx, rax
  03a87	48 8b c1	 mov	 rax, rcx
  03a8a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN326@compressRo:
; Line 559
  03a8e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03a92	48 c1 e0 0b	 shl	 rax, 11
  03a96	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03a9a	48 23 c8	 and	 rcx, rax
  03a9d	48 8b c1	 mov	 rax, rcx
  03aa0	48 85 c0	 test	 rax, rax
  03aa3	74 16		 je	 SHORT $LN327@compressRo
  03aa5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03aa9	48 c1 e0 0e	 shl	 rax, 14
  03aad	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03ab1	48 0b c8	 or	 rcx, rax
  03ab4	48 8b c1	 mov	 rax, rcx
  03ab7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN327@compressRo:
; Line 560
  03abb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03abf	48 c1 e0 0a	 shl	 rax, 10
  03ac3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03ac7	48 23 c8	 and	 rcx, rax
  03aca	48 8b c1	 mov	 rax, rcx
  03acd	48 85 c0	 test	 rax, rax
  03ad0	74 16		 je	 SHORT $LN328@compressRo
  03ad2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03ad6	48 c1 e0 05	 shl	 rax, 5
  03ada	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03ade	48 0b c8	 or	 rcx, rax
  03ae1	48 8b c1	 mov	 rax, rcx
  03ae4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN328@compressRo:
; Line 561
  03ae8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03aec	48 c1 e0 09	 shl	 rax, 9
  03af0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03af4	48 23 c8	 and	 rcx, rax
  03af7	48 8b c1	 mov	 rax, rcx
  03afa	48 85 c0	 test	 rax, rax
  03afd	74 16		 je	 SHORT $LN329@compressRo
  03aff	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03b03	48 c1 e0 13	 shl	 rax, 19
  03b07	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03b0b	48 0b c8	 or	 rcx, rax
  03b0e	48 8b c1	 mov	 rax, rcx
  03b11	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN329@compressRo:
; Line 562
  03b15	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03b19	48 c1 e0 08	 shl	 rax, 8
  03b1d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03b21	48 23 c8	 and	 rcx, rax
  03b24	48 8b c1	 mov	 rax, rcx
  03b27	48 85 c0	 test	 rax, rax
  03b2a	74 16		 je	 SHORT $LN330@compressRo
  03b2c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03b30	48 c1 e0 0c	 shl	 rax, 12
  03b34	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03b38	48 0b c8	 or	 rcx, rax
  03b3b	48 8b c1	 mov	 rax, rcx
  03b3e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN330@compressRo:
; Line 563
  03b42	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03b46	48 c1 e0 07	 shl	 rax, 7
  03b4a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03b4e	48 23 c8	 and	 rcx, rax
  03b51	48 8b c1	 mov	 rax, rcx
  03b54	48 85 c0	 test	 rax, rax
  03b57	74 16		 je	 SHORT $LN331@compressRo
  03b59	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03b5d	48 c1 e0 0a	 shl	 rax, 10
  03b61	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03b65	48 0b c8	 or	 rcx, rax
  03b68	48 8b c1	 mov	 rax, rcx
  03b6b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN331@compressRo:
; Line 564
  03b6f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03b73	48 c1 e0 06	 shl	 rax, 6
  03b77	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03b7b	48 23 c8	 and	 rcx, rax
  03b7e	48 8b c1	 mov	 rax, rcx
  03b81	48 85 c0	 test	 rax, rax
  03b84	74 16		 je	 SHORT $LN332@compressRo
  03b86	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03b8a	48 c1 e0 03	 shl	 rax, 3
  03b8e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03b92	48 0b c8	 or	 rcx, rax
  03b95	48 8b c1	 mov	 rax, rcx
  03b98	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN332@compressRo:
; Line 565
  03b9c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03ba0	48 c1 e0 05	 shl	 rax, 5
  03ba4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03ba8	48 23 c8	 and	 rcx, rax
  03bab	48 8b c1	 mov	 rax, rcx
  03bae	48 85 c0	 test	 rax, rax
  03bb1	74 16		 je	 SHORT $LN333@compressRo
  03bb3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03bb7	48 c1 e0 0f	 shl	 rax, 15
  03bbb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03bbf	48 0b c8	 or	 rcx, rax
  03bc2	48 8b c1	 mov	 rax, rcx
  03bc5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN333@compressRo:
; Line 566
  03bc9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03bcd	48 c1 e0 04	 shl	 rax, 4
  03bd1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03bd5	48 23 c8	 and	 rcx, rax
  03bd8	48 8b c1	 mov	 rax, rcx
  03bdb	48 85 c0	 test	 rax, rax
  03bde	74 16		 je	 SHORT $LN334@compressRo
  03be0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03be4	48 c1 e0 16	 shl	 rax, 22
  03be8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03bec	48 0b c8	 or	 rcx, rax
  03bef	48 8b c1	 mov	 rax, rcx
  03bf2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN334@compressRo:
; Line 567
  03bf6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03bfa	48 c1 e0 03	 shl	 rax, 3
  03bfe	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03c02	48 23 c8	 and	 rcx, rax
  03c05	48 8b c1	 mov	 rax, rcx
  03c08	48 85 c0	 test	 rax, rax
  03c0b	74 16		 je	 SHORT $LN335@compressRo
  03c0d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03c11	48 c1 e0 06	 shl	 rax, 6
  03c15	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03c19	48 0b c8	 or	 rcx, rax
  03c1c	48 8b c1	 mov	 rax, rcx
  03c1f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN335@compressRo:
; Line 568
  03c23	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03c27	48 d1 e0	 shl	 rax, 1
  03c2a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03c2e	48 23 c8	 and	 rcx, rax
  03c31	48 8b c1	 mov	 rax, rcx
  03c34	48 85 c0	 test	 rax, rax
  03c37	74 16		 je	 SHORT $LN336@compressRo
  03c39	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03c3d	48 c1 e0 12	 shl	 rax, 18
  03c41	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03c45	48 0b c8	 or	 rcx, rax
  03c48	48 8b c1	 mov	 rax, rcx
  03c4b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN336@compressRo:
; Line 569
  03c4f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03c53	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03c57	48 23 c8	 and	 rcx, rax
  03c5a	48 8b c1	 mov	 rax, rcx
  03c5d	48 85 c0	 test	 rax, rax
  03c60	74 16		 je	 SHORT $LN337@compressRo
  03c62	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03c66	48 c1 e0 08	 shl	 rax, 8
  03c6a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03c6e	48 0b c8	 or	 rcx, rax
  03c71	48 8b c1	 mov	 rax, rcx
  03c74	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN337@compressRo:
; Line 570
  03c78	b8 08 00 00 00	 mov	 eax, 8
  03c7d	48 6b c0 07	 imul	 rax, rax, 7
  03c81	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  03c88	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  03c8c	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 572
  03c90	b8 08 00 00 00	 mov	 eax, 8
  03c95	48 6b c0 08	 imul	 rax, rax, 8
  03c99	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  03ca0	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  03ca4	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 573
  03ca8	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 576
  03cb0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03cb4	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  03cb8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03cbc	48 23 c8	 and	 rcx, rax
  03cbf	48 8b c1	 mov	 rax, rcx
  03cc2	48 85 c0	 test	 rax, rax
  03cc5	74 16		 je	 SHORT $LN338@compressRo
  03cc7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03ccb	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  03ccf	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03cd3	48 0b c8	 or	 rcx, rax
  03cd6	48 8b c1	 mov	 rax, rcx
  03cd9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN338@compressRo:
; Line 577
  03cdd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03ce1	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  03ce5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03ce9	48 23 c8	 and	 rcx, rax
  03cec	48 8b c1	 mov	 rax, rcx
  03cef	48 85 c0	 test	 rax, rax
  03cf2	74 16		 je	 SHORT $LN339@compressRo
  03cf4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03cf8	48 c1 e0 18	 shl	 rax, 24
  03cfc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03d00	48 0b c8	 or	 rcx, rax
  03d03	48 8b c1	 mov	 rax, rcx
  03d06	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN339@compressRo:
; Line 578
  03d0a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03d0e	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  03d12	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03d16	48 23 c8	 and	 rcx, rax
  03d19	48 8b c1	 mov	 rax, rcx
  03d1c	48 85 c0	 test	 rax, rax
  03d1f	74 16		 je	 SHORT $LN340@compressRo
  03d21	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03d25	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  03d29	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03d2d	48 0b c8	 or	 rcx, rax
  03d30	48 8b c1	 mov	 rax, rcx
  03d33	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN340@compressRo:
; Line 579
  03d37	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03d3b	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  03d3f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03d43	48 23 c8	 and	 rcx, rax
  03d46	48 8b c1	 mov	 rax, rcx
  03d49	48 85 c0	 test	 rax, rax
  03d4c	74 16		 je	 SHORT $LN341@compressRo
  03d4e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03d52	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  03d56	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03d5a	48 0b c8	 or	 rcx, rax
  03d5d	48 8b c1	 mov	 rax, rcx
  03d60	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN341@compressRo:
; Line 580
  03d64	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03d68	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  03d6c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03d70	48 23 c8	 and	 rcx, rax
  03d73	48 8b c1	 mov	 rax, rcx
  03d76	48 85 c0	 test	 rax, rax
  03d79	74 16		 je	 SHORT $LN342@compressRo
  03d7b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03d7f	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  03d83	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03d87	48 0b c8	 or	 rcx, rax
  03d8a	48 8b c1	 mov	 rax, rcx
  03d8d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN342@compressRo:
; Line 581
  03d91	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03d95	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  03d99	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03d9d	48 23 c8	 and	 rcx, rax
  03da0	48 8b c1	 mov	 rax, rcx
  03da3	48 85 c0	 test	 rax, rax
  03da6	74 16		 je	 SHORT $LN343@compressRo
  03da8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03dac	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  03db0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03db4	48 0b c8	 or	 rcx, rax
  03db7	48 8b c1	 mov	 rax, rcx
  03dba	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN343@compressRo:
; Line 582
  03dbe	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03dc2	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  03dc6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03dca	48 23 c8	 and	 rcx, rax
  03dcd	48 8b c1	 mov	 rax, rcx
  03dd0	48 85 c0	 test	 rax, rax
  03dd3	74 16		 je	 SHORT $LN344@compressRo
  03dd5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03dd9	48 c1 e0 1c	 shl	 rax, 28
  03ddd	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03de1	48 0b c8	 or	 rcx, rax
  03de4	48 8b c1	 mov	 rax, rcx
  03de7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN344@compressRo:
; Line 583
  03deb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03def	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  03df3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03df7	48 23 c8	 and	 rcx, rax
  03dfa	48 8b c1	 mov	 rax, rcx
  03dfd	48 85 c0	 test	 rax, rax
  03e00	74 16		 je	 SHORT $LN345@compressRo
  03e02	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03e06	48 c1 e0 1e	 shl	 rax, 30
  03e0a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03e0e	48 0b c8	 or	 rcx, rax
  03e11	48 8b c1	 mov	 rax, rcx
  03e14	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN345@compressRo:
; Line 584
  03e18	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03e1c	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  03e20	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03e24	48 23 c8	 and	 rcx, rax
  03e27	48 8b c1	 mov	 rax, rcx
  03e2a	48 85 c0	 test	 rax, rax
  03e2d	74 16		 je	 SHORT $LN346@compressRo
  03e2f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03e33	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  03e37	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03e3b	48 0b c8	 or	 rcx, rax
  03e3e	48 8b c1	 mov	 rax, rcx
  03e41	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN346@compressRo:
; Line 585
  03e45	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03e49	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  03e4d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03e51	48 23 c8	 and	 rcx, rax
  03e54	48 8b c1	 mov	 rax, rcx
  03e57	48 85 c0	 test	 rax, rax
  03e5a	74 16		 je	 SHORT $LN347@compressRo
  03e5c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03e60	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  03e64	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03e68	48 0b c8	 or	 rcx, rax
  03e6b	48 8b c1	 mov	 rax, rcx
  03e6e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN347@compressRo:
; Line 586
  03e72	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03e76	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  03e7a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03e7e	48 23 c8	 and	 rcx, rax
  03e81	48 8b c1	 mov	 rax, rcx
  03e84	48 85 c0	 test	 rax, rax
  03e87	74 16		 je	 SHORT $LN348@compressRo
  03e89	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03e8d	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  03e91	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03e95	48 0b c8	 or	 rcx, rax
  03e98	48 8b c1	 mov	 rax, rcx
  03e9b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN348@compressRo:
; Line 587
  03e9f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03ea3	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  03ea7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03eab	48 23 c8	 and	 rcx, rax
  03eae	48 8b c1	 mov	 rax, rcx
  03eb1	48 85 c0	 test	 rax, rax
  03eb4	74 16		 je	 SHORT $LN349@compressRo
  03eb6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03eba	48 c1 e0 19	 shl	 rax, 25
  03ebe	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03ec2	48 0b c8	 or	 rcx, rax
  03ec5	48 8b c1	 mov	 rax, rcx
  03ec8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN349@compressRo:
; Line 588
  03ecc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03ed0	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  03ed4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03ed8	48 23 c8	 and	 rcx, rax
  03edb	48 8b c1	 mov	 rax, rcx
  03ede	48 85 c0	 test	 rax, rax
  03ee1	74 16		 je	 SHORT $LN350@compressRo
  03ee3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03ee7	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  03eeb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03eef	48 0b c8	 or	 rcx, rax
  03ef2	48 8b c1	 mov	 rax, rcx
  03ef5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN350@compressRo:
; Line 589
  03ef9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03efd	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  03f01	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03f05	48 23 c8	 and	 rcx, rax
  03f08	48 8b c1	 mov	 rax, rcx
  03f0b	48 85 c0	 test	 rax, rax
  03f0e	74 16		 je	 SHORT $LN351@compressRo
  03f10	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03f14	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  03f18	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03f1c	48 0b c8	 or	 rcx, rax
  03f1f	48 8b c1	 mov	 rax, rcx
  03f22	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN351@compressRo:
; Line 590
  03f26	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03f2a	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  03f2e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03f32	48 23 c8	 and	 rcx, rax
  03f35	48 8b c1	 mov	 rax, rcx
  03f38	48 85 c0	 test	 rax, rax
  03f3b	74 16		 je	 SHORT $LN352@compressRo
  03f3d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03f41	48 c1 e0 1d	 shl	 rax, 29
  03f45	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03f49	48 0b c8	 or	 rcx, rax
  03f4c	48 8b c1	 mov	 rax, rcx
  03f4f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN352@compressRo:
; Line 591
  03f53	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03f57	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  03f5b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03f5f	48 23 c8	 and	 rcx, rax
  03f62	48 8b c1	 mov	 rax, rcx
  03f65	48 85 c0	 test	 rax, rax
  03f68	74 16		 je	 SHORT $LN353@compressRo
  03f6a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03f6e	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  03f72	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03f76	48 0b c8	 or	 rcx, rax
  03f79	48 8b c1	 mov	 rax, rcx
  03f7c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN353@compressRo:
; Line 592
  03f80	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03f84	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  03f88	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03f8c	48 23 c8	 and	 rcx, rax
  03f8f	48 8b c1	 mov	 rax, rcx
  03f92	48 85 c0	 test	 rax, rax
  03f95	74 16		 je	 SHORT $LN354@compressRo
  03f97	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03f9b	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  03f9f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03fa3	48 0b c8	 or	 rcx, rax
  03fa6	48 8b c1	 mov	 rax, rcx
  03fa9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN354@compressRo:
; Line 593
  03fad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03fb1	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  03fb5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03fb9	48 23 c8	 and	 rcx, rax
  03fbc	48 8b c1	 mov	 rax, rcx
  03fbf	48 85 c0	 test	 rax, rax
  03fc2	74 16		 je	 SHORT $LN355@compressRo
  03fc4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03fc8	48 c1 e0 1a	 shl	 rax, 26
  03fcc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03fd0	48 0b c8	 or	 rcx, rax
  03fd3	48 8b c1	 mov	 rax, rcx
  03fd6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN355@compressRo:
; Line 594
  03fda	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03fde	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  03fe2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  03fe6	48 23 c8	 and	 rcx, rax
  03fe9	48 8b c1	 mov	 rax, rcx
  03fec	48 85 c0	 test	 rax, rax
  03fef	74 16		 je	 SHORT $LN356@compressRo
  03ff1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  03ff5	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  03ff9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  03ffd	48 0b c8	 or	 rcx, rax
  04000	48 8b c1	 mov	 rax, rcx
  04003	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN356@compressRo:
; Line 595
  04007	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0400b	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  0400f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04013	48 23 c8	 and	 rcx, rax
  04016	48 8b c1	 mov	 rax, rcx
  04019	48 85 c0	 test	 rax, rax
  0401c	74 16		 je	 SHORT $LN357@compressRo
  0401e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04022	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  04026	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0402a	48 0b c8	 or	 rcx, rax
  0402d	48 8b c1	 mov	 rax, rcx
  04030	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN357@compressRo:
; Line 596
  04034	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04038	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0403c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04040	48 23 c8	 and	 rcx, rax
  04043	48 8b c1	 mov	 rax, rcx
  04046	48 85 c0	 test	 rax, rax
  04049	74 16		 je	 SHORT $LN358@compressRo
  0404b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0404f	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  04053	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04057	48 0b c8	 or	 rcx, rax
  0405a	48 8b c1	 mov	 rax, rcx
  0405d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN358@compressRo:
; Line 597
  04061	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04065	48 c1 e0 1e	 shl	 rax, 30
  04069	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0406d	48 23 c8	 and	 rcx, rax
  04070	48 8b c1	 mov	 rax, rcx
  04073	48 85 c0	 test	 rax, rax
  04076	74 16		 je	 SHORT $LN359@compressRo
  04078	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0407c	48 c1 e0 1f	 shl	 rax, 31
  04080	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04084	48 0b c8	 or	 rcx, rax
  04087	48 8b c1	 mov	 rax, rcx
  0408a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN359@compressRo:
; Line 598
  0408e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04092	48 c1 e0 1d	 shl	 rax, 29
  04096	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0409a	48 23 c8	 and	 rcx, rax
  0409d	48 8b c1	 mov	 rax, rcx
  040a0	48 85 c0	 test	 rax, rax
  040a3	74 16		 je	 SHORT $LN360@compressRo
  040a5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  040a9	48 c1 e0 1b	 shl	 rax, 27
  040ad	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  040b1	48 0b c8	 or	 rcx, rax
  040b4	48 8b c1	 mov	 rax, rcx
  040b7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN360@compressRo:
; Line 599
  040bb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  040bf	48 c1 e0 1c	 shl	 rax, 28
  040c3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  040c7	48 23 c8	 and	 rcx, rax
  040ca	48 8b c1	 mov	 rax, rcx
  040cd	48 85 c0	 test	 rax, rax
  040d0	74 16		 je	 SHORT $LN361@compressRo
  040d2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  040d6	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  040da	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  040de	48 0b c8	 or	 rcx, rax
  040e1	48 8b c1	 mov	 rax, rcx
  040e4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN361@compressRo:
; Line 600
  040e8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  040ec	48 c1 e0 1b	 shl	 rax, 27
  040f0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  040f4	48 23 c8	 and	 rcx, rax
  040f7	48 8b c1	 mov	 rax, rcx
  040fa	48 85 c0	 test	 rax, rax
  040fd	74 15		 je	 SHORT $LN362@compressRo
  040ff	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04103	48 d1 e0	 shl	 rax, 1
  04106	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0410a	48 0b c8	 or	 rcx, rax
  0410d	48 8b c1	 mov	 rax, rcx
  04110	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN362@compressRo:
; Line 601
  04114	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04118	48 c1 e0 1a	 shl	 rax, 26
  0411c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04120	48 23 c8	 and	 rcx, rax
  04123	48 8b c1	 mov	 rax, rcx
  04126	48 85 c0	 test	 rax, rax
  04129	74 16		 je	 SHORT $LN363@compressRo
  0412b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0412f	48 c1 e0 11	 shl	 rax, 17
  04133	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04137	48 0b c8	 or	 rcx, rax
  0413a	48 8b c1	 mov	 rax, rcx
  0413d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN363@compressRo:
; Line 602
  04141	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04145	48 c1 e0 19	 shl	 rax, 25
  04149	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0414d	48 23 c8	 and	 rcx, rax
  04150	48 8b c1	 mov	 rax, rcx
  04153	48 85 c0	 test	 rax, rax
  04156	74 16		 je	 SHORT $LN364@compressRo
  04158	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0415c	48 c1 e0 15	 shl	 rax, 21
  04160	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04164	48 0b c8	 or	 rcx, rax
  04167	48 8b c1	 mov	 rax, rcx
  0416a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN364@compressRo:
; Line 603
  0416e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04172	48 c1 e0 18	 shl	 rax, 24
  04176	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0417a	48 23 c8	 and	 rcx, rax
  0417d	48 8b c1	 mov	 rax, rcx
  04180	48 85 c0	 test	 rax, rax
  04183	74 12		 je	 SHORT $LN365@compressRo
  04185	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04189	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0418d	48 0b c8	 or	 rcx, rax
  04190	48 8b c1	 mov	 rax, rcx
  04193	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN365@compressRo:
; Line 604
  04197	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0419b	48 c1 e0 17	 shl	 rax, 23
  0419f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  041a3	48 23 c8	 and	 rcx, rax
  041a6	48 8b c1	 mov	 rax, rcx
  041a9	48 85 c0	 test	 rax, rax
  041ac	74 16		 je	 SHORT $LN366@compressRo
  041ae	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  041b2	48 c1 e0 0d	 shl	 rax, 13
  041b6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  041ba	48 0b c8	 or	 rcx, rax
  041bd	48 8b c1	 mov	 rax, rcx
  041c0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN366@compressRo:
; Line 605
  041c4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  041c8	48 c1 e0 16	 shl	 rax, 22
  041cc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  041d0	48 23 c8	 and	 rcx, rax
  041d3	48 8b c1	 mov	 rax, rcx
  041d6	48 85 c0	 test	 rax, rax
  041d9	74 16		 je	 SHORT $LN367@compressRo
  041db	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  041df	48 c1 e0 07	 shl	 rax, 7
  041e3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  041e7	48 0b c8	 or	 rcx, rax
  041ea	48 8b c1	 mov	 rax, rcx
  041ed	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN367@compressRo:
; Line 606
  041f1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  041f5	48 c1 e0 14	 shl	 rax, 20
  041f9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  041fd	48 23 c8	 and	 rcx, rax
  04200	48 8b c1	 mov	 rax, rcx
  04203	48 85 c0	 test	 rax, rax
  04206	74 16		 je	 SHORT $LN368@compressRo
  04208	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0420c	48 c1 e0 02	 shl	 rax, 2
  04210	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04214	48 0b c8	 or	 rcx, rax
  04217	48 8b c1	 mov	 rax, rcx
  0421a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN368@compressRo:
; Line 607
  0421e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04222	48 c1 e0 13	 shl	 rax, 19
  04226	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0422a	48 23 c8	 and	 rcx, rax
  0422d	48 8b c1	 mov	 rax, rcx
  04230	48 85 c0	 test	 rax, rax
  04233	74 16		 je	 SHORT $LN369@compressRo
  04235	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04239	48 c1 e0 14	 shl	 rax, 20
  0423d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04241	48 0b c8	 or	 rcx, rax
  04244	48 8b c1	 mov	 rax, rcx
  04247	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN369@compressRo:
; Line 608
  0424b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0424f	48 c1 e0 11	 shl	 rax, 17
  04253	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04257	48 23 c8	 and	 rcx, rax
  0425a	48 8b c1	 mov	 rax, rcx
  0425d	48 85 c0	 test	 rax, rax
  04260	74 16		 je	 SHORT $LN370@compressRo
  04262	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04266	48 c1 e0 09	 shl	 rax, 9
  0426a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0426e	48 0b c8	 or	 rcx, rax
  04271	48 8b c1	 mov	 rax, rcx
  04274	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN370@compressRo:
; Line 609
  04278	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0427c	48 c1 e0 10	 shl	 rax, 16
  04280	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04284	48 23 c8	 and	 rcx, rax
  04287	48 8b c1	 mov	 rax, rcx
  0428a	48 85 c0	 test	 rax, rax
  0428d	74 16		 je	 SHORT $LN371@compressRo
  0428f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04293	48 c1 e0 10	 shl	 rax, 16
  04297	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0429b	48 0b c8	 or	 rcx, rax
  0429e	48 8b c1	 mov	 rax, rcx
  042a1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN371@compressRo:
; Line 610
  042a5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  042a9	48 c1 e0 0f	 shl	 rax, 15
  042ad	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  042b1	48 23 c8	 and	 rcx, rax
  042b4	48 8b c1	 mov	 rax, rcx
  042b7	48 85 c0	 test	 rax, rax
  042ba	74 16		 je	 SHORT $LN372@compressRo
  042bc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  042c0	48 c1 e0 17	 shl	 rax, 23
  042c4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  042c8	48 0b c8	 or	 rcx, rax
  042cb	48 8b c1	 mov	 rax, rcx
  042ce	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN372@compressRo:
; Line 611
  042d2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  042d6	48 c1 e0 0e	 shl	 rax, 14
  042da	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  042de	48 23 c8	 and	 rcx, rax
  042e1	48 8b c1	 mov	 rax, rcx
  042e4	48 85 c0	 test	 rax, rax
  042e7	74 16		 je	 SHORT $LN373@compressRo
  042e9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  042ed	48 c1 e0 04	 shl	 rax, 4
  042f1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  042f5	48 0b c8	 or	 rcx, rax
  042f8	48 8b c1	 mov	 rax, rcx
  042fb	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN373@compressRo:
; Line 612
  042ff	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04303	48 c1 e0 0c	 shl	 rax, 12
  04307	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0430b	48 23 c8	 and	 rcx, rax
  0430e	48 8b c1	 mov	 rax, rcx
  04311	48 85 c0	 test	 rax, rax
  04314	74 16		 je	 SHORT $LN374@compressRo
  04316	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0431a	48 c1 e0 0b	 shl	 rax, 11
  0431e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04322	48 0b c8	 or	 rcx, rax
  04325	48 8b c1	 mov	 rax, rcx
  04328	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN374@compressRo:
; Line 613
  0432c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04330	48 c1 e0 0b	 shl	 rax, 11
  04334	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04338	48 23 c8	 and	 rcx, rax
  0433b	48 8b c1	 mov	 rax, rcx
  0433e	48 85 c0	 test	 rax, rax
  04341	74 16		 je	 SHORT $LN375@compressRo
  04343	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04347	48 c1 e0 0e	 shl	 rax, 14
  0434b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0434f	48 0b c8	 or	 rcx, rax
  04352	48 8b c1	 mov	 rax, rcx
  04355	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN375@compressRo:
; Line 614
  04359	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0435d	48 c1 e0 0a	 shl	 rax, 10
  04361	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04365	48 23 c8	 and	 rcx, rax
  04368	48 8b c1	 mov	 rax, rcx
  0436b	48 85 c0	 test	 rax, rax
  0436e	74 16		 je	 SHORT $LN376@compressRo
  04370	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04374	48 c1 e0 05	 shl	 rax, 5
  04378	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0437c	48 0b c8	 or	 rcx, rax
  0437f	48 8b c1	 mov	 rax, rcx
  04382	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN376@compressRo:
; Line 615
  04386	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0438a	48 c1 e0 09	 shl	 rax, 9
  0438e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04392	48 23 c8	 and	 rcx, rax
  04395	48 8b c1	 mov	 rax, rcx
  04398	48 85 c0	 test	 rax, rax
  0439b	74 16		 je	 SHORT $LN377@compressRo
  0439d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  043a1	48 c1 e0 13	 shl	 rax, 19
  043a5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  043a9	48 0b c8	 or	 rcx, rax
  043ac	48 8b c1	 mov	 rax, rcx
  043af	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN377@compressRo:
; Line 616
  043b3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  043b7	48 c1 e0 08	 shl	 rax, 8
  043bb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  043bf	48 23 c8	 and	 rcx, rax
  043c2	48 8b c1	 mov	 rax, rcx
  043c5	48 85 c0	 test	 rax, rax
  043c8	74 16		 je	 SHORT $LN378@compressRo
  043ca	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  043ce	48 c1 e0 0c	 shl	 rax, 12
  043d2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  043d6	48 0b c8	 or	 rcx, rax
  043d9	48 8b c1	 mov	 rax, rcx
  043dc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN378@compressRo:
; Line 617
  043e0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  043e4	48 c1 e0 07	 shl	 rax, 7
  043e8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  043ec	48 23 c8	 and	 rcx, rax
  043ef	48 8b c1	 mov	 rax, rcx
  043f2	48 85 c0	 test	 rax, rax
  043f5	74 16		 je	 SHORT $LN379@compressRo
  043f7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  043fb	48 c1 e0 0a	 shl	 rax, 10
  043ff	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04403	48 0b c8	 or	 rcx, rax
  04406	48 8b c1	 mov	 rax, rcx
  04409	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN379@compressRo:
; Line 618
  0440d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04411	48 c1 e0 06	 shl	 rax, 6
  04415	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04419	48 23 c8	 and	 rcx, rax
  0441c	48 8b c1	 mov	 rax, rcx
  0441f	48 85 c0	 test	 rax, rax
  04422	74 16		 je	 SHORT $LN380@compressRo
  04424	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04428	48 c1 e0 03	 shl	 rax, 3
  0442c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04430	48 0b c8	 or	 rcx, rax
  04433	48 8b c1	 mov	 rax, rcx
  04436	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN380@compressRo:
; Line 619
  0443a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0443e	48 c1 e0 05	 shl	 rax, 5
  04442	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04446	48 23 c8	 and	 rcx, rax
  04449	48 8b c1	 mov	 rax, rcx
  0444c	48 85 c0	 test	 rax, rax
  0444f	74 16		 je	 SHORT $LN381@compressRo
  04451	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04455	48 c1 e0 0f	 shl	 rax, 15
  04459	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0445d	48 0b c8	 or	 rcx, rax
  04460	48 8b c1	 mov	 rax, rcx
  04463	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN381@compressRo:
; Line 620
  04467	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0446b	48 c1 e0 04	 shl	 rax, 4
  0446f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04473	48 23 c8	 and	 rcx, rax
  04476	48 8b c1	 mov	 rax, rcx
  04479	48 85 c0	 test	 rax, rax
  0447c	74 16		 je	 SHORT $LN382@compressRo
  0447e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04482	48 c1 e0 16	 shl	 rax, 22
  04486	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0448a	48 0b c8	 or	 rcx, rax
  0448d	48 8b c1	 mov	 rax, rcx
  04490	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN382@compressRo:
; Line 621
  04494	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04498	48 c1 e0 03	 shl	 rax, 3
  0449c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  044a0	48 23 c8	 and	 rcx, rax
  044a3	48 8b c1	 mov	 rax, rcx
  044a6	48 85 c0	 test	 rax, rax
  044a9	74 16		 je	 SHORT $LN383@compressRo
  044ab	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  044af	48 c1 e0 06	 shl	 rax, 6
  044b3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  044b7	48 0b c8	 or	 rcx, rax
  044ba	48 8b c1	 mov	 rax, rcx
  044bd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN383@compressRo:
; Line 622
  044c1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  044c5	48 d1 e0	 shl	 rax, 1
  044c8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  044cc	48 23 c8	 and	 rcx, rax
  044cf	48 8b c1	 mov	 rax, rcx
  044d2	48 85 c0	 test	 rax, rax
  044d5	74 16		 je	 SHORT $LN384@compressRo
  044d7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  044db	48 c1 e0 12	 shl	 rax, 18
  044df	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  044e3	48 0b c8	 or	 rcx, rax
  044e6	48 8b c1	 mov	 rax, rcx
  044e9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN384@compressRo:
; Line 623
  044ed	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  044f1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  044f5	48 23 c8	 and	 rcx, rax
  044f8	48 8b c1	 mov	 rax, rcx
  044fb	48 85 c0	 test	 rax, rax
  044fe	74 16		 je	 SHORT $LN385@compressRo
  04500	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04504	48 c1 e0 08	 shl	 rax, 8
  04508	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0450c	48 0b c8	 or	 rcx, rax
  0450f	48 8b c1	 mov	 rax, rcx
  04512	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN385@compressRo:
; Line 624
  04516	b8 08 00 00 00	 mov	 eax, 8
  0451b	48 6b c0 08	 imul	 rax, rax, 8
  0451f	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  04526	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  0452a	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 626
  0452e	b8 08 00 00 00	 mov	 eax, 8
  04533	48 6b c0 09	 imul	 rax, rax, 9
  04537	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  0453e	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  04542	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 627
  04546	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 630
  0454e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04552	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  04556	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0455a	48 23 c8	 and	 rcx, rax
  0455d	48 8b c1	 mov	 rax, rcx
  04560	48 85 c0	 test	 rax, rax
  04563	74 16		 je	 SHORT $LN386@compressRo
  04565	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04569	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  0456d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04571	48 0b c8	 or	 rcx, rax
  04574	48 8b c1	 mov	 rax, rcx
  04577	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN386@compressRo:
; Line 631
  0457b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0457f	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  04583	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04587	48 23 c8	 and	 rcx, rax
  0458a	48 8b c1	 mov	 rax, rcx
  0458d	48 85 c0	 test	 rax, rax
  04590	74 16		 je	 SHORT $LN387@compressRo
  04592	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04596	48 c1 e0 18	 shl	 rax, 24
  0459a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0459e	48 0b c8	 or	 rcx, rax
  045a1	48 8b c1	 mov	 rax, rcx
  045a4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN387@compressRo:
; Line 632
  045a8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  045ac	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  045b0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  045b4	48 23 c8	 and	 rcx, rax
  045b7	48 8b c1	 mov	 rax, rcx
  045ba	48 85 c0	 test	 rax, rax
  045bd	74 16		 je	 SHORT $LN388@compressRo
  045bf	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  045c3	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  045c7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  045cb	48 0b c8	 or	 rcx, rax
  045ce	48 8b c1	 mov	 rax, rcx
  045d1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN388@compressRo:
; Line 633
  045d5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  045d9	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  045dd	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  045e1	48 23 c8	 and	 rcx, rax
  045e4	48 8b c1	 mov	 rax, rcx
  045e7	48 85 c0	 test	 rax, rax
  045ea	74 16		 je	 SHORT $LN389@compressRo
  045ec	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  045f0	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  045f4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  045f8	48 0b c8	 or	 rcx, rax
  045fb	48 8b c1	 mov	 rax, rcx
  045fe	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN389@compressRo:
; Line 634
  04602	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04606	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  0460a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0460e	48 23 c8	 and	 rcx, rax
  04611	48 8b c1	 mov	 rax, rcx
  04614	48 85 c0	 test	 rax, rax
  04617	74 16		 je	 SHORT $LN390@compressRo
  04619	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0461d	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  04621	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04625	48 0b c8	 or	 rcx, rax
  04628	48 8b c1	 mov	 rax, rcx
  0462b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN390@compressRo:
; Line 635
  0462f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04633	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  04637	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0463b	48 23 c8	 and	 rcx, rax
  0463e	48 8b c1	 mov	 rax, rcx
  04641	48 85 c0	 test	 rax, rax
  04644	74 16		 je	 SHORT $LN391@compressRo
  04646	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0464a	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  0464e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04652	48 0b c8	 or	 rcx, rax
  04655	48 8b c1	 mov	 rax, rcx
  04658	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN391@compressRo:
; Line 636
  0465c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04660	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  04664	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04668	48 23 c8	 and	 rcx, rax
  0466b	48 8b c1	 mov	 rax, rcx
  0466e	48 85 c0	 test	 rax, rax
  04671	74 16		 je	 SHORT $LN392@compressRo
  04673	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04677	48 c1 e0 1c	 shl	 rax, 28
  0467b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0467f	48 0b c8	 or	 rcx, rax
  04682	48 8b c1	 mov	 rax, rcx
  04685	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN392@compressRo:
; Line 637
  04689	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0468d	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  04691	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04695	48 23 c8	 and	 rcx, rax
  04698	48 8b c1	 mov	 rax, rcx
  0469b	48 85 c0	 test	 rax, rax
  0469e	74 16		 je	 SHORT $LN393@compressRo
  046a0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  046a4	48 c1 e0 1e	 shl	 rax, 30
  046a8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  046ac	48 0b c8	 or	 rcx, rax
  046af	48 8b c1	 mov	 rax, rcx
  046b2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN393@compressRo:
; Line 638
  046b6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  046ba	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  046be	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  046c2	48 23 c8	 and	 rcx, rax
  046c5	48 8b c1	 mov	 rax, rcx
  046c8	48 85 c0	 test	 rax, rax
  046cb	74 16		 je	 SHORT $LN394@compressRo
  046cd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  046d1	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  046d5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  046d9	48 0b c8	 or	 rcx, rax
  046dc	48 8b c1	 mov	 rax, rcx
  046df	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN394@compressRo:
; Line 639
  046e3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  046e7	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  046eb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  046ef	48 23 c8	 and	 rcx, rax
  046f2	48 8b c1	 mov	 rax, rcx
  046f5	48 85 c0	 test	 rax, rax
  046f8	74 16		 je	 SHORT $LN395@compressRo
  046fa	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  046fe	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  04702	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04706	48 0b c8	 or	 rcx, rax
  04709	48 8b c1	 mov	 rax, rcx
  0470c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN395@compressRo:
; Line 640
  04710	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04714	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  04718	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0471c	48 23 c8	 and	 rcx, rax
  0471f	48 8b c1	 mov	 rax, rcx
  04722	48 85 c0	 test	 rax, rax
  04725	74 16		 je	 SHORT $LN396@compressRo
  04727	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0472b	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  0472f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04733	48 0b c8	 or	 rcx, rax
  04736	48 8b c1	 mov	 rax, rcx
  04739	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN396@compressRo:
; Line 641
  0473d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04741	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  04745	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04749	48 23 c8	 and	 rcx, rax
  0474c	48 8b c1	 mov	 rax, rcx
  0474f	48 85 c0	 test	 rax, rax
  04752	74 16		 je	 SHORT $LN397@compressRo
  04754	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04758	48 c1 e0 19	 shl	 rax, 25
  0475c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04760	48 0b c8	 or	 rcx, rax
  04763	48 8b c1	 mov	 rax, rcx
  04766	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN397@compressRo:
; Line 642
  0476a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0476e	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  04772	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04776	48 23 c8	 and	 rcx, rax
  04779	48 8b c1	 mov	 rax, rcx
  0477c	48 85 c0	 test	 rax, rax
  0477f	74 16		 je	 SHORT $LN398@compressRo
  04781	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04785	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  04789	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0478d	48 0b c8	 or	 rcx, rax
  04790	48 8b c1	 mov	 rax, rcx
  04793	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN398@compressRo:
; Line 643
  04797	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0479b	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  0479f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  047a3	48 23 c8	 and	 rcx, rax
  047a6	48 8b c1	 mov	 rax, rcx
  047a9	48 85 c0	 test	 rax, rax
  047ac	74 16		 je	 SHORT $LN399@compressRo
  047ae	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  047b2	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  047b6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  047ba	48 0b c8	 or	 rcx, rax
  047bd	48 8b c1	 mov	 rax, rcx
  047c0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN399@compressRo:
; Line 644
  047c4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  047c8	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  047cc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  047d0	48 23 c8	 and	 rcx, rax
  047d3	48 8b c1	 mov	 rax, rcx
  047d6	48 85 c0	 test	 rax, rax
  047d9	74 16		 je	 SHORT $LN400@compressRo
  047db	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  047df	48 c1 e0 1d	 shl	 rax, 29
  047e3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  047e7	48 0b c8	 or	 rcx, rax
  047ea	48 8b c1	 mov	 rax, rcx
  047ed	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN400@compressRo:
; Line 645
  047f1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  047f5	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  047f9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  047fd	48 23 c8	 and	 rcx, rax
  04800	48 8b c1	 mov	 rax, rcx
  04803	48 85 c0	 test	 rax, rax
  04806	74 16		 je	 SHORT $LN401@compressRo
  04808	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0480c	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  04810	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04814	48 0b c8	 or	 rcx, rax
  04817	48 8b c1	 mov	 rax, rcx
  0481a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN401@compressRo:
; Line 646
  0481e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04822	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  04826	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0482a	48 23 c8	 and	 rcx, rax
  0482d	48 8b c1	 mov	 rax, rcx
  04830	48 85 c0	 test	 rax, rax
  04833	74 16		 je	 SHORT $LN402@compressRo
  04835	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04839	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  0483d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04841	48 0b c8	 or	 rcx, rax
  04844	48 8b c1	 mov	 rax, rcx
  04847	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN402@compressRo:
; Line 647
  0484b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0484f	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  04853	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04857	48 23 c8	 and	 rcx, rax
  0485a	48 8b c1	 mov	 rax, rcx
  0485d	48 85 c0	 test	 rax, rax
  04860	74 16		 je	 SHORT $LN403@compressRo
  04862	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04866	48 c1 e0 1a	 shl	 rax, 26
  0486a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0486e	48 0b c8	 or	 rcx, rax
  04871	48 8b c1	 mov	 rax, rcx
  04874	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN403@compressRo:
; Line 648
  04878	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0487c	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  04880	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04884	48 23 c8	 and	 rcx, rax
  04887	48 8b c1	 mov	 rax, rcx
  0488a	48 85 c0	 test	 rax, rax
  0488d	74 16		 je	 SHORT $LN404@compressRo
  0488f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04893	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  04897	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0489b	48 0b c8	 or	 rcx, rax
  0489e	48 8b c1	 mov	 rax, rcx
  048a1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN404@compressRo:
; Line 649
  048a5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  048a9	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  048ad	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  048b1	48 23 c8	 and	 rcx, rax
  048b4	48 8b c1	 mov	 rax, rcx
  048b7	48 85 c0	 test	 rax, rax
  048ba	74 16		 je	 SHORT $LN405@compressRo
  048bc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  048c0	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  048c4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  048c8	48 0b c8	 or	 rcx, rax
  048cb	48 8b c1	 mov	 rax, rcx
  048ce	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN405@compressRo:
; Line 650
  048d2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  048d6	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  048da	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  048de	48 23 c8	 and	 rcx, rax
  048e1	48 8b c1	 mov	 rax, rcx
  048e4	48 85 c0	 test	 rax, rax
  048e7	74 16		 je	 SHORT $LN406@compressRo
  048e9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  048ed	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  048f1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  048f5	48 0b c8	 or	 rcx, rax
  048f8	48 8b c1	 mov	 rax, rcx
  048fb	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN406@compressRo:
; Line 651
  048ff	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04903	48 c1 e0 1e	 shl	 rax, 30
  04907	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0490b	48 23 c8	 and	 rcx, rax
  0490e	48 8b c1	 mov	 rax, rcx
  04911	48 85 c0	 test	 rax, rax
  04914	74 16		 je	 SHORT $LN407@compressRo
  04916	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0491a	48 c1 e0 1f	 shl	 rax, 31
  0491e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04922	48 0b c8	 or	 rcx, rax
  04925	48 8b c1	 mov	 rax, rcx
  04928	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN407@compressRo:
; Line 652
  0492c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04930	48 c1 e0 1d	 shl	 rax, 29
  04934	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04938	48 23 c8	 and	 rcx, rax
  0493b	48 8b c1	 mov	 rax, rcx
  0493e	48 85 c0	 test	 rax, rax
  04941	74 16		 je	 SHORT $LN408@compressRo
  04943	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04947	48 c1 e0 1b	 shl	 rax, 27
  0494b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0494f	48 0b c8	 or	 rcx, rax
  04952	48 8b c1	 mov	 rax, rcx
  04955	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN408@compressRo:
; Line 653
  04959	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0495d	48 c1 e0 1c	 shl	 rax, 28
  04961	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04965	48 23 c8	 and	 rcx, rax
  04968	48 8b c1	 mov	 rax, rcx
  0496b	48 85 c0	 test	 rax, rax
  0496e	74 16		 je	 SHORT $LN409@compressRo
  04970	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04974	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  04978	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0497c	48 0b c8	 or	 rcx, rax
  0497f	48 8b c1	 mov	 rax, rcx
  04982	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN409@compressRo:
; Line 654
  04986	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0498a	48 c1 e0 1b	 shl	 rax, 27
  0498e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04992	48 23 c8	 and	 rcx, rax
  04995	48 8b c1	 mov	 rax, rcx
  04998	48 85 c0	 test	 rax, rax
  0499b	74 15		 je	 SHORT $LN410@compressRo
  0499d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  049a1	48 d1 e0	 shl	 rax, 1
  049a4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  049a8	48 0b c8	 or	 rcx, rax
  049ab	48 8b c1	 mov	 rax, rcx
  049ae	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN410@compressRo:
; Line 655
  049b2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  049b6	48 c1 e0 1a	 shl	 rax, 26
  049ba	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  049be	48 23 c8	 and	 rcx, rax
  049c1	48 8b c1	 mov	 rax, rcx
  049c4	48 85 c0	 test	 rax, rax
  049c7	74 16		 je	 SHORT $LN411@compressRo
  049c9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  049cd	48 c1 e0 11	 shl	 rax, 17
  049d1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  049d5	48 0b c8	 or	 rcx, rax
  049d8	48 8b c1	 mov	 rax, rcx
  049db	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN411@compressRo:
; Line 656
  049df	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  049e3	48 c1 e0 19	 shl	 rax, 25
  049e7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  049eb	48 23 c8	 and	 rcx, rax
  049ee	48 8b c1	 mov	 rax, rcx
  049f1	48 85 c0	 test	 rax, rax
  049f4	74 16		 je	 SHORT $LN412@compressRo
  049f6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  049fa	48 c1 e0 15	 shl	 rax, 21
  049fe	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04a02	48 0b c8	 or	 rcx, rax
  04a05	48 8b c1	 mov	 rax, rcx
  04a08	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN412@compressRo:
; Line 657
  04a0c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04a10	48 c1 e0 18	 shl	 rax, 24
  04a14	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04a18	48 23 c8	 and	 rcx, rax
  04a1b	48 8b c1	 mov	 rax, rcx
  04a1e	48 85 c0	 test	 rax, rax
  04a21	74 12		 je	 SHORT $LN413@compressRo
  04a23	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04a27	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04a2b	48 0b c8	 or	 rcx, rax
  04a2e	48 8b c1	 mov	 rax, rcx
  04a31	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN413@compressRo:
; Line 658
  04a35	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04a39	48 c1 e0 17	 shl	 rax, 23
  04a3d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04a41	48 23 c8	 and	 rcx, rax
  04a44	48 8b c1	 mov	 rax, rcx
  04a47	48 85 c0	 test	 rax, rax
  04a4a	74 16		 je	 SHORT $LN414@compressRo
  04a4c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04a50	48 c1 e0 0d	 shl	 rax, 13
  04a54	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04a58	48 0b c8	 or	 rcx, rax
  04a5b	48 8b c1	 mov	 rax, rcx
  04a5e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN414@compressRo:
; Line 659
  04a62	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04a66	48 c1 e0 16	 shl	 rax, 22
  04a6a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04a6e	48 23 c8	 and	 rcx, rax
  04a71	48 8b c1	 mov	 rax, rcx
  04a74	48 85 c0	 test	 rax, rax
  04a77	74 16		 je	 SHORT $LN415@compressRo
  04a79	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04a7d	48 c1 e0 07	 shl	 rax, 7
  04a81	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04a85	48 0b c8	 or	 rcx, rax
  04a88	48 8b c1	 mov	 rax, rcx
  04a8b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN415@compressRo:
; Line 660
  04a8f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04a93	48 c1 e0 14	 shl	 rax, 20
  04a97	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04a9b	48 23 c8	 and	 rcx, rax
  04a9e	48 8b c1	 mov	 rax, rcx
  04aa1	48 85 c0	 test	 rax, rax
  04aa4	74 16		 je	 SHORT $LN416@compressRo
  04aa6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04aaa	48 c1 e0 02	 shl	 rax, 2
  04aae	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04ab2	48 0b c8	 or	 rcx, rax
  04ab5	48 8b c1	 mov	 rax, rcx
  04ab8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN416@compressRo:
; Line 661
  04abc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04ac0	48 c1 e0 13	 shl	 rax, 19
  04ac4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04ac8	48 23 c8	 and	 rcx, rax
  04acb	48 8b c1	 mov	 rax, rcx
  04ace	48 85 c0	 test	 rax, rax
  04ad1	74 16		 je	 SHORT $LN417@compressRo
  04ad3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04ad7	48 c1 e0 14	 shl	 rax, 20
  04adb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04adf	48 0b c8	 or	 rcx, rax
  04ae2	48 8b c1	 mov	 rax, rcx
  04ae5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN417@compressRo:
; Line 662
  04ae9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04aed	48 c1 e0 11	 shl	 rax, 17
  04af1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04af5	48 23 c8	 and	 rcx, rax
  04af8	48 8b c1	 mov	 rax, rcx
  04afb	48 85 c0	 test	 rax, rax
  04afe	74 16		 je	 SHORT $LN418@compressRo
  04b00	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04b04	48 c1 e0 09	 shl	 rax, 9
  04b08	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04b0c	48 0b c8	 or	 rcx, rax
  04b0f	48 8b c1	 mov	 rax, rcx
  04b12	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN418@compressRo:
; Line 663
  04b16	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04b1a	48 c1 e0 10	 shl	 rax, 16
  04b1e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04b22	48 23 c8	 and	 rcx, rax
  04b25	48 8b c1	 mov	 rax, rcx
  04b28	48 85 c0	 test	 rax, rax
  04b2b	74 16		 je	 SHORT $LN419@compressRo
  04b2d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04b31	48 c1 e0 10	 shl	 rax, 16
  04b35	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04b39	48 0b c8	 or	 rcx, rax
  04b3c	48 8b c1	 mov	 rax, rcx
  04b3f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN419@compressRo:
; Line 664
  04b43	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04b47	48 c1 e0 0f	 shl	 rax, 15
  04b4b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04b4f	48 23 c8	 and	 rcx, rax
  04b52	48 8b c1	 mov	 rax, rcx
  04b55	48 85 c0	 test	 rax, rax
  04b58	74 16		 je	 SHORT $LN420@compressRo
  04b5a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04b5e	48 c1 e0 17	 shl	 rax, 23
  04b62	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04b66	48 0b c8	 or	 rcx, rax
  04b69	48 8b c1	 mov	 rax, rcx
  04b6c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN420@compressRo:
; Line 665
  04b70	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04b74	48 c1 e0 0e	 shl	 rax, 14
  04b78	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04b7c	48 23 c8	 and	 rcx, rax
  04b7f	48 8b c1	 mov	 rax, rcx
  04b82	48 85 c0	 test	 rax, rax
  04b85	74 16		 je	 SHORT $LN421@compressRo
  04b87	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04b8b	48 c1 e0 04	 shl	 rax, 4
  04b8f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04b93	48 0b c8	 or	 rcx, rax
  04b96	48 8b c1	 mov	 rax, rcx
  04b99	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN421@compressRo:
; Line 666
  04b9d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04ba1	48 c1 e0 0c	 shl	 rax, 12
  04ba5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04ba9	48 23 c8	 and	 rcx, rax
  04bac	48 8b c1	 mov	 rax, rcx
  04baf	48 85 c0	 test	 rax, rax
  04bb2	74 16		 je	 SHORT $LN422@compressRo
  04bb4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04bb8	48 c1 e0 0b	 shl	 rax, 11
  04bbc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04bc0	48 0b c8	 or	 rcx, rax
  04bc3	48 8b c1	 mov	 rax, rcx
  04bc6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN422@compressRo:
; Line 667
  04bca	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04bce	48 c1 e0 0b	 shl	 rax, 11
  04bd2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04bd6	48 23 c8	 and	 rcx, rax
  04bd9	48 8b c1	 mov	 rax, rcx
  04bdc	48 85 c0	 test	 rax, rax
  04bdf	74 16		 je	 SHORT $LN423@compressRo
  04be1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04be5	48 c1 e0 0e	 shl	 rax, 14
  04be9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04bed	48 0b c8	 or	 rcx, rax
  04bf0	48 8b c1	 mov	 rax, rcx
  04bf3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN423@compressRo:
; Line 668
  04bf7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04bfb	48 c1 e0 0a	 shl	 rax, 10
  04bff	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04c03	48 23 c8	 and	 rcx, rax
  04c06	48 8b c1	 mov	 rax, rcx
  04c09	48 85 c0	 test	 rax, rax
  04c0c	74 16		 je	 SHORT $LN424@compressRo
  04c0e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04c12	48 c1 e0 05	 shl	 rax, 5
  04c16	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04c1a	48 0b c8	 or	 rcx, rax
  04c1d	48 8b c1	 mov	 rax, rcx
  04c20	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN424@compressRo:
; Line 669
  04c24	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04c28	48 c1 e0 09	 shl	 rax, 9
  04c2c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04c30	48 23 c8	 and	 rcx, rax
  04c33	48 8b c1	 mov	 rax, rcx
  04c36	48 85 c0	 test	 rax, rax
  04c39	74 16		 je	 SHORT $LN425@compressRo
  04c3b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04c3f	48 c1 e0 13	 shl	 rax, 19
  04c43	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04c47	48 0b c8	 or	 rcx, rax
  04c4a	48 8b c1	 mov	 rax, rcx
  04c4d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN425@compressRo:
; Line 670
  04c51	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04c55	48 c1 e0 08	 shl	 rax, 8
  04c59	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04c5d	48 23 c8	 and	 rcx, rax
  04c60	48 8b c1	 mov	 rax, rcx
  04c63	48 85 c0	 test	 rax, rax
  04c66	74 16		 je	 SHORT $LN426@compressRo
  04c68	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04c6c	48 c1 e0 0c	 shl	 rax, 12
  04c70	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04c74	48 0b c8	 or	 rcx, rax
  04c77	48 8b c1	 mov	 rax, rcx
  04c7a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN426@compressRo:
; Line 671
  04c7e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04c82	48 c1 e0 07	 shl	 rax, 7
  04c86	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04c8a	48 23 c8	 and	 rcx, rax
  04c8d	48 8b c1	 mov	 rax, rcx
  04c90	48 85 c0	 test	 rax, rax
  04c93	74 16		 je	 SHORT $LN427@compressRo
  04c95	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04c99	48 c1 e0 0a	 shl	 rax, 10
  04c9d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04ca1	48 0b c8	 or	 rcx, rax
  04ca4	48 8b c1	 mov	 rax, rcx
  04ca7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN427@compressRo:
; Line 672
  04cab	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04caf	48 c1 e0 06	 shl	 rax, 6
  04cb3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04cb7	48 23 c8	 and	 rcx, rax
  04cba	48 8b c1	 mov	 rax, rcx
  04cbd	48 85 c0	 test	 rax, rax
  04cc0	74 16		 je	 SHORT $LN428@compressRo
  04cc2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04cc6	48 c1 e0 03	 shl	 rax, 3
  04cca	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04cce	48 0b c8	 or	 rcx, rax
  04cd1	48 8b c1	 mov	 rax, rcx
  04cd4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN428@compressRo:
; Line 673
  04cd8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04cdc	48 c1 e0 05	 shl	 rax, 5
  04ce0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04ce4	48 23 c8	 and	 rcx, rax
  04ce7	48 8b c1	 mov	 rax, rcx
  04cea	48 85 c0	 test	 rax, rax
  04ced	74 16		 je	 SHORT $LN429@compressRo
  04cef	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04cf3	48 c1 e0 0f	 shl	 rax, 15
  04cf7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04cfb	48 0b c8	 or	 rcx, rax
  04cfe	48 8b c1	 mov	 rax, rcx
  04d01	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN429@compressRo:
; Line 674
  04d05	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04d09	48 c1 e0 04	 shl	 rax, 4
  04d0d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04d11	48 23 c8	 and	 rcx, rax
  04d14	48 8b c1	 mov	 rax, rcx
  04d17	48 85 c0	 test	 rax, rax
  04d1a	74 16		 je	 SHORT $LN430@compressRo
  04d1c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04d20	48 c1 e0 16	 shl	 rax, 22
  04d24	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04d28	48 0b c8	 or	 rcx, rax
  04d2b	48 8b c1	 mov	 rax, rcx
  04d2e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN430@compressRo:
; Line 675
  04d32	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04d36	48 c1 e0 03	 shl	 rax, 3
  04d3a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04d3e	48 23 c8	 and	 rcx, rax
  04d41	48 8b c1	 mov	 rax, rcx
  04d44	48 85 c0	 test	 rax, rax
  04d47	74 16		 je	 SHORT $LN431@compressRo
  04d49	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04d4d	48 c1 e0 06	 shl	 rax, 6
  04d51	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04d55	48 0b c8	 or	 rcx, rax
  04d58	48 8b c1	 mov	 rax, rcx
  04d5b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN431@compressRo:
; Line 676
  04d5f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04d63	48 d1 e0	 shl	 rax, 1
  04d66	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04d6a	48 23 c8	 and	 rcx, rax
  04d6d	48 8b c1	 mov	 rax, rcx
  04d70	48 85 c0	 test	 rax, rax
  04d73	74 16		 je	 SHORT $LN432@compressRo
  04d75	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04d79	48 c1 e0 12	 shl	 rax, 18
  04d7d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04d81	48 0b c8	 or	 rcx, rax
  04d84	48 8b c1	 mov	 rax, rcx
  04d87	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN432@compressRo:
; Line 677
  04d8b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04d8f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04d93	48 23 c8	 and	 rcx, rax
  04d96	48 8b c1	 mov	 rax, rcx
  04d99	48 85 c0	 test	 rax, rax
  04d9c	74 16		 je	 SHORT $LN433@compressRo
  04d9e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04da2	48 c1 e0 08	 shl	 rax, 8
  04da6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04daa	48 0b c8	 or	 rcx, rax
  04dad	48 8b c1	 mov	 rax, rcx
  04db0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN433@compressRo:
; Line 678
  04db4	b8 08 00 00 00	 mov	 eax, 8
  04db9	48 6b c0 09	 imul	 rax, rax, 9
  04dbd	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  04dc4	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  04dc8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 680
  04dcc	b8 08 00 00 00	 mov	 eax, 8
  04dd1	48 6b c0 0a	 imul	 rax, rax, 10
  04dd5	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  04ddc	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  04de0	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 681
  04de4	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 684
  04dec	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04df0	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  04df4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04df8	48 23 c8	 and	 rcx, rax
  04dfb	48 8b c1	 mov	 rax, rcx
  04dfe	48 85 c0	 test	 rax, rax
  04e01	74 16		 je	 SHORT $LN434@compressRo
  04e03	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04e07	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  04e0b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04e0f	48 0b c8	 or	 rcx, rax
  04e12	48 8b c1	 mov	 rax, rcx
  04e15	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN434@compressRo:
; Line 685
  04e19	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04e1d	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  04e21	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04e25	48 23 c8	 and	 rcx, rax
  04e28	48 8b c1	 mov	 rax, rcx
  04e2b	48 85 c0	 test	 rax, rax
  04e2e	74 16		 je	 SHORT $LN435@compressRo
  04e30	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04e34	48 c1 e0 18	 shl	 rax, 24
  04e38	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04e3c	48 0b c8	 or	 rcx, rax
  04e3f	48 8b c1	 mov	 rax, rcx
  04e42	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN435@compressRo:
; Line 686
  04e46	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04e4a	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  04e4e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04e52	48 23 c8	 and	 rcx, rax
  04e55	48 8b c1	 mov	 rax, rcx
  04e58	48 85 c0	 test	 rax, rax
  04e5b	74 16		 je	 SHORT $LN436@compressRo
  04e5d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04e61	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  04e65	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04e69	48 0b c8	 or	 rcx, rax
  04e6c	48 8b c1	 mov	 rax, rcx
  04e6f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN436@compressRo:
; Line 687
  04e73	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04e77	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  04e7b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04e7f	48 23 c8	 and	 rcx, rax
  04e82	48 8b c1	 mov	 rax, rcx
  04e85	48 85 c0	 test	 rax, rax
  04e88	74 16		 je	 SHORT $LN437@compressRo
  04e8a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04e8e	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  04e92	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04e96	48 0b c8	 or	 rcx, rax
  04e99	48 8b c1	 mov	 rax, rcx
  04e9c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN437@compressRo:
; Line 688
  04ea0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04ea4	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  04ea8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04eac	48 23 c8	 and	 rcx, rax
  04eaf	48 8b c1	 mov	 rax, rcx
  04eb2	48 85 c0	 test	 rax, rax
  04eb5	74 16		 je	 SHORT $LN438@compressRo
  04eb7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04ebb	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  04ebf	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04ec3	48 0b c8	 or	 rcx, rax
  04ec6	48 8b c1	 mov	 rax, rcx
  04ec9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN438@compressRo:
; Line 689
  04ecd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04ed1	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  04ed5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04ed9	48 23 c8	 and	 rcx, rax
  04edc	48 8b c1	 mov	 rax, rcx
  04edf	48 85 c0	 test	 rax, rax
  04ee2	74 16		 je	 SHORT $LN439@compressRo
  04ee4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04ee8	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  04eec	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04ef0	48 0b c8	 or	 rcx, rax
  04ef3	48 8b c1	 mov	 rax, rcx
  04ef6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN439@compressRo:
; Line 690
  04efa	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04efe	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  04f02	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04f06	48 23 c8	 and	 rcx, rax
  04f09	48 8b c1	 mov	 rax, rcx
  04f0c	48 85 c0	 test	 rax, rax
  04f0f	74 16		 je	 SHORT $LN440@compressRo
  04f11	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04f15	48 c1 e0 1c	 shl	 rax, 28
  04f19	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04f1d	48 0b c8	 or	 rcx, rax
  04f20	48 8b c1	 mov	 rax, rcx
  04f23	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN440@compressRo:
; Line 691
  04f27	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04f2b	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  04f2f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04f33	48 23 c8	 and	 rcx, rax
  04f36	48 8b c1	 mov	 rax, rcx
  04f39	48 85 c0	 test	 rax, rax
  04f3c	74 16		 je	 SHORT $LN441@compressRo
  04f3e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04f42	48 c1 e0 1e	 shl	 rax, 30
  04f46	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04f4a	48 0b c8	 or	 rcx, rax
  04f4d	48 8b c1	 mov	 rax, rcx
  04f50	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN441@compressRo:
; Line 692
  04f54	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04f58	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  04f5c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04f60	48 23 c8	 and	 rcx, rax
  04f63	48 8b c1	 mov	 rax, rcx
  04f66	48 85 c0	 test	 rax, rax
  04f69	74 16		 je	 SHORT $LN442@compressRo
  04f6b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04f6f	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  04f73	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04f77	48 0b c8	 or	 rcx, rax
  04f7a	48 8b c1	 mov	 rax, rcx
  04f7d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN442@compressRo:
; Line 693
  04f81	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04f85	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  04f89	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04f8d	48 23 c8	 and	 rcx, rax
  04f90	48 8b c1	 mov	 rax, rcx
  04f93	48 85 c0	 test	 rax, rax
  04f96	74 16		 je	 SHORT $LN443@compressRo
  04f98	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04f9c	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  04fa0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04fa4	48 0b c8	 or	 rcx, rax
  04fa7	48 8b c1	 mov	 rax, rcx
  04faa	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN443@compressRo:
; Line 694
  04fae	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04fb2	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  04fb6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04fba	48 23 c8	 and	 rcx, rax
  04fbd	48 8b c1	 mov	 rax, rcx
  04fc0	48 85 c0	 test	 rax, rax
  04fc3	74 16		 je	 SHORT $LN444@compressRo
  04fc5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04fc9	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  04fcd	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04fd1	48 0b c8	 or	 rcx, rax
  04fd4	48 8b c1	 mov	 rax, rcx
  04fd7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN444@compressRo:
; Line 695
  04fdb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04fdf	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  04fe3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  04fe7	48 23 c8	 and	 rcx, rax
  04fea	48 8b c1	 mov	 rax, rcx
  04fed	48 85 c0	 test	 rax, rax
  04ff0	74 16		 je	 SHORT $LN445@compressRo
  04ff2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  04ff6	48 c1 e0 19	 shl	 rax, 25
  04ffa	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  04ffe	48 0b c8	 or	 rcx, rax
  05001	48 8b c1	 mov	 rax, rcx
  05004	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN445@compressRo:
; Line 696
  05008	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0500c	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  05010	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05014	48 23 c8	 and	 rcx, rax
  05017	48 8b c1	 mov	 rax, rcx
  0501a	48 85 c0	 test	 rax, rax
  0501d	74 16		 je	 SHORT $LN446@compressRo
  0501f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05023	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  05027	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0502b	48 0b c8	 or	 rcx, rax
  0502e	48 8b c1	 mov	 rax, rcx
  05031	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN446@compressRo:
; Line 697
  05035	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05039	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  0503d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05041	48 23 c8	 and	 rcx, rax
  05044	48 8b c1	 mov	 rax, rcx
  05047	48 85 c0	 test	 rax, rax
  0504a	74 16		 je	 SHORT $LN447@compressRo
  0504c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05050	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  05054	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05058	48 0b c8	 or	 rcx, rax
  0505b	48 8b c1	 mov	 rax, rcx
  0505e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN447@compressRo:
; Line 698
  05062	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05066	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  0506a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0506e	48 23 c8	 and	 rcx, rax
  05071	48 8b c1	 mov	 rax, rcx
  05074	48 85 c0	 test	 rax, rax
  05077	74 16		 je	 SHORT $LN448@compressRo
  05079	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0507d	48 c1 e0 1d	 shl	 rax, 29
  05081	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05085	48 0b c8	 or	 rcx, rax
  05088	48 8b c1	 mov	 rax, rcx
  0508b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN448@compressRo:
; Line 699
  0508f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05093	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  05097	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0509b	48 23 c8	 and	 rcx, rax
  0509e	48 8b c1	 mov	 rax, rcx
  050a1	48 85 c0	 test	 rax, rax
  050a4	74 16		 je	 SHORT $LN449@compressRo
  050a6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  050aa	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  050ae	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  050b2	48 0b c8	 or	 rcx, rax
  050b5	48 8b c1	 mov	 rax, rcx
  050b8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN449@compressRo:
; Line 700
  050bc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  050c0	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  050c4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  050c8	48 23 c8	 and	 rcx, rax
  050cb	48 8b c1	 mov	 rax, rcx
  050ce	48 85 c0	 test	 rax, rax
  050d1	74 16		 je	 SHORT $LN450@compressRo
  050d3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  050d7	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  050db	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  050df	48 0b c8	 or	 rcx, rax
  050e2	48 8b c1	 mov	 rax, rcx
  050e5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN450@compressRo:
; Line 701
  050e9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  050ed	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  050f1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  050f5	48 23 c8	 and	 rcx, rax
  050f8	48 8b c1	 mov	 rax, rcx
  050fb	48 85 c0	 test	 rax, rax
  050fe	74 16		 je	 SHORT $LN451@compressRo
  05100	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05104	48 c1 e0 1a	 shl	 rax, 26
  05108	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0510c	48 0b c8	 or	 rcx, rax
  0510f	48 8b c1	 mov	 rax, rcx
  05112	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN451@compressRo:
; Line 702
  05116	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0511a	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  0511e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05122	48 23 c8	 and	 rcx, rax
  05125	48 8b c1	 mov	 rax, rcx
  05128	48 85 c0	 test	 rax, rax
  0512b	74 16		 je	 SHORT $LN452@compressRo
  0512d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05131	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  05135	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05139	48 0b c8	 or	 rcx, rax
  0513c	48 8b c1	 mov	 rax, rcx
  0513f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN452@compressRo:
; Line 703
  05143	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05147	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  0514b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0514f	48 23 c8	 and	 rcx, rax
  05152	48 8b c1	 mov	 rax, rcx
  05155	48 85 c0	 test	 rax, rax
  05158	74 16		 je	 SHORT $LN453@compressRo
  0515a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0515e	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  05162	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05166	48 0b c8	 or	 rcx, rax
  05169	48 8b c1	 mov	 rax, rcx
  0516c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN453@compressRo:
; Line 704
  05170	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05174	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  05178	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0517c	48 23 c8	 and	 rcx, rax
  0517f	48 8b c1	 mov	 rax, rcx
  05182	48 85 c0	 test	 rax, rax
  05185	74 16		 je	 SHORT $LN454@compressRo
  05187	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0518b	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  0518f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05193	48 0b c8	 or	 rcx, rax
  05196	48 8b c1	 mov	 rax, rcx
  05199	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN454@compressRo:
; Line 705
  0519d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  051a1	48 c1 e0 1e	 shl	 rax, 30
  051a5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  051a9	48 23 c8	 and	 rcx, rax
  051ac	48 8b c1	 mov	 rax, rcx
  051af	48 85 c0	 test	 rax, rax
  051b2	74 16		 je	 SHORT $LN455@compressRo
  051b4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  051b8	48 c1 e0 1f	 shl	 rax, 31
  051bc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  051c0	48 0b c8	 or	 rcx, rax
  051c3	48 8b c1	 mov	 rax, rcx
  051c6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN455@compressRo:
; Line 706
  051ca	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  051ce	48 c1 e0 1d	 shl	 rax, 29
  051d2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  051d6	48 23 c8	 and	 rcx, rax
  051d9	48 8b c1	 mov	 rax, rcx
  051dc	48 85 c0	 test	 rax, rax
  051df	74 16		 je	 SHORT $LN456@compressRo
  051e1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  051e5	48 c1 e0 1b	 shl	 rax, 27
  051e9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  051ed	48 0b c8	 or	 rcx, rax
  051f0	48 8b c1	 mov	 rax, rcx
  051f3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN456@compressRo:
; Line 707
  051f7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  051fb	48 c1 e0 1c	 shl	 rax, 28
  051ff	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05203	48 23 c8	 and	 rcx, rax
  05206	48 8b c1	 mov	 rax, rcx
  05209	48 85 c0	 test	 rax, rax
  0520c	74 16		 je	 SHORT $LN457@compressRo
  0520e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05212	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  05216	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0521a	48 0b c8	 or	 rcx, rax
  0521d	48 8b c1	 mov	 rax, rcx
  05220	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN457@compressRo:
; Line 708
  05224	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05228	48 c1 e0 1b	 shl	 rax, 27
  0522c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05230	48 23 c8	 and	 rcx, rax
  05233	48 8b c1	 mov	 rax, rcx
  05236	48 85 c0	 test	 rax, rax
  05239	74 15		 je	 SHORT $LN458@compressRo
  0523b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0523f	48 d1 e0	 shl	 rax, 1
  05242	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05246	48 0b c8	 or	 rcx, rax
  05249	48 8b c1	 mov	 rax, rcx
  0524c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN458@compressRo:
; Line 709
  05250	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05254	48 c1 e0 1a	 shl	 rax, 26
  05258	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0525c	48 23 c8	 and	 rcx, rax
  0525f	48 8b c1	 mov	 rax, rcx
  05262	48 85 c0	 test	 rax, rax
  05265	74 16		 je	 SHORT $LN459@compressRo
  05267	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0526b	48 c1 e0 11	 shl	 rax, 17
  0526f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05273	48 0b c8	 or	 rcx, rax
  05276	48 8b c1	 mov	 rax, rcx
  05279	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN459@compressRo:
; Line 710
  0527d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05281	48 c1 e0 19	 shl	 rax, 25
  05285	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05289	48 23 c8	 and	 rcx, rax
  0528c	48 8b c1	 mov	 rax, rcx
  0528f	48 85 c0	 test	 rax, rax
  05292	74 16		 je	 SHORT $LN460@compressRo
  05294	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05298	48 c1 e0 15	 shl	 rax, 21
  0529c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  052a0	48 0b c8	 or	 rcx, rax
  052a3	48 8b c1	 mov	 rax, rcx
  052a6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN460@compressRo:
; Line 711
  052aa	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  052ae	48 c1 e0 18	 shl	 rax, 24
  052b2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  052b6	48 23 c8	 and	 rcx, rax
  052b9	48 8b c1	 mov	 rax, rcx
  052bc	48 85 c0	 test	 rax, rax
  052bf	74 12		 je	 SHORT $LN461@compressRo
  052c1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  052c5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  052c9	48 0b c8	 or	 rcx, rax
  052cc	48 8b c1	 mov	 rax, rcx
  052cf	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN461@compressRo:
; Line 712
  052d3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  052d7	48 c1 e0 17	 shl	 rax, 23
  052db	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  052df	48 23 c8	 and	 rcx, rax
  052e2	48 8b c1	 mov	 rax, rcx
  052e5	48 85 c0	 test	 rax, rax
  052e8	74 16		 je	 SHORT $LN462@compressRo
  052ea	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  052ee	48 c1 e0 0d	 shl	 rax, 13
  052f2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  052f6	48 0b c8	 or	 rcx, rax
  052f9	48 8b c1	 mov	 rax, rcx
  052fc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN462@compressRo:
; Line 713
  05300	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05304	48 c1 e0 16	 shl	 rax, 22
  05308	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0530c	48 23 c8	 and	 rcx, rax
  0530f	48 8b c1	 mov	 rax, rcx
  05312	48 85 c0	 test	 rax, rax
  05315	74 16		 je	 SHORT $LN463@compressRo
  05317	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0531b	48 c1 e0 07	 shl	 rax, 7
  0531f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05323	48 0b c8	 or	 rcx, rax
  05326	48 8b c1	 mov	 rax, rcx
  05329	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN463@compressRo:
; Line 714
  0532d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05331	48 c1 e0 14	 shl	 rax, 20
  05335	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05339	48 23 c8	 and	 rcx, rax
  0533c	48 8b c1	 mov	 rax, rcx
  0533f	48 85 c0	 test	 rax, rax
  05342	74 16		 je	 SHORT $LN464@compressRo
  05344	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05348	48 c1 e0 02	 shl	 rax, 2
  0534c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05350	48 0b c8	 or	 rcx, rax
  05353	48 8b c1	 mov	 rax, rcx
  05356	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN464@compressRo:
; Line 715
  0535a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0535e	48 c1 e0 13	 shl	 rax, 19
  05362	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05366	48 23 c8	 and	 rcx, rax
  05369	48 8b c1	 mov	 rax, rcx
  0536c	48 85 c0	 test	 rax, rax
  0536f	74 16		 je	 SHORT $LN465@compressRo
  05371	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05375	48 c1 e0 14	 shl	 rax, 20
  05379	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0537d	48 0b c8	 or	 rcx, rax
  05380	48 8b c1	 mov	 rax, rcx
  05383	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN465@compressRo:
; Line 716
  05387	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0538b	48 c1 e0 11	 shl	 rax, 17
  0538f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05393	48 23 c8	 and	 rcx, rax
  05396	48 8b c1	 mov	 rax, rcx
  05399	48 85 c0	 test	 rax, rax
  0539c	74 16		 je	 SHORT $LN466@compressRo
  0539e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  053a2	48 c1 e0 09	 shl	 rax, 9
  053a6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  053aa	48 0b c8	 or	 rcx, rax
  053ad	48 8b c1	 mov	 rax, rcx
  053b0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN466@compressRo:
; Line 717
  053b4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  053b8	48 c1 e0 10	 shl	 rax, 16
  053bc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  053c0	48 23 c8	 and	 rcx, rax
  053c3	48 8b c1	 mov	 rax, rcx
  053c6	48 85 c0	 test	 rax, rax
  053c9	74 16		 je	 SHORT $LN467@compressRo
  053cb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  053cf	48 c1 e0 10	 shl	 rax, 16
  053d3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  053d7	48 0b c8	 or	 rcx, rax
  053da	48 8b c1	 mov	 rax, rcx
  053dd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN467@compressRo:
; Line 718
  053e1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  053e5	48 c1 e0 0f	 shl	 rax, 15
  053e9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  053ed	48 23 c8	 and	 rcx, rax
  053f0	48 8b c1	 mov	 rax, rcx
  053f3	48 85 c0	 test	 rax, rax
  053f6	74 16		 je	 SHORT $LN468@compressRo
  053f8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  053fc	48 c1 e0 17	 shl	 rax, 23
  05400	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05404	48 0b c8	 or	 rcx, rax
  05407	48 8b c1	 mov	 rax, rcx
  0540a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN468@compressRo:
; Line 719
  0540e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05412	48 c1 e0 0e	 shl	 rax, 14
  05416	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0541a	48 23 c8	 and	 rcx, rax
  0541d	48 8b c1	 mov	 rax, rcx
  05420	48 85 c0	 test	 rax, rax
  05423	74 16		 je	 SHORT $LN469@compressRo
  05425	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05429	48 c1 e0 04	 shl	 rax, 4
  0542d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05431	48 0b c8	 or	 rcx, rax
  05434	48 8b c1	 mov	 rax, rcx
  05437	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN469@compressRo:
; Line 720
  0543b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0543f	48 c1 e0 0c	 shl	 rax, 12
  05443	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05447	48 23 c8	 and	 rcx, rax
  0544a	48 8b c1	 mov	 rax, rcx
  0544d	48 85 c0	 test	 rax, rax
  05450	74 16		 je	 SHORT $LN470@compressRo
  05452	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05456	48 c1 e0 0b	 shl	 rax, 11
  0545a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0545e	48 0b c8	 or	 rcx, rax
  05461	48 8b c1	 mov	 rax, rcx
  05464	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN470@compressRo:
; Line 721
  05468	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0546c	48 c1 e0 0b	 shl	 rax, 11
  05470	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05474	48 23 c8	 and	 rcx, rax
  05477	48 8b c1	 mov	 rax, rcx
  0547a	48 85 c0	 test	 rax, rax
  0547d	74 16		 je	 SHORT $LN471@compressRo
  0547f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05483	48 c1 e0 0e	 shl	 rax, 14
  05487	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0548b	48 0b c8	 or	 rcx, rax
  0548e	48 8b c1	 mov	 rax, rcx
  05491	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN471@compressRo:
; Line 722
  05495	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05499	48 c1 e0 0a	 shl	 rax, 10
  0549d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  054a1	48 23 c8	 and	 rcx, rax
  054a4	48 8b c1	 mov	 rax, rcx
  054a7	48 85 c0	 test	 rax, rax
  054aa	74 16		 je	 SHORT $LN472@compressRo
  054ac	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  054b0	48 c1 e0 05	 shl	 rax, 5
  054b4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  054b8	48 0b c8	 or	 rcx, rax
  054bb	48 8b c1	 mov	 rax, rcx
  054be	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN472@compressRo:
; Line 723
  054c2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  054c6	48 c1 e0 09	 shl	 rax, 9
  054ca	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  054ce	48 23 c8	 and	 rcx, rax
  054d1	48 8b c1	 mov	 rax, rcx
  054d4	48 85 c0	 test	 rax, rax
  054d7	74 16		 je	 SHORT $LN473@compressRo
  054d9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  054dd	48 c1 e0 13	 shl	 rax, 19
  054e1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  054e5	48 0b c8	 or	 rcx, rax
  054e8	48 8b c1	 mov	 rax, rcx
  054eb	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN473@compressRo:
; Line 724
  054ef	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  054f3	48 c1 e0 08	 shl	 rax, 8
  054f7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  054fb	48 23 c8	 and	 rcx, rax
  054fe	48 8b c1	 mov	 rax, rcx
  05501	48 85 c0	 test	 rax, rax
  05504	74 16		 je	 SHORT $LN474@compressRo
  05506	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0550a	48 c1 e0 0c	 shl	 rax, 12
  0550e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05512	48 0b c8	 or	 rcx, rax
  05515	48 8b c1	 mov	 rax, rcx
  05518	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN474@compressRo:
; Line 725
  0551c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05520	48 c1 e0 07	 shl	 rax, 7
  05524	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05528	48 23 c8	 and	 rcx, rax
  0552b	48 8b c1	 mov	 rax, rcx
  0552e	48 85 c0	 test	 rax, rax
  05531	74 16		 je	 SHORT $LN475@compressRo
  05533	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05537	48 c1 e0 0a	 shl	 rax, 10
  0553b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0553f	48 0b c8	 or	 rcx, rax
  05542	48 8b c1	 mov	 rax, rcx
  05545	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN475@compressRo:
; Line 726
  05549	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0554d	48 c1 e0 06	 shl	 rax, 6
  05551	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05555	48 23 c8	 and	 rcx, rax
  05558	48 8b c1	 mov	 rax, rcx
  0555b	48 85 c0	 test	 rax, rax
  0555e	74 16		 je	 SHORT $LN476@compressRo
  05560	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05564	48 c1 e0 03	 shl	 rax, 3
  05568	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0556c	48 0b c8	 or	 rcx, rax
  0556f	48 8b c1	 mov	 rax, rcx
  05572	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN476@compressRo:
; Line 727
  05576	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0557a	48 c1 e0 05	 shl	 rax, 5
  0557e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05582	48 23 c8	 and	 rcx, rax
  05585	48 8b c1	 mov	 rax, rcx
  05588	48 85 c0	 test	 rax, rax
  0558b	74 16		 je	 SHORT $LN477@compressRo
  0558d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05591	48 c1 e0 0f	 shl	 rax, 15
  05595	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05599	48 0b c8	 or	 rcx, rax
  0559c	48 8b c1	 mov	 rax, rcx
  0559f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN477@compressRo:
; Line 728
  055a3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  055a7	48 c1 e0 04	 shl	 rax, 4
  055ab	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  055af	48 23 c8	 and	 rcx, rax
  055b2	48 8b c1	 mov	 rax, rcx
  055b5	48 85 c0	 test	 rax, rax
  055b8	74 16		 je	 SHORT $LN478@compressRo
  055ba	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  055be	48 c1 e0 16	 shl	 rax, 22
  055c2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  055c6	48 0b c8	 or	 rcx, rax
  055c9	48 8b c1	 mov	 rax, rcx
  055cc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN478@compressRo:
; Line 729
  055d0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  055d4	48 c1 e0 03	 shl	 rax, 3
  055d8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  055dc	48 23 c8	 and	 rcx, rax
  055df	48 8b c1	 mov	 rax, rcx
  055e2	48 85 c0	 test	 rax, rax
  055e5	74 16		 je	 SHORT $LN479@compressRo
  055e7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  055eb	48 c1 e0 06	 shl	 rax, 6
  055ef	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  055f3	48 0b c8	 or	 rcx, rax
  055f6	48 8b c1	 mov	 rax, rcx
  055f9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN479@compressRo:
; Line 730
  055fd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05601	48 d1 e0	 shl	 rax, 1
  05604	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05608	48 23 c8	 and	 rcx, rax
  0560b	48 8b c1	 mov	 rax, rcx
  0560e	48 85 c0	 test	 rax, rax
  05611	74 16		 je	 SHORT $LN480@compressRo
  05613	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05617	48 c1 e0 12	 shl	 rax, 18
  0561b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0561f	48 0b c8	 or	 rcx, rax
  05622	48 8b c1	 mov	 rax, rcx
  05625	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN480@compressRo:
; Line 731
  05629	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0562d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05631	48 23 c8	 and	 rcx, rax
  05634	48 8b c1	 mov	 rax, rcx
  05637	48 85 c0	 test	 rax, rax
  0563a	74 16		 je	 SHORT $LN481@compressRo
  0563c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05640	48 c1 e0 08	 shl	 rax, 8
  05644	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05648	48 0b c8	 or	 rcx, rax
  0564b	48 8b c1	 mov	 rax, rcx
  0564e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN481@compressRo:
; Line 732
  05652	b8 08 00 00 00	 mov	 eax, 8
  05657	48 6b c0 0a	 imul	 rax, rax, 10
  0565b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  05662	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  05666	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 734
  0566a	b8 08 00 00 00	 mov	 eax, 8
  0566f	48 6b c0 0b	 imul	 rax, rax, 11
  05673	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  0567a	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0567e	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 735
  05682	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 738
  0568a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0568e	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  05692	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05696	48 23 c8	 and	 rcx, rax
  05699	48 8b c1	 mov	 rax, rcx
  0569c	48 85 c0	 test	 rax, rax
  0569f	74 16		 je	 SHORT $LN482@compressRo
  056a1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  056a5	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  056a9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  056ad	48 0b c8	 or	 rcx, rax
  056b0	48 8b c1	 mov	 rax, rcx
  056b3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN482@compressRo:
; Line 739
  056b7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  056bb	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  056bf	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  056c3	48 23 c8	 and	 rcx, rax
  056c6	48 8b c1	 mov	 rax, rcx
  056c9	48 85 c0	 test	 rax, rax
  056cc	74 16		 je	 SHORT $LN483@compressRo
  056ce	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  056d2	48 c1 e0 18	 shl	 rax, 24
  056d6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  056da	48 0b c8	 or	 rcx, rax
  056dd	48 8b c1	 mov	 rax, rcx
  056e0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN483@compressRo:
; Line 740
  056e4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  056e8	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  056ec	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  056f0	48 23 c8	 and	 rcx, rax
  056f3	48 8b c1	 mov	 rax, rcx
  056f6	48 85 c0	 test	 rax, rax
  056f9	74 16		 je	 SHORT $LN484@compressRo
  056fb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  056ff	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  05703	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05707	48 0b c8	 or	 rcx, rax
  0570a	48 8b c1	 mov	 rax, rcx
  0570d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN484@compressRo:
; Line 741
  05711	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05715	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  05719	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0571d	48 23 c8	 and	 rcx, rax
  05720	48 8b c1	 mov	 rax, rcx
  05723	48 85 c0	 test	 rax, rax
  05726	74 16		 je	 SHORT $LN485@compressRo
  05728	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0572c	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  05730	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05734	48 0b c8	 or	 rcx, rax
  05737	48 8b c1	 mov	 rax, rcx
  0573a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN485@compressRo:
; Line 742
  0573e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05742	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  05746	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0574a	48 23 c8	 and	 rcx, rax
  0574d	48 8b c1	 mov	 rax, rcx
  05750	48 85 c0	 test	 rax, rax
  05753	74 16		 je	 SHORT $LN486@compressRo
  05755	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05759	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  0575d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05761	48 0b c8	 or	 rcx, rax
  05764	48 8b c1	 mov	 rax, rcx
  05767	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN486@compressRo:
; Line 743
  0576b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0576f	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  05773	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05777	48 23 c8	 and	 rcx, rax
  0577a	48 8b c1	 mov	 rax, rcx
  0577d	48 85 c0	 test	 rax, rax
  05780	74 16		 je	 SHORT $LN487@compressRo
  05782	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05786	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  0578a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0578e	48 0b c8	 or	 rcx, rax
  05791	48 8b c1	 mov	 rax, rcx
  05794	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN487@compressRo:
; Line 744
  05798	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0579c	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  057a0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  057a4	48 23 c8	 and	 rcx, rax
  057a7	48 8b c1	 mov	 rax, rcx
  057aa	48 85 c0	 test	 rax, rax
  057ad	74 16		 je	 SHORT $LN488@compressRo
  057af	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  057b3	48 c1 e0 1c	 shl	 rax, 28
  057b7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  057bb	48 0b c8	 or	 rcx, rax
  057be	48 8b c1	 mov	 rax, rcx
  057c1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN488@compressRo:
; Line 745
  057c5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  057c9	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  057cd	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  057d1	48 23 c8	 and	 rcx, rax
  057d4	48 8b c1	 mov	 rax, rcx
  057d7	48 85 c0	 test	 rax, rax
  057da	74 16		 je	 SHORT $LN489@compressRo
  057dc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  057e0	48 c1 e0 1e	 shl	 rax, 30
  057e4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  057e8	48 0b c8	 or	 rcx, rax
  057eb	48 8b c1	 mov	 rax, rcx
  057ee	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN489@compressRo:
; Line 746
  057f2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  057f6	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  057fa	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  057fe	48 23 c8	 and	 rcx, rax
  05801	48 8b c1	 mov	 rax, rcx
  05804	48 85 c0	 test	 rax, rax
  05807	74 16		 je	 SHORT $LN490@compressRo
  05809	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0580d	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  05811	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05815	48 0b c8	 or	 rcx, rax
  05818	48 8b c1	 mov	 rax, rcx
  0581b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN490@compressRo:
; Line 747
  0581f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05823	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  05827	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0582b	48 23 c8	 and	 rcx, rax
  0582e	48 8b c1	 mov	 rax, rcx
  05831	48 85 c0	 test	 rax, rax
  05834	74 16		 je	 SHORT $LN491@compressRo
  05836	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0583a	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  0583e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05842	48 0b c8	 or	 rcx, rax
  05845	48 8b c1	 mov	 rax, rcx
  05848	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN491@compressRo:
; Line 748
  0584c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05850	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  05854	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05858	48 23 c8	 and	 rcx, rax
  0585b	48 8b c1	 mov	 rax, rcx
  0585e	48 85 c0	 test	 rax, rax
  05861	74 16		 je	 SHORT $LN492@compressRo
  05863	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05867	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  0586b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0586f	48 0b c8	 or	 rcx, rax
  05872	48 8b c1	 mov	 rax, rcx
  05875	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN492@compressRo:
; Line 749
  05879	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0587d	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  05881	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05885	48 23 c8	 and	 rcx, rax
  05888	48 8b c1	 mov	 rax, rcx
  0588b	48 85 c0	 test	 rax, rax
  0588e	74 16		 je	 SHORT $LN493@compressRo
  05890	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05894	48 c1 e0 19	 shl	 rax, 25
  05898	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0589c	48 0b c8	 or	 rcx, rax
  0589f	48 8b c1	 mov	 rax, rcx
  058a2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN493@compressRo:
; Line 750
  058a6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  058aa	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  058ae	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  058b2	48 23 c8	 and	 rcx, rax
  058b5	48 8b c1	 mov	 rax, rcx
  058b8	48 85 c0	 test	 rax, rax
  058bb	74 16		 je	 SHORT $LN494@compressRo
  058bd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  058c1	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  058c5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  058c9	48 0b c8	 or	 rcx, rax
  058cc	48 8b c1	 mov	 rax, rcx
  058cf	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN494@compressRo:
; Line 751
  058d3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  058d7	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  058db	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  058df	48 23 c8	 and	 rcx, rax
  058e2	48 8b c1	 mov	 rax, rcx
  058e5	48 85 c0	 test	 rax, rax
  058e8	74 16		 je	 SHORT $LN495@compressRo
  058ea	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  058ee	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  058f2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  058f6	48 0b c8	 or	 rcx, rax
  058f9	48 8b c1	 mov	 rax, rcx
  058fc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN495@compressRo:
; Line 752
  05900	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05904	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  05908	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0590c	48 23 c8	 and	 rcx, rax
  0590f	48 8b c1	 mov	 rax, rcx
  05912	48 85 c0	 test	 rax, rax
  05915	74 16		 je	 SHORT $LN496@compressRo
  05917	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0591b	48 c1 e0 1d	 shl	 rax, 29
  0591f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05923	48 0b c8	 or	 rcx, rax
  05926	48 8b c1	 mov	 rax, rcx
  05929	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN496@compressRo:
; Line 753
  0592d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05931	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  05935	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05939	48 23 c8	 and	 rcx, rax
  0593c	48 8b c1	 mov	 rax, rcx
  0593f	48 85 c0	 test	 rax, rax
  05942	74 16		 je	 SHORT $LN497@compressRo
  05944	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05948	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  0594c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05950	48 0b c8	 or	 rcx, rax
  05953	48 8b c1	 mov	 rax, rcx
  05956	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN497@compressRo:
; Line 754
  0595a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0595e	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  05962	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05966	48 23 c8	 and	 rcx, rax
  05969	48 8b c1	 mov	 rax, rcx
  0596c	48 85 c0	 test	 rax, rax
  0596f	74 16		 je	 SHORT $LN498@compressRo
  05971	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05975	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  05979	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0597d	48 0b c8	 or	 rcx, rax
  05980	48 8b c1	 mov	 rax, rcx
  05983	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN498@compressRo:
; Line 755
  05987	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0598b	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  0598f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05993	48 23 c8	 and	 rcx, rax
  05996	48 8b c1	 mov	 rax, rcx
  05999	48 85 c0	 test	 rax, rax
  0599c	74 16		 je	 SHORT $LN499@compressRo
  0599e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  059a2	48 c1 e0 1a	 shl	 rax, 26
  059a6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  059aa	48 0b c8	 or	 rcx, rax
  059ad	48 8b c1	 mov	 rax, rcx
  059b0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN499@compressRo:
; Line 756
  059b4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  059b8	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  059bc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  059c0	48 23 c8	 and	 rcx, rax
  059c3	48 8b c1	 mov	 rax, rcx
  059c6	48 85 c0	 test	 rax, rax
  059c9	74 16		 je	 SHORT $LN500@compressRo
  059cb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  059cf	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  059d3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  059d7	48 0b c8	 or	 rcx, rax
  059da	48 8b c1	 mov	 rax, rcx
  059dd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN500@compressRo:
; Line 757
  059e1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  059e5	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  059e9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  059ed	48 23 c8	 and	 rcx, rax
  059f0	48 8b c1	 mov	 rax, rcx
  059f3	48 85 c0	 test	 rax, rax
  059f6	74 16		 je	 SHORT $LN501@compressRo
  059f8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  059fc	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  05a00	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05a04	48 0b c8	 or	 rcx, rax
  05a07	48 8b c1	 mov	 rax, rcx
  05a0a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN501@compressRo:
; Line 758
  05a0e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05a12	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  05a16	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05a1a	48 23 c8	 and	 rcx, rax
  05a1d	48 8b c1	 mov	 rax, rcx
  05a20	48 85 c0	 test	 rax, rax
  05a23	74 16		 je	 SHORT $LN502@compressRo
  05a25	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05a29	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  05a2d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05a31	48 0b c8	 or	 rcx, rax
  05a34	48 8b c1	 mov	 rax, rcx
  05a37	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN502@compressRo:
; Line 759
  05a3b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05a3f	48 c1 e0 1e	 shl	 rax, 30
  05a43	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05a47	48 23 c8	 and	 rcx, rax
  05a4a	48 8b c1	 mov	 rax, rcx
  05a4d	48 85 c0	 test	 rax, rax
  05a50	74 16		 je	 SHORT $LN503@compressRo
  05a52	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05a56	48 c1 e0 1f	 shl	 rax, 31
  05a5a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05a5e	48 0b c8	 or	 rcx, rax
  05a61	48 8b c1	 mov	 rax, rcx
  05a64	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN503@compressRo:
; Line 760
  05a68	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05a6c	48 c1 e0 1d	 shl	 rax, 29
  05a70	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05a74	48 23 c8	 and	 rcx, rax
  05a77	48 8b c1	 mov	 rax, rcx
  05a7a	48 85 c0	 test	 rax, rax
  05a7d	74 16		 je	 SHORT $LN504@compressRo
  05a7f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05a83	48 c1 e0 1b	 shl	 rax, 27
  05a87	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05a8b	48 0b c8	 or	 rcx, rax
  05a8e	48 8b c1	 mov	 rax, rcx
  05a91	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN504@compressRo:
; Line 761
  05a95	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05a99	48 c1 e0 1c	 shl	 rax, 28
  05a9d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05aa1	48 23 c8	 and	 rcx, rax
  05aa4	48 8b c1	 mov	 rax, rcx
  05aa7	48 85 c0	 test	 rax, rax
  05aaa	74 16		 je	 SHORT $LN505@compressRo
  05aac	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05ab0	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  05ab4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05ab8	48 0b c8	 or	 rcx, rax
  05abb	48 8b c1	 mov	 rax, rcx
  05abe	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN505@compressRo:
; Line 762
  05ac2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05ac6	48 c1 e0 1b	 shl	 rax, 27
  05aca	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05ace	48 23 c8	 and	 rcx, rax
  05ad1	48 8b c1	 mov	 rax, rcx
  05ad4	48 85 c0	 test	 rax, rax
  05ad7	74 15		 je	 SHORT $LN506@compressRo
  05ad9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05add	48 d1 e0	 shl	 rax, 1
  05ae0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05ae4	48 0b c8	 or	 rcx, rax
  05ae7	48 8b c1	 mov	 rax, rcx
  05aea	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN506@compressRo:
; Line 763
  05aee	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05af2	48 c1 e0 1a	 shl	 rax, 26
  05af6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05afa	48 23 c8	 and	 rcx, rax
  05afd	48 8b c1	 mov	 rax, rcx
  05b00	48 85 c0	 test	 rax, rax
  05b03	74 16		 je	 SHORT $LN507@compressRo
  05b05	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05b09	48 c1 e0 11	 shl	 rax, 17
  05b0d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05b11	48 0b c8	 or	 rcx, rax
  05b14	48 8b c1	 mov	 rax, rcx
  05b17	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN507@compressRo:
; Line 764
  05b1b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05b1f	48 c1 e0 19	 shl	 rax, 25
  05b23	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05b27	48 23 c8	 and	 rcx, rax
  05b2a	48 8b c1	 mov	 rax, rcx
  05b2d	48 85 c0	 test	 rax, rax
  05b30	74 16		 je	 SHORT $LN508@compressRo
  05b32	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05b36	48 c1 e0 15	 shl	 rax, 21
  05b3a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05b3e	48 0b c8	 or	 rcx, rax
  05b41	48 8b c1	 mov	 rax, rcx
  05b44	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN508@compressRo:
; Line 765
  05b48	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05b4c	48 c1 e0 18	 shl	 rax, 24
  05b50	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05b54	48 23 c8	 and	 rcx, rax
  05b57	48 8b c1	 mov	 rax, rcx
  05b5a	48 85 c0	 test	 rax, rax
  05b5d	74 12		 je	 SHORT $LN509@compressRo
  05b5f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05b63	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05b67	48 0b c8	 or	 rcx, rax
  05b6a	48 8b c1	 mov	 rax, rcx
  05b6d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN509@compressRo:
; Line 766
  05b71	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05b75	48 c1 e0 17	 shl	 rax, 23
  05b79	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05b7d	48 23 c8	 and	 rcx, rax
  05b80	48 8b c1	 mov	 rax, rcx
  05b83	48 85 c0	 test	 rax, rax
  05b86	74 16		 je	 SHORT $LN510@compressRo
  05b88	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05b8c	48 c1 e0 0d	 shl	 rax, 13
  05b90	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05b94	48 0b c8	 or	 rcx, rax
  05b97	48 8b c1	 mov	 rax, rcx
  05b9a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN510@compressRo:
; Line 767
  05b9e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05ba2	48 c1 e0 16	 shl	 rax, 22
  05ba6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05baa	48 23 c8	 and	 rcx, rax
  05bad	48 8b c1	 mov	 rax, rcx
  05bb0	48 85 c0	 test	 rax, rax
  05bb3	74 16		 je	 SHORT $LN511@compressRo
  05bb5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05bb9	48 c1 e0 07	 shl	 rax, 7
  05bbd	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05bc1	48 0b c8	 or	 rcx, rax
  05bc4	48 8b c1	 mov	 rax, rcx
  05bc7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN511@compressRo:
; Line 768
  05bcb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05bcf	48 c1 e0 14	 shl	 rax, 20
  05bd3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05bd7	48 23 c8	 and	 rcx, rax
  05bda	48 8b c1	 mov	 rax, rcx
  05bdd	48 85 c0	 test	 rax, rax
  05be0	74 16		 je	 SHORT $LN512@compressRo
  05be2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05be6	48 c1 e0 02	 shl	 rax, 2
  05bea	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05bee	48 0b c8	 or	 rcx, rax
  05bf1	48 8b c1	 mov	 rax, rcx
  05bf4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN512@compressRo:
; Line 769
  05bf8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05bfc	48 c1 e0 13	 shl	 rax, 19
  05c00	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05c04	48 23 c8	 and	 rcx, rax
  05c07	48 8b c1	 mov	 rax, rcx
  05c0a	48 85 c0	 test	 rax, rax
  05c0d	74 16		 je	 SHORT $LN513@compressRo
  05c0f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05c13	48 c1 e0 14	 shl	 rax, 20
  05c17	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05c1b	48 0b c8	 or	 rcx, rax
  05c1e	48 8b c1	 mov	 rax, rcx
  05c21	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN513@compressRo:
; Line 770
  05c25	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05c29	48 c1 e0 11	 shl	 rax, 17
  05c2d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05c31	48 23 c8	 and	 rcx, rax
  05c34	48 8b c1	 mov	 rax, rcx
  05c37	48 85 c0	 test	 rax, rax
  05c3a	74 16		 je	 SHORT $LN514@compressRo
  05c3c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05c40	48 c1 e0 09	 shl	 rax, 9
  05c44	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05c48	48 0b c8	 or	 rcx, rax
  05c4b	48 8b c1	 mov	 rax, rcx
  05c4e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN514@compressRo:
; Line 771
  05c52	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05c56	48 c1 e0 10	 shl	 rax, 16
  05c5a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05c5e	48 23 c8	 and	 rcx, rax
  05c61	48 8b c1	 mov	 rax, rcx
  05c64	48 85 c0	 test	 rax, rax
  05c67	74 16		 je	 SHORT $LN515@compressRo
  05c69	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05c6d	48 c1 e0 10	 shl	 rax, 16
  05c71	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05c75	48 0b c8	 or	 rcx, rax
  05c78	48 8b c1	 mov	 rax, rcx
  05c7b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN515@compressRo:
; Line 772
  05c7f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05c83	48 c1 e0 0f	 shl	 rax, 15
  05c87	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05c8b	48 23 c8	 and	 rcx, rax
  05c8e	48 8b c1	 mov	 rax, rcx
  05c91	48 85 c0	 test	 rax, rax
  05c94	74 16		 je	 SHORT $LN516@compressRo
  05c96	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05c9a	48 c1 e0 17	 shl	 rax, 23
  05c9e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05ca2	48 0b c8	 or	 rcx, rax
  05ca5	48 8b c1	 mov	 rax, rcx
  05ca8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN516@compressRo:
; Line 773
  05cac	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05cb0	48 c1 e0 0e	 shl	 rax, 14
  05cb4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05cb8	48 23 c8	 and	 rcx, rax
  05cbb	48 8b c1	 mov	 rax, rcx
  05cbe	48 85 c0	 test	 rax, rax
  05cc1	74 16		 je	 SHORT $LN517@compressRo
  05cc3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05cc7	48 c1 e0 04	 shl	 rax, 4
  05ccb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05ccf	48 0b c8	 or	 rcx, rax
  05cd2	48 8b c1	 mov	 rax, rcx
  05cd5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN517@compressRo:
; Line 774
  05cd9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05cdd	48 c1 e0 0c	 shl	 rax, 12
  05ce1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05ce5	48 23 c8	 and	 rcx, rax
  05ce8	48 8b c1	 mov	 rax, rcx
  05ceb	48 85 c0	 test	 rax, rax
  05cee	74 16		 je	 SHORT $LN518@compressRo
  05cf0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05cf4	48 c1 e0 0b	 shl	 rax, 11
  05cf8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05cfc	48 0b c8	 or	 rcx, rax
  05cff	48 8b c1	 mov	 rax, rcx
  05d02	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN518@compressRo:
; Line 775
  05d06	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05d0a	48 c1 e0 0b	 shl	 rax, 11
  05d0e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05d12	48 23 c8	 and	 rcx, rax
  05d15	48 8b c1	 mov	 rax, rcx
  05d18	48 85 c0	 test	 rax, rax
  05d1b	74 16		 je	 SHORT $LN519@compressRo
  05d1d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05d21	48 c1 e0 0e	 shl	 rax, 14
  05d25	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05d29	48 0b c8	 or	 rcx, rax
  05d2c	48 8b c1	 mov	 rax, rcx
  05d2f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN519@compressRo:
; Line 776
  05d33	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05d37	48 c1 e0 0a	 shl	 rax, 10
  05d3b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05d3f	48 23 c8	 and	 rcx, rax
  05d42	48 8b c1	 mov	 rax, rcx
  05d45	48 85 c0	 test	 rax, rax
  05d48	74 16		 je	 SHORT $LN520@compressRo
  05d4a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05d4e	48 c1 e0 05	 shl	 rax, 5
  05d52	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05d56	48 0b c8	 or	 rcx, rax
  05d59	48 8b c1	 mov	 rax, rcx
  05d5c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN520@compressRo:
; Line 777
  05d60	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05d64	48 c1 e0 09	 shl	 rax, 9
  05d68	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05d6c	48 23 c8	 and	 rcx, rax
  05d6f	48 8b c1	 mov	 rax, rcx
  05d72	48 85 c0	 test	 rax, rax
  05d75	74 16		 je	 SHORT $LN521@compressRo
  05d77	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05d7b	48 c1 e0 13	 shl	 rax, 19
  05d7f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05d83	48 0b c8	 or	 rcx, rax
  05d86	48 8b c1	 mov	 rax, rcx
  05d89	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN521@compressRo:
; Line 778
  05d8d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05d91	48 c1 e0 08	 shl	 rax, 8
  05d95	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05d99	48 23 c8	 and	 rcx, rax
  05d9c	48 8b c1	 mov	 rax, rcx
  05d9f	48 85 c0	 test	 rax, rax
  05da2	74 16		 je	 SHORT $LN522@compressRo
  05da4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05da8	48 c1 e0 0c	 shl	 rax, 12
  05dac	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05db0	48 0b c8	 or	 rcx, rax
  05db3	48 8b c1	 mov	 rax, rcx
  05db6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN522@compressRo:
; Line 779
  05dba	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05dbe	48 c1 e0 07	 shl	 rax, 7
  05dc2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05dc6	48 23 c8	 and	 rcx, rax
  05dc9	48 8b c1	 mov	 rax, rcx
  05dcc	48 85 c0	 test	 rax, rax
  05dcf	74 16		 je	 SHORT $LN523@compressRo
  05dd1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05dd5	48 c1 e0 0a	 shl	 rax, 10
  05dd9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05ddd	48 0b c8	 or	 rcx, rax
  05de0	48 8b c1	 mov	 rax, rcx
  05de3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN523@compressRo:
; Line 780
  05de7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05deb	48 c1 e0 06	 shl	 rax, 6
  05def	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05df3	48 23 c8	 and	 rcx, rax
  05df6	48 8b c1	 mov	 rax, rcx
  05df9	48 85 c0	 test	 rax, rax
  05dfc	74 16		 je	 SHORT $LN524@compressRo
  05dfe	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05e02	48 c1 e0 03	 shl	 rax, 3
  05e06	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05e0a	48 0b c8	 or	 rcx, rax
  05e0d	48 8b c1	 mov	 rax, rcx
  05e10	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN524@compressRo:
; Line 781
  05e14	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05e18	48 c1 e0 05	 shl	 rax, 5
  05e1c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05e20	48 23 c8	 and	 rcx, rax
  05e23	48 8b c1	 mov	 rax, rcx
  05e26	48 85 c0	 test	 rax, rax
  05e29	74 16		 je	 SHORT $LN525@compressRo
  05e2b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05e2f	48 c1 e0 0f	 shl	 rax, 15
  05e33	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05e37	48 0b c8	 or	 rcx, rax
  05e3a	48 8b c1	 mov	 rax, rcx
  05e3d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN525@compressRo:
; Line 782
  05e41	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05e45	48 c1 e0 04	 shl	 rax, 4
  05e49	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05e4d	48 23 c8	 and	 rcx, rax
  05e50	48 8b c1	 mov	 rax, rcx
  05e53	48 85 c0	 test	 rax, rax
  05e56	74 16		 je	 SHORT $LN526@compressRo
  05e58	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05e5c	48 c1 e0 16	 shl	 rax, 22
  05e60	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05e64	48 0b c8	 or	 rcx, rax
  05e67	48 8b c1	 mov	 rax, rcx
  05e6a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN526@compressRo:
; Line 783
  05e6e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05e72	48 c1 e0 03	 shl	 rax, 3
  05e76	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05e7a	48 23 c8	 and	 rcx, rax
  05e7d	48 8b c1	 mov	 rax, rcx
  05e80	48 85 c0	 test	 rax, rax
  05e83	74 16		 je	 SHORT $LN527@compressRo
  05e85	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05e89	48 c1 e0 06	 shl	 rax, 6
  05e8d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05e91	48 0b c8	 or	 rcx, rax
  05e94	48 8b c1	 mov	 rax, rcx
  05e97	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN527@compressRo:
; Line 784
  05e9b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05e9f	48 d1 e0	 shl	 rax, 1
  05ea2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05ea6	48 23 c8	 and	 rcx, rax
  05ea9	48 8b c1	 mov	 rax, rcx
  05eac	48 85 c0	 test	 rax, rax
  05eaf	74 16		 je	 SHORT $LN528@compressRo
  05eb1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05eb5	48 c1 e0 12	 shl	 rax, 18
  05eb9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05ebd	48 0b c8	 or	 rcx, rax
  05ec0	48 8b c1	 mov	 rax, rcx
  05ec3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN528@compressRo:
; Line 785
  05ec7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05ecb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05ecf	48 23 c8	 and	 rcx, rax
  05ed2	48 8b c1	 mov	 rax, rcx
  05ed5	48 85 c0	 test	 rax, rax
  05ed8	74 16		 je	 SHORT $LN529@compressRo
  05eda	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05ede	48 c1 e0 08	 shl	 rax, 8
  05ee2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05ee6	48 0b c8	 or	 rcx, rax
  05ee9	48 8b c1	 mov	 rax, rcx
  05eec	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN529@compressRo:
; Line 786
  05ef0	b8 08 00 00 00	 mov	 eax, 8
  05ef5	48 6b c0 0b	 imul	 rax, rax, 11
  05ef9	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  05f00	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  05f04	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 788
  05f08	b8 08 00 00 00	 mov	 eax, 8
  05f0d	48 6b c0 0c	 imul	 rax, rax, 12
  05f11	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  05f18	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  05f1c	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 789
  05f20	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 792
  05f28	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05f2c	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  05f30	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05f34	48 23 c8	 and	 rcx, rax
  05f37	48 8b c1	 mov	 rax, rcx
  05f3a	48 85 c0	 test	 rax, rax
  05f3d	74 16		 je	 SHORT $LN530@compressRo
  05f3f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05f43	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  05f47	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05f4b	48 0b c8	 or	 rcx, rax
  05f4e	48 8b c1	 mov	 rax, rcx
  05f51	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN530@compressRo:
; Line 793
  05f55	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05f59	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  05f5d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05f61	48 23 c8	 and	 rcx, rax
  05f64	48 8b c1	 mov	 rax, rcx
  05f67	48 85 c0	 test	 rax, rax
  05f6a	74 16		 je	 SHORT $LN531@compressRo
  05f6c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05f70	48 c1 e0 18	 shl	 rax, 24
  05f74	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05f78	48 0b c8	 or	 rcx, rax
  05f7b	48 8b c1	 mov	 rax, rcx
  05f7e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN531@compressRo:
; Line 794
  05f82	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05f86	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  05f8a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05f8e	48 23 c8	 and	 rcx, rax
  05f91	48 8b c1	 mov	 rax, rcx
  05f94	48 85 c0	 test	 rax, rax
  05f97	74 16		 je	 SHORT $LN532@compressRo
  05f99	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05f9d	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  05fa1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05fa5	48 0b c8	 or	 rcx, rax
  05fa8	48 8b c1	 mov	 rax, rcx
  05fab	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN532@compressRo:
; Line 795
  05faf	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05fb3	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  05fb7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05fbb	48 23 c8	 and	 rcx, rax
  05fbe	48 8b c1	 mov	 rax, rcx
  05fc1	48 85 c0	 test	 rax, rax
  05fc4	74 16		 je	 SHORT $LN533@compressRo
  05fc6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05fca	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  05fce	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05fd2	48 0b c8	 or	 rcx, rax
  05fd5	48 8b c1	 mov	 rax, rcx
  05fd8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN533@compressRo:
; Line 796
  05fdc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05fe0	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  05fe4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  05fe8	48 23 c8	 and	 rcx, rax
  05feb	48 8b c1	 mov	 rax, rcx
  05fee	48 85 c0	 test	 rax, rax
  05ff1	74 16		 je	 SHORT $LN534@compressRo
  05ff3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  05ff7	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  05ffb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  05fff	48 0b c8	 or	 rcx, rax
  06002	48 8b c1	 mov	 rax, rcx
  06005	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN534@compressRo:
; Line 797
  06009	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0600d	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  06011	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06015	48 23 c8	 and	 rcx, rax
  06018	48 8b c1	 mov	 rax, rcx
  0601b	48 85 c0	 test	 rax, rax
  0601e	74 16		 je	 SHORT $LN535@compressRo
  06020	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06024	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  06028	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0602c	48 0b c8	 or	 rcx, rax
  0602f	48 8b c1	 mov	 rax, rcx
  06032	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN535@compressRo:
; Line 798
  06036	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0603a	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  0603e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06042	48 23 c8	 and	 rcx, rax
  06045	48 8b c1	 mov	 rax, rcx
  06048	48 85 c0	 test	 rax, rax
  0604b	74 16		 je	 SHORT $LN536@compressRo
  0604d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06051	48 c1 e0 1c	 shl	 rax, 28
  06055	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06059	48 0b c8	 or	 rcx, rax
  0605c	48 8b c1	 mov	 rax, rcx
  0605f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN536@compressRo:
; Line 799
  06063	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06067	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  0606b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0606f	48 23 c8	 and	 rcx, rax
  06072	48 8b c1	 mov	 rax, rcx
  06075	48 85 c0	 test	 rax, rax
  06078	74 16		 je	 SHORT $LN537@compressRo
  0607a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0607e	48 c1 e0 1e	 shl	 rax, 30
  06082	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06086	48 0b c8	 or	 rcx, rax
  06089	48 8b c1	 mov	 rax, rcx
  0608c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN537@compressRo:
; Line 800
  06090	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06094	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  06098	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0609c	48 23 c8	 and	 rcx, rax
  0609f	48 8b c1	 mov	 rax, rcx
  060a2	48 85 c0	 test	 rax, rax
  060a5	74 16		 je	 SHORT $LN538@compressRo
  060a7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  060ab	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  060af	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  060b3	48 0b c8	 or	 rcx, rax
  060b6	48 8b c1	 mov	 rax, rcx
  060b9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN538@compressRo:
; Line 801
  060bd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  060c1	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  060c5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  060c9	48 23 c8	 and	 rcx, rax
  060cc	48 8b c1	 mov	 rax, rcx
  060cf	48 85 c0	 test	 rax, rax
  060d2	74 16		 je	 SHORT $LN539@compressRo
  060d4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  060d8	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  060dc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  060e0	48 0b c8	 or	 rcx, rax
  060e3	48 8b c1	 mov	 rax, rcx
  060e6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN539@compressRo:
; Line 802
  060ea	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  060ee	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  060f2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  060f6	48 23 c8	 and	 rcx, rax
  060f9	48 8b c1	 mov	 rax, rcx
  060fc	48 85 c0	 test	 rax, rax
  060ff	74 16		 je	 SHORT $LN540@compressRo
  06101	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06105	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  06109	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0610d	48 0b c8	 or	 rcx, rax
  06110	48 8b c1	 mov	 rax, rcx
  06113	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN540@compressRo:
; Line 803
  06117	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0611b	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  0611f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06123	48 23 c8	 and	 rcx, rax
  06126	48 8b c1	 mov	 rax, rcx
  06129	48 85 c0	 test	 rax, rax
  0612c	74 16		 je	 SHORT $LN541@compressRo
  0612e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06132	48 c1 e0 19	 shl	 rax, 25
  06136	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0613a	48 0b c8	 or	 rcx, rax
  0613d	48 8b c1	 mov	 rax, rcx
  06140	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN541@compressRo:
; Line 804
  06144	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06148	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  0614c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06150	48 23 c8	 and	 rcx, rax
  06153	48 8b c1	 mov	 rax, rcx
  06156	48 85 c0	 test	 rax, rax
  06159	74 16		 je	 SHORT $LN542@compressRo
  0615b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0615f	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  06163	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06167	48 0b c8	 or	 rcx, rax
  0616a	48 8b c1	 mov	 rax, rcx
  0616d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN542@compressRo:
; Line 805
  06171	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06175	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  06179	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0617d	48 23 c8	 and	 rcx, rax
  06180	48 8b c1	 mov	 rax, rcx
  06183	48 85 c0	 test	 rax, rax
  06186	74 16		 je	 SHORT $LN543@compressRo
  06188	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0618c	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  06190	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06194	48 0b c8	 or	 rcx, rax
  06197	48 8b c1	 mov	 rax, rcx
  0619a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN543@compressRo:
; Line 806
  0619e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  061a2	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  061a6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  061aa	48 23 c8	 and	 rcx, rax
  061ad	48 8b c1	 mov	 rax, rcx
  061b0	48 85 c0	 test	 rax, rax
  061b3	74 16		 je	 SHORT $LN544@compressRo
  061b5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  061b9	48 c1 e0 1d	 shl	 rax, 29
  061bd	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  061c1	48 0b c8	 or	 rcx, rax
  061c4	48 8b c1	 mov	 rax, rcx
  061c7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN544@compressRo:
; Line 807
  061cb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  061cf	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  061d3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  061d7	48 23 c8	 and	 rcx, rax
  061da	48 8b c1	 mov	 rax, rcx
  061dd	48 85 c0	 test	 rax, rax
  061e0	74 16		 je	 SHORT $LN545@compressRo
  061e2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  061e6	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  061ea	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  061ee	48 0b c8	 or	 rcx, rax
  061f1	48 8b c1	 mov	 rax, rcx
  061f4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN545@compressRo:
; Line 808
  061f8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  061fc	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  06200	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06204	48 23 c8	 and	 rcx, rax
  06207	48 8b c1	 mov	 rax, rcx
  0620a	48 85 c0	 test	 rax, rax
  0620d	74 16		 je	 SHORT $LN546@compressRo
  0620f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06213	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  06217	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0621b	48 0b c8	 or	 rcx, rax
  0621e	48 8b c1	 mov	 rax, rcx
  06221	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN546@compressRo:
; Line 809
  06225	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06229	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  0622d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06231	48 23 c8	 and	 rcx, rax
  06234	48 8b c1	 mov	 rax, rcx
  06237	48 85 c0	 test	 rax, rax
  0623a	74 16		 je	 SHORT $LN547@compressRo
  0623c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06240	48 c1 e0 1a	 shl	 rax, 26
  06244	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06248	48 0b c8	 or	 rcx, rax
  0624b	48 8b c1	 mov	 rax, rcx
  0624e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN547@compressRo:
; Line 810
  06252	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06256	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  0625a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0625e	48 23 c8	 and	 rcx, rax
  06261	48 8b c1	 mov	 rax, rcx
  06264	48 85 c0	 test	 rax, rax
  06267	74 16		 je	 SHORT $LN548@compressRo
  06269	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0626d	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  06271	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06275	48 0b c8	 or	 rcx, rax
  06278	48 8b c1	 mov	 rax, rcx
  0627b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN548@compressRo:
; Line 811
  0627f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06283	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  06287	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0628b	48 23 c8	 and	 rcx, rax
  0628e	48 8b c1	 mov	 rax, rcx
  06291	48 85 c0	 test	 rax, rax
  06294	74 16		 je	 SHORT $LN549@compressRo
  06296	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0629a	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  0629e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  062a2	48 0b c8	 or	 rcx, rax
  062a5	48 8b c1	 mov	 rax, rcx
  062a8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN549@compressRo:
; Line 812
  062ac	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  062b0	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  062b4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  062b8	48 23 c8	 and	 rcx, rax
  062bb	48 8b c1	 mov	 rax, rcx
  062be	48 85 c0	 test	 rax, rax
  062c1	74 16		 je	 SHORT $LN550@compressRo
  062c3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  062c7	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  062cb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  062cf	48 0b c8	 or	 rcx, rax
  062d2	48 8b c1	 mov	 rax, rcx
  062d5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN550@compressRo:
; Line 813
  062d9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  062dd	48 c1 e0 1e	 shl	 rax, 30
  062e1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  062e5	48 23 c8	 and	 rcx, rax
  062e8	48 8b c1	 mov	 rax, rcx
  062eb	48 85 c0	 test	 rax, rax
  062ee	74 16		 je	 SHORT $LN551@compressRo
  062f0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  062f4	48 c1 e0 1f	 shl	 rax, 31
  062f8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  062fc	48 0b c8	 or	 rcx, rax
  062ff	48 8b c1	 mov	 rax, rcx
  06302	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN551@compressRo:
; Line 814
  06306	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0630a	48 c1 e0 1d	 shl	 rax, 29
  0630e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06312	48 23 c8	 and	 rcx, rax
  06315	48 8b c1	 mov	 rax, rcx
  06318	48 85 c0	 test	 rax, rax
  0631b	74 16		 je	 SHORT $LN552@compressRo
  0631d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06321	48 c1 e0 1b	 shl	 rax, 27
  06325	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06329	48 0b c8	 or	 rcx, rax
  0632c	48 8b c1	 mov	 rax, rcx
  0632f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN552@compressRo:
; Line 815
  06333	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06337	48 c1 e0 1c	 shl	 rax, 28
  0633b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0633f	48 23 c8	 and	 rcx, rax
  06342	48 8b c1	 mov	 rax, rcx
  06345	48 85 c0	 test	 rax, rax
  06348	74 16		 je	 SHORT $LN553@compressRo
  0634a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0634e	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  06352	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06356	48 0b c8	 or	 rcx, rax
  06359	48 8b c1	 mov	 rax, rcx
  0635c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN553@compressRo:
; Line 816
  06360	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06364	48 c1 e0 1b	 shl	 rax, 27
  06368	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0636c	48 23 c8	 and	 rcx, rax
  0636f	48 8b c1	 mov	 rax, rcx
  06372	48 85 c0	 test	 rax, rax
  06375	74 15		 je	 SHORT $LN554@compressRo
  06377	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0637b	48 d1 e0	 shl	 rax, 1
  0637e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06382	48 0b c8	 or	 rcx, rax
  06385	48 8b c1	 mov	 rax, rcx
  06388	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN554@compressRo:
; Line 817
  0638c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06390	48 c1 e0 1a	 shl	 rax, 26
  06394	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06398	48 23 c8	 and	 rcx, rax
  0639b	48 8b c1	 mov	 rax, rcx
  0639e	48 85 c0	 test	 rax, rax
  063a1	74 16		 je	 SHORT $LN555@compressRo
  063a3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  063a7	48 c1 e0 11	 shl	 rax, 17
  063ab	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  063af	48 0b c8	 or	 rcx, rax
  063b2	48 8b c1	 mov	 rax, rcx
  063b5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN555@compressRo:
; Line 818
  063b9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  063bd	48 c1 e0 19	 shl	 rax, 25
  063c1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  063c5	48 23 c8	 and	 rcx, rax
  063c8	48 8b c1	 mov	 rax, rcx
  063cb	48 85 c0	 test	 rax, rax
  063ce	74 16		 je	 SHORT $LN556@compressRo
  063d0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  063d4	48 c1 e0 15	 shl	 rax, 21
  063d8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  063dc	48 0b c8	 or	 rcx, rax
  063df	48 8b c1	 mov	 rax, rcx
  063e2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN556@compressRo:
; Line 819
  063e6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  063ea	48 c1 e0 18	 shl	 rax, 24
  063ee	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  063f2	48 23 c8	 and	 rcx, rax
  063f5	48 8b c1	 mov	 rax, rcx
  063f8	48 85 c0	 test	 rax, rax
  063fb	74 12		 je	 SHORT $LN557@compressRo
  063fd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06401	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06405	48 0b c8	 or	 rcx, rax
  06408	48 8b c1	 mov	 rax, rcx
  0640b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN557@compressRo:
; Line 820
  0640f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06413	48 c1 e0 17	 shl	 rax, 23
  06417	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0641b	48 23 c8	 and	 rcx, rax
  0641e	48 8b c1	 mov	 rax, rcx
  06421	48 85 c0	 test	 rax, rax
  06424	74 16		 je	 SHORT $LN558@compressRo
  06426	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0642a	48 c1 e0 0d	 shl	 rax, 13
  0642e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06432	48 0b c8	 or	 rcx, rax
  06435	48 8b c1	 mov	 rax, rcx
  06438	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN558@compressRo:
; Line 821
  0643c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06440	48 c1 e0 16	 shl	 rax, 22
  06444	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06448	48 23 c8	 and	 rcx, rax
  0644b	48 8b c1	 mov	 rax, rcx
  0644e	48 85 c0	 test	 rax, rax
  06451	74 16		 je	 SHORT $LN559@compressRo
  06453	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06457	48 c1 e0 07	 shl	 rax, 7
  0645b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0645f	48 0b c8	 or	 rcx, rax
  06462	48 8b c1	 mov	 rax, rcx
  06465	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN559@compressRo:
; Line 822
  06469	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0646d	48 c1 e0 14	 shl	 rax, 20
  06471	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06475	48 23 c8	 and	 rcx, rax
  06478	48 8b c1	 mov	 rax, rcx
  0647b	48 85 c0	 test	 rax, rax
  0647e	74 16		 je	 SHORT $LN560@compressRo
  06480	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06484	48 c1 e0 02	 shl	 rax, 2
  06488	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0648c	48 0b c8	 or	 rcx, rax
  0648f	48 8b c1	 mov	 rax, rcx
  06492	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN560@compressRo:
; Line 823
  06496	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0649a	48 c1 e0 13	 shl	 rax, 19
  0649e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  064a2	48 23 c8	 and	 rcx, rax
  064a5	48 8b c1	 mov	 rax, rcx
  064a8	48 85 c0	 test	 rax, rax
  064ab	74 16		 je	 SHORT $LN561@compressRo
  064ad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  064b1	48 c1 e0 14	 shl	 rax, 20
  064b5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  064b9	48 0b c8	 or	 rcx, rax
  064bc	48 8b c1	 mov	 rax, rcx
  064bf	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN561@compressRo:
; Line 824
  064c3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  064c7	48 c1 e0 11	 shl	 rax, 17
  064cb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  064cf	48 23 c8	 and	 rcx, rax
  064d2	48 8b c1	 mov	 rax, rcx
  064d5	48 85 c0	 test	 rax, rax
  064d8	74 16		 je	 SHORT $LN562@compressRo
  064da	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  064de	48 c1 e0 09	 shl	 rax, 9
  064e2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  064e6	48 0b c8	 or	 rcx, rax
  064e9	48 8b c1	 mov	 rax, rcx
  064ec	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN562@compressRo:
; Line 825
  064f0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  064f4	48 c1 e0 10	 shl	 rax, 16
  064f8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  064fc	48 23 c8	 and	 rcx, rax
  064ff	48 8b c1	 mov	 rax, rcx
  06502	48 85 c0	 test	 rax, rax
  06505	74 16		 je	 SHORT $LN563@compressRo
  06507	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0650b	48 c1 e0 10	 shl	 rax, 16
  0650f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06513	48 0b c8	 or	 rcx, rax
  06516	48 8b c1	 mov	 rax, rcx
  06519	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN563@compressRo:
; Line 826
  0651d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06521	48 c1 e0 0f	 shl	 rax, 15
  06525	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06529	48 23 c8	 and	 rcx, rax
  0652c	48 8b c1	 mov	 rax, rcx
  0652f	48 85 c0	 test	 rax, rax
  06532	74 16		 je	 SHORT $LN564@compressRo
  06534	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06538	48 c1 e0 17	 shl	 rax, 23
  0653c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06540	48 0b c8	 or	 rcx, rax
  06543	48 8b c1	 mov	 rax, rcx
  06546	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN564@compressRo:
; Line 827
  0654a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0654e	48 c1 e0 0e	 shl	 rax, 14
  06552	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06556	48 23 c8	 and	 rcx, rax
  06559	48 8b c1	 mov	 rax, rcx
  0655c	48 85 c0	 test	 rax, rax
  0655f	74 16		 je	 SHORT $LN565@compressRo
  06561	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06565	48 c1 e0 04	 shl	 rax, 4
  06569	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0656d	48 0b c8	 or	 rcx, rax
  06570	48 8b c1	 mov	 rax, rcx
  06573	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN565@compressRo:
; Line 828
  06577	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0657b	48 c1 e0 0c	 shl	 rax, 12
  0657f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06583	48 23 c8	 and	 rcx, rax
  06586	48 8b c1	 mov	 rax, rcx
  06589	48 85 c0	 test	 rax, rax
  0658c	74 16		 je	 SHORT $LN566@compressRo
  0658e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06592	48 c1 e0 0b	 shl	 rax, 11
  06596	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0659a	48 0b c8	 or	 rcx, rax
  0659d	48 8b c1	 mov	 rax, rcx
  065a0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN566@compressRo:
; Line 829
  065a4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  065a8	48 c1 e0 0b	 shl	 rax, 11
  065ac	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  065b0	48 23 c8	 and	 rcx, rax
  065b3	48 8b c1	 mov	 rax, rcx
  065b6	48 85 c0	 test	 rax, rax
  065b9	74 16		 je	 SHORT $LN567@compressRo
  065bb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  065bf	48 c1 e0 0e	 shl	 rax, 14
  065c3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  065c7	48 0b c8	 or	 rcx, rax
  065ca	48 8b c1	 mov	 rax, rcx
  065cd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN567@compressRo:
; Line 830
  065d1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  065d5	48 c1 e0 0a	 shl	 rax, 10
  065d9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  065dd	48 23 c8	 and	 rcx, rax
  065e0	48 8b c1	 mov	 rax, rcx
  065e3	48 85 c0	 test	 rax, rax
  065e6	74 16		 je	 SHORT $LN568@compressRo
  065e8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  065ec	48 c1 e0 05	 shl	 rax, 5
  065f0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  065f4	48 0b c8	 or	 rcx, rax
  065f7	48 8b c1	 mov	 rax, rcx
  065fa	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN568@compressRo:
; Line 831
  065fe	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06602	48 c1 e0 09	 shl	 rax, 9
  06606	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0660a	48 23 c8	 and	 rcx, rax
  0660d	48 8b c1	 mov	 rax, rcx
  06610	48 85 c0	 test	 rax, rax
  06613	74 16		 je	 SHORT $LN569@compressRo
  06615	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06619	48 c1 e0 13	 shl	 rax, 19
  0661d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06621	48 0b c8	 or	 rcx, rax
  06624	48 8b c1	 mov	 rax, rcx
  06627	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN569@compressRo:
; Line 832
  0662b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0662f	48 c1 e0 08	 shl	 rax, 8
  06633	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06637	48 23 c8	 and	 rcx, rax
  0663a	48 8b c1	 mov	 rax, rcx
  0663d	48 85 c0	 test	 rax, rax
  06640	74 16		 je	 SHORT $LN570@compressRo
  06642	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06646	48 c1 e0 0c	 shl	 rax, 12
  0664a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0664e	48 0b c8	 or	 rcx, rax
  06651	48 8b c1	 mov	 rax, rcx
  06654	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN570@compressRo:
; Line 833
  06658	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0665c	48 c1 e0 07	 shl	 rax, 7
  06660	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06664	48 23 c8	 and	 rcx, rax
  06667	48 8b c1	 mov	 rax, rcx
  0666a	48 85 c0	 test	 rax, rax
  0666d	74 16		 je	 SHORT $LN571@compressRo
  0666f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06673	48 c1 e0 0a	 shl	 rax, 10
  06677	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0667b	48 0b c8	 or	 rcx, rax
  0667e	48 8b c1	 mov	 rax, rcx
  06681	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN571@compressRo:
; Line 834
  06685	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06689	48 c1 e0 06	 shl	 rax, 6
  0668d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06691	48 23 c8	 and	 rcx, rax
  06694	48 8b c1	 mov	 rax, rcx
  06697	48 85 c0	 test	 rax, rax
  0669a	74 16		 je	 SHORT $LN572@compressRo
  0669c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  066a0	48 c1 e0 03	 shl	 rax, 3
  066a4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  066a8	48 0b c8	 or	 rcx, rax
  066ab	48 8b c1	 mov	 rax, rcx
  066ae	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN572@compressRo:
; Line 835
  066b2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  066b6	48 c1 e0 05	 shl	 rax, 5
  066ba	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  066be	48 23 c8	 and	 rcx, rax
  066c1	48 8b c1	 mov	 rax, rcx
  066c4	48 85 c0	 test	 rax, rax
  066c7	74 16		 je	 SHORT $LN573@compressRo
  066c9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  066cd	48 c1 e0 0f	 shl	 rax, 15
  066d1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  066d5	48 0b c8	 or	 rcx, rax
  066d8	48 8b c1	 mov	 rax, rcx
  066db	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN573@compressRo:
; Line 836
  066df	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  066e3	48 c1 e0 04	 shl	 rax, 4
  066e7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  066eb	48 23 c8	 and	 rcx, rax
  066ee	48 8b c1	 mov	 rax, rcx
  066f1	48 85 c0	 test	 rax, rax
  066f4	74 16		 je	 SHORT $LN574@compressRo
  066f6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  066fa	48 c1 e0 16	 shl	 rax, 22
  066fe	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06702	48 0b c8	 or	 rcx, rax
  06705	48 8b c1	 mov	 rax, rcx
  06708	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN574@compressRo:
; Line 837
  0670c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06710	48 c1 e0 03	 shl	 rax, 3
  06714	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06718	48 23 c8	 and	 rcx, rax
  0671b	48 8b c1	 mov	 rax, rcx
  0671e	48 85 c0	 test	 rax, rax
  06721	74 16		 je	 SHORT $LN575@compressRo
  06723	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06727	48 c1 e0 06	 shl	 rax, 6
  0672b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0672f	48 0b c8	 or	 rcx, rax
  06732	48 8b c1	 mov	 rax, rcx
  06735	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN575@compressRo:
; Line 838
  06739	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0673d	48 d1 e0	 shl	 rax, 1
  06740	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06744	48 23 c8	 and	 rcx, rax
  06747	48 8b c1	 mov	 rax, rcx
  0674a	48 85 c0	 test	 rax, rax
  0674d	74 16		 je	 SHORT $LN576@compressRo
  0674f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06753	48 c1 e0 12	 shl	 rax, 18
  06757	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0675b	48 0b c8	 or	 rcx, rax
  0675e	48 8b c1	 mov	 rax, rcx
  06761	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN576@compressRo:
; Line 839
  06765	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06769	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0676d	48 23 c8	 and	 rcx, rax
  06770	48 8b c1	 mov	 rax, rcx
  06773	48 85 c0	 test	 rax, rax
  06776	74 16		 je	 SHORT $LN577@compressRo
  06778	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0677c	48 c1 e0 08	 shl	 rax, 8
  06780	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06784	48 0b c8	 or	 rcx, rax
  06787	48 8b c1	 mov	 rax, rcx
  0678a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN577@compressRo:
; Line 840
  0678e	b8 08 00 00 00	 mov	 eax, 8
  06793	48 6b c0 0c	 imul	 rax, rax, 12
  06797	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  0679e	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  067a2	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 842
  067a6	b8 08 00 00 00	 mov	 eax, 8
  067ab	48 6b c0 0d	 imul	 rax, rax, 13
  067af	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  067b6	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  067ba	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 843
  067be	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 846
  067c6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  067ca	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  067ce	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  067d2	48 23 c8	 and	 rcx, rax
  067d5	48 8b c1	 mov	 rax, rcx
  067d8	48 85 c0	 test	 rax, rax
  067db	74 16		 je	 SHORT $LN578@compressRo
  067dd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  067e1	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  067e5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  067e9	48 0b c8	 or	 rcx, rax
  067ec	48 8b c1	 mov	 rax, rcx
  067ef	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN578@compressRo:
; Line 847
  067f3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  067f7	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  067fb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  067ff	48 23 c8	 and	 rcx, rax
  06802	48 8b c1	 mov	 rax, rcx
  06805	48 85 c0	 test	 rax, rax
  06808	74 16		 je	 SHORT $LN579@compressRo
  0680a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0680e	48 c1 e0 18	 shl	 rax, 24
  06812	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06816	48 0b c8	 or	 rcx, rax
  06819	48 8b c1	 mov	 rax, rcx
  0681c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN579@compressRo:
; Line 848
  06820	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06824	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  06828	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0682c	48 23 c8	 and	 rcx, rax
  0682f	48 8b c1	 mov	 rax, rcx
  06832	48 85 c0	 test	 rax, rax
  06835	74 16		 je	 SHORT $LN580@compressRo
  06837	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0683b	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  0683f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06843	48 0b c8	 or	 rcx, rax
  06846	48 8b c1	 mov	 rax, rcx
  06849	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN580@compressRo:
; Line 849
  0684d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06851	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  06855	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06859	48 23 c8	 and	 rcx, rax
  0685c	48 8b c1	 mov	 rax, rcx
  0685f	48 85 c0	 test	 rax, rax
  06862	74 16		 je	 SHORT $LN581@compressRo
  06864	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06868	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0686c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06870	48 0b c8	 or	 rcx, rax
  06873	48 8b c1	 mov	 rax, rcx
  06876	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN581@compressRo:
; Line 850
  0687a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0687e	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  06882	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06886	48 23 c8	 and	 rcx, rax
  06889	48 8b c1	 mov	 rax, rcx
  0688c	48 85 c0	 test	 rax, rax
  0688f	74 16		 je	 SHORT $LN582@compressRo
  06891	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06895	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  06899	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0689d	48 0b c8	 or	 rcx, rax
  068a0	48 8b c1	 mov	 rax, rcx
  068a3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN582@compressRo:
; Line 851
  068a7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  068ab	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  068af	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  068b3	48 23 c8	 and	 rcx, rax
  068b6	48 8b c1	 mov	 rax, rcx
  068b9	48 85 c0	 test	 rax, rax
  068bc	74 16		 je	 SHORT $LN583@compressRo
  068be	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  068c2	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  068c6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  068ca	48 0b c8	 or	 rcx, rax
  068cd	48 8b c1	 mov	 rax, rcx
  068d0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN583@compressRo:
; Line 852
  068d4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  068d8	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  068dc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  068e0	48 23 c8	 and	 rcx, rax
  068e3	48 8b c1	 mov	 rax, rcx
  068e6	48 85 c0	 test	 rax, rax
  068e9	74 16		 je	 SHORT $LN584@compressRo
  068eb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  068ef	48 c1 e0 1c	 shl	 rax, 28
  068f3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  068f7	48 0b c8	 or	 rcx, rax
  068fa	48 8b c1	 mov	 rax, rcx
  068fd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN584@compressRo:
; Line 853
  06901	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06905	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  06909	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0690d	48 23 c8	 and	 rcx, rax
  06910	48 8b c1	 mov	 rax, rcx
  06913	48 85 c0	 test	 rax, rax
  06916	74 16		 je	 SHORT $LN585@compressRo
  06918	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0691c	48 c1 e0 1e	 shl	 rax, 30
  06920	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06924	48 0b c8	 or	 rcx, rax
  06927	48 8b c1	 mov	 rax, rcx
  0692a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN585@compressRo:
; Line 854
  0692e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06932	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  06936	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0693a	48 23 c8	 and	 rcx, rax
  0693d	48 8b c1	 mov	 rax, rcx
  06940	48 85 c0	 test	 rax, rax
  06943	74 16		 je	 SHORT $LN586@compressRo
  06945	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06949	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  0694d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06951	48 0b c8	 or	 rcx, rax
  06954	48 8b c1	 mov	 rax, rcx
  06957	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN586@compressRo:
; Line 855
  0695b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0695f	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  06963	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06967	48 23 c8	 and	 rcx, rax
  0696a	48 8b c1	 mov	 rax, rcx
  0696d	48 85 c0	 test	 rax, rax
  06970	74 16		 je	 SHORT $LN587@compressRo
  06972	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06976	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  0697a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0697e	48 0b c8	 or	 rcx, rax
  06981	48 8b c1	 mov	 rax, rcx
  06984	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN587@compressRo:
; Line 856
  06988	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0698c	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  06990	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06994	48 23 c8	 and	 rcx, rax
  06997	48 8b c1	 mov	 rax, rcx
  0699a	48 85 c0	 test	 rax, rax
  0699d	74 16		 je	 SHORT $LN588@compressRo
  0699f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  069a3	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  069a7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  069ab	48 0b c8	 or	 rcx, rax
  069ae	48 8b c1	 mov	 rax, rcx
  069b1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN588@compressRo:
; Line 857
  069b5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  069b9	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  069bd	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  069c1	48 23 c8	 and	 rcx, rax
  069c4	48 8b c1	 mov	 rax, rcx
  069c7	48 85 c0	 test	 rax, rax
  069ca	74 16		 je	 SHORT $LN589@compressRo
  069cc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  069d0	48 c1 e0 19	 shl	 rax, 25
  069d4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  069d8	48 0b c8	 or	 rcx, rax
  069db	48 8b c1	 mov	 rax, rcx
  069de	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN589@compressRo:
; Line 858
  069e2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  069e6	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  069ea	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  069ee	48 23 c8	 and	 rcx, rax
  069f1	48 8b c1	 mov	 rax, rcx
  069f4	48 85 c0	 test	 rax, rax
  069f7	74 16		 je	 SHORT $LN590@compressRo
  069f9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  069fd	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  06a01	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06a05	48 0b c8	 or	 rcx, rax
  06a08	48 8b c1	 mov	 rax, rcx
  06a0b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN590@compressRo:
; Line 859
  06a0f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06a13	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  06a17	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06a1b	48 23 c8	 and	 rcx, rax
  06a1e	48 8b c1	 mov	 rax, rcx
  06a21	48 85 c0	 test	 rax, rax
  06a24	74 16		 je	 SHORT $LN591@compressRo
  06a26	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06a2a	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  06a2e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06a32	48 0b c8	 or	 rcx, rax
  06a35	48 8b c1	 mov	 rax, rcx
  06a38	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN591@compressRo:
; Line 860
  06a3c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06a40	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  06a44	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06a48	48 23 c8	 and	 rcx, rax
  06a4b	48 8b c1	 mov	 rax, rcx
  06a4e	48 85 c0	 test	 rax, rax
  06a51	74 16		 je	 SHORT $LN592@compressRo
  06a53	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06a57	48 c1 e0 1d	 shl	 rax, 29
  06a5b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06a5f	48 0b c8	 or	 rcx, rax
  06a62	48 8b c1	 mov	 rax, rcx
  06a65	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN592@compressRo:
; Line 861
  06a69	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06a6d	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  06a71	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06a75	48 23 c8	 and	 rcx, rax
  06a78	48 8b c1	 mov	 rax, rcx
  06a7b	48 85 c0	 test	 rax, rax
  06a7e	74 16		 je	 SHORT $LN593@compressRo
  06a80	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06a84	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  06a88	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06a8c	48 0b c8	 or	 rcx, rax
  06a8f	48 8b c1	 mov	 rax, rcx
  06a92	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN593@compressRo:
; Line 862
  06a96	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06a9a	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  06a9e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06aa2	48 23 c8	 and	 rcx, rax
  06aa5	48 8b c1	 mov	 rax, rcx
  06aa8	48 85 c0	 test	 rax, rax
  06aab	74 16		 je	 SHORT $LN594@compressRo
  06aad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06ab1	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  06ab5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06ab9	48 0b c8	 or	 rcx, rax
  06abc	48 8b c1	 mov	 rax, rcx
  06abf	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN594@compressRo:
; Line 863
  06ac3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06ac7	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  06acb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06acf	48 23 c8	 and	 rcx, rax
  06ad2	48 8b c1	 mov	 rax, rcx
  06ad5	48 85 c0	 test	 rax, rax
  06ad8	74 16		 je	 SHORT $LN595@compressRo
  06ada	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06ade	48 c1 e0 1a	 shl	 rax, 26
  06ae2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06ae6	48 0b c8	 or	 rcx, rax
  06ae9	48 8b c1	 mov	 rax, rcx
  06aec	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN595@compressRo:
; Line 864
  06af0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06af4	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  06af8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06afc	48 23 c8	 and	 rcx, rax
  06aff	48 8b c1	 mov	 rax, rcx
  06b02	48 85 c0	 test	 rax, rax
  06b05	74 16		 je	 SHORT $LN596@compressRo
  06b07	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06b0b	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  06b0f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06b13	48 0b c8	 or	 rcx, rax
  06b16	48 8b c1	 mov	 rax, rcx
  06b19	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN596@compressRo:
; Line 865
  06b1d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06b21	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  06b25	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06b29	48 23 c8	 and	 rcx, rax
  06b2c	48 8b c1	 mov	 rax, rcx
  06b2f	48 85 c0	 test	 rax, rax
  06b32	74 16		 je	 SHORT $LN597@compressRo
  06b34	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06b38	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  06b3c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06b40	48 0b c8	 or	 rcx, rax
  06b43	48 8b c1	 mov	 rax, rcx
  06b46	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN597@compressRo:
; Line 866
  06b4a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06b4e	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  06b52	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06b56	48 23 c8	 and	 rcx, rax
  06b59	48 8b c1	 mov	 rax, rcx
  06b5c	48 85 c0	 test	 rax, rax
  06b5f	74 16		 je	 SHORT $LN598@compressRo
  06b61	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06b65	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  06b69	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06b6d	48 0b c8	 or	 rcx, rax
  06b70	48 8b c1	 mov	 rax, rcx
  06b73	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN598@compressRo:
; Line 867
  06b77	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06b7b	48 c1 e0 1e	 shl	 rax, 30
  06b7f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06b83	48 23 c8	 and	 rcx, rax
  06b86	48 8b c1	 mov	 rax, rcx
  06b89	48 85 c0	 test	 rax, rax
  06b8c	74 16		 je	 SHORT $LN599@compressRo
  06b8e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06b92	48 c1 e0 1f	 shl	 rax, 31
  06b96	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06b9a	48 0b c8	 or	 rcx, rax
  06b9d	48 8b c1	 mov	 rax, rcx
  06ba0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN599@compressRo:
; Line 868
  06ba4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06ba8	48 c1 e0 1d	 shl	 rax, 29
  06bac	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06bb0	48 23 c8	 and	 rcx, rax
  06bb3	48 8b c1	 mov	 rax, rcx
  06bb6	48 85 c0	 test	 rax, rax
  06bb9	74 16		 je	 SHORT $LN600@compressRo
  06bbb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06bbf	48 c1 e0 1b	 shl	 rax, 27
  06bc3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06bc7	48 0b c8	 or	 rcx, rax
  06bca	48 8b c1	 mov	 rax, rcx
  06bcd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN600@compressRo:
; Line 869
  06bd1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06bd5	48 c1 e0 1c	 shl	 rax, 28
  06bd9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06bdd	48 23 c8	 and	 rcx, rax
  06be0	48 8b c1	 mov	 rax, rcx
  06be3	48 85 c0	 test	 rax, rax
  06be6	74 16		 je	 SHORT $LN601@compressRo
  06be8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06bec	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  06bf0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06bf4	48 0b c8	 or	 rcx, rax
  06bf7	48 8b c1	 mov	 rax, rcx
  06bfa	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN601@compressRo:
; Line 870
  06bfe	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06c02	48 c1 e0 1b	 shl	 rax, 27
  06c06	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06c0a	48 23 c8	 and	 rcx, rax
  06c0d	48 8b c1	 mov	 rax, rcx
  06c10	48 85 c0	 test	 rax, rax
  06c13	74 15		 je	 SHORT $LN602@compressRo
  06c15	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06c19	48 d1 e0	 shl	 rax, 1
  06c1c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06c20	48 0b c8	 or	 rcx, rax
  06c23	48 8b c1	 mov	 rax, rcx
  06c26	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN602@compressRo:
; Line 871
  06c2a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06c2e	48 c1 e0 1a	 shl	 rax, 26
  06c32	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06c36	48 23 c8	 and	 rcx, rax
  06c39	48 8b c1	 mov	 rax, rcx
  06c3c	48 85 c0	 test	 rax, rax
  06c3f	74 16		 je	 SHORT $LN603@compressRo
  06c41	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06c45	48 c1 e0 11	 shl	 rax, 17
  06c49	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06c4d	48 0b c8	 or	 rcx, rax
  06c50	48 8b c1	 mov	 rax, rcx
  06c53	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN603@compressRo:
; Line 872
  06c57	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06c5b	48 c1 e0 19	 shl	 rax, 25
  06c5f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06c63	48 23 c8	 and	 rcx, rax
  06c66	48 8b c1	 mov	 rax, rcx
  06c69	48 85 c0	 test	 rax, rax
  06c6c	74 16		 je	 SHORT $LN604@compressRo
  06c6e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06c72	48 c1 e0 15	 shl	 rax, 21
  06c76	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06c7a	48 0b c8	 or	 rcx, rax
  06c7d	48 8b c1	 mov	 rax, rcx
  06c80	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN604@compressRo:
; Line 873
  06c84	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06c88	48 c1 e0 18	 shl	 rax, 24
  06c8c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06c90	48 23 c8	 and	 rcx, rax
  06c93	48 8b c1	 mov	 rax, rcx
  06c96	48 85 c0	 test	 rax, rax
  06c99	74 12		 je	 SHORT $LN605@compressRo
  06c9b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06c9f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06ca3	48 0b c8	 or	 rcx, rax
  06ca6	48 8b c1	 mov	 rax, rcx
  06ca9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN605@compressRo:
; Line 874
  06cad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06cb1	48 c1 e0 17	 shl	 rax, 23
  06cb5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06cb9	48 23 c8	 and	 rcx, rax
  06cbc	48 8b c1	 mov	 rax, rcx
  06cbf	48 85 c0	 test	 rax, rax
  06cc2	74 16		 je	 SHORT $LN606@compressRo
  06cc4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06cc8	48 c1 e0 0d	 shl	 rax, 13
  06ccc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06cd0	48 0b c8	 or	 rcx, rax
  06cd3	48 8b c1	 mov	 rax, rcx
  06cd6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN606@compressRo:
; Line 875
  06cda	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06cde	48 c1 e0 16	 shl	 rax, 22
  06ce2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06ce6	48 23 c8	 and	 rcx, rax
  06ce9	48 8b c1	 mov	 rax, rcx
  06cec	48 85 c0	 test	 rax, rax
  06cef	74 16		 je	 SHORT $LN607@compressRo
  06cf1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06cf5	48 c1 e0 07	 shl	 rax, 7
  06cf9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06cfd	48 0b c8	 or	 rcx, rax
  06d00	48 8b c1	 mov	 rax, rcx
  06d03	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN607@compressRo:
; Line 876
  06d07	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06d0b	48 c1 e0 14	 shl	 rax, 20
  06d0f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06d13	48 23 c8	 and	 rcx, rax
  06d16	48 8b c1	 mov	 rax, rcx
  06d19	48 85 c0	 test	 rax, rax
  06d1c	74 16		 je	 SHORT $LN608@compressRo
  06d1e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06d22	48 c1 e0 02	 shl	 rax, 2
  06d26	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06d2a	48 0b c8	 or	 rcx, rax
  06d2d	48 8b c1	 mov	 rax, rcx
  06d30	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN608@compressRo:
; Line 877
  06d34	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06d38	48 c1 e0 13	 shl	 rax, 19
  06d3c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06d40	48 23 c8	 and	 rcx, rax
  06d43	48 8b c1	 mov	 rax, rcx
  06d46	48 85 c0	 test	 rax, rax
  06d49	74 16		 je	 SHORT $LN609@compressRo
  06d4b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06d4f	48 c1 e0 14	 shl	 rax, 20
  06d53	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06d57	48 0b c8	 or	 rcx, rax
  06d5a	48 8b c1	 mov	 rax, rcx
  06d5d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN609@compressRo:
; Line 878
  06d61	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06d65	48 c1 e0 11	 shl	 rax, 17
  06d69	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06d6d	48 23 c8	 and	 rcx, rax
  06d70	48 8b c1	 mov	 rax, rcx
  06d73	48 85 c0	 test	 rax, rax
  06d76	74 16		 je	 SHORT $LN610@compressRo
  06d78	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06d7c	48 c1 e0 09	 shl	 rax, 9
  06d80	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06d84	48 0b c8	 or	 rcx, rax
  06d87	48 8b c1	 mov	 rax, rcx
  06d8a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN610@compressRo:
; Line 879
  06d8e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06d92	48 c1 e0 10	 shl	 rax, 16
  06d96	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06d9a	48 23 c8	 and	 rcx, rax
  06d9d	48 8b c1	 mov	 rax, rcx
  06da0	48 85 c0	 test	 rax, rax
  06da3	74 16		 je	 SHORT $LN611@compressRo
  06da5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06da9	48 c1 e0 10	 shl	 rax, 16
  06dad	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06db1	48 0b c8	 or	 rcx, rax
  06db4	48 8b c1	 mov	 rax, rcx
  06db7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN611@compressRo:
; Line 880
  06dbb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06dbf	48 c1 e0 0f	 shl	 rax, 15
  06dc3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06dc7	48 23 c8	 and	 rcx, rax
  06dca	48 8b c1	 mov	 rax, rcx
  06dcd	48 85 c0	 test	 rax, rax
  06dd0	74 16		 je	 SHORT $LN612@compressRo
  06dd2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06dd6	48 c1 e0 17	 shl	 rax, 23
  06dda	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06dde	48 0b c8	 or	 rcx, rax
  06de1	48 8b c1	 mov	 rax, rcx
  06de4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN612@compressRo:
; Line 881
  06de8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06dec	48 c1 e0 0e	 shl	 rax, 14
  06df0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06df4	48 23 c8	 and	 rcx, rax
  06df7	48 8b c1	 mov	 rax, rcx
  06dfa	48 85 c0	 test	 rax, rax
  06dfd	74 16		 je	 SHORT $LN613@compressRo
  06dff	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06e03	48 c1 e0 04	 shl	 rax, 4
  06e07	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06e0b	48 0b c8	 or	 rcx, rax
  06e0e	48 8b c1	 mov	 rax, rcx
  06e11	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN613@compressRo:
; Line 882
  06e15	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06e19	48 c1 e0 0c	 shl	 rax, 12
  06e1d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06e21	48 23 c8	 and	 rcx, rax
  06e24	48 8b c1	 mov	 rax, rcx
  06e27	48 85 c0	 test	 rax, rax
  06e2a	74 16		 je	 SHORT $LN614@compressRo
  06e2c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06e30	48 c1 e0 0b	 shl	 rax, 11
  06e34	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06e38	48 0b c8	 or	 rcx, rax
  06e3b	48 8b c1	 mov	 rax, rcx
  06e3e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN614@compressRo:
; Line 883
  06e42	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06e46	48 c1 e0 0b	 shl	 rax, 11
  06e4a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06e4e	48 23 c8	 and	 rcx, rax
  06e51	48 8b c1	 mov	 rax, rcx
  06e54	48 85 c0	 test	 rax, rax
  06e57	74 16		 je	 SHORT $LN615@compressRo
  06e59	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06e5d	48 c1 e0 0e	 shl	 rax, 14
  06e61	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06e65	48 0b c8	 or	 rcx, rax
  06e68	48 8b c1	 mov	 rax, rcx
  06e6b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN615@compressRo:
; Line 884
  06e6f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06e73	48 c1 e0 0a	 shl	 rax, 10
  06e77	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06e7b	48 23 c8	 and	 rcx, rax
  06e7e	48 8b c1	 mov	 rax, rcx
  06e81	48 85 c0	 test	 rax, rax
  06e84	74 16		 je	 SHORT $LN616@compressRo
  06e86	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06e8a	48 c1 e0 05	 shl	 rax, 5
  06e8e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06e92	48 0b c8	 or	 rcx, rax
  06e95	48 8b c1	 mov	 rax, rcx
  06e98	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN616@compressRo:
; Line 885
  06e9c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06ea0	48 c1 e0 09	 shl	 rax, 9
  06ea4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06ea8	48 23 c8	 and	 rcx, rax
  06eab	48 8b c1	 mov	 rax, rcx
  06eae	48 85 c0	 test	 rax, rax
  06eb1	74 16		 je	 SHORT $LN617@compressRo
  06eb3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06eb7	48 c1 e0 13	 shl	 rax, 19
  06ebb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06ebf	48 0b c8	 or	 rcx, rax
  06ec2	48 8b c1	 mov	 rax, rcx
  06ec5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN617@compressRo:
; Line 886
  06ec9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06ecd	48 c1 e0 08	 shl	 rax, 8
  06ed1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06ed5	48 23 c8	 and	 rcx, rax
  06ed8	48 8b c1	 mov	 rax, rcx
  06edb	48 85 c0	 test	 rax, rax
  06ede	74 16		 je	 SHORT $LN618@compressRo
  06ee0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06ee4	48 c1 e0 0c	 shl	 rax, 12
  06ee8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06eec	48 0b c8	 or	 rcx, rax
  06eef	48 8b c1	 mov	 rax, rcx
  06ef2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN618@compressRo:
; Line 887
  06ef6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06efa	48 c1 e0 07	 shl	 rax, 7
  06efe	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06f02	48 23 c8	 and	 rcx, rax
  06f05	48 8b c1	 mov	 rax, rcx
  06f08	48 85 c0	 test	 rax, rax
  06f0b	74 16		 je	 SHORT $LN619@compressRo
  06f0d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06f11	48 c1 e0 0a	 shl	 rax, 10
  06f15	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06f19	48 0b c8	 or	 rcx, rax
  06f1c	48 8b c1	 mov	 rax, rcx
  06f1f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN619@compressRo:
; Line 888
  06f23	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06f27	48 c1 e0 06	 shl	 rax, 6
  06f2b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06f2f	48 23 c8	 and	 rcx, rax
  06f32	48 8b c1	 mov	 rax, rcx
  06f35	48 85 c0	 test	 rax, rax
  06f38	74 16		 je	 SHORT $LN620@compressRo
  06f3a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06f3e	48 c1 e0 03	 shl	 rax, 3
  06f42	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06f46	48 0b c8	 or	 rcx, rax
  06f49	48 8b c1	 mov	 rax, rcx
  06f4c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN620@compressRo:
; Line 889
  06f50	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06f54	48 c1 e0 05	 shl	 rax, 5
  06f58	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06f5c	48 23 c8	 and	 rcx, rax
  06f5f	48 8b c1	 mov	 rax, rcx
  06f62	48 85 c0	 test	 rax, rax
  06f65	74 16		 je	 SHORT $LN621@compressRo
  06f67	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06f6b	48 c1 e0 0f	 shl	 rax, 15
  06f6f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06f73	48 0b c8	 or	 rcx, rax
  06f76	48 8b c1	 mov	 rax, rcx
  06f79	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN621@compressRo:
; Line 890
  06f7d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06f81	48 c1 e0 04	 shl	 rax, 4
  06f85	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06f89	48 23 c8	 and	 rcx, rax
  06f8c	48 8b c1	 mov	 rax, rcx
  06f8f	48 85 c0	 test	 rax, rax
  06f92	74 16		 je	 SHORT $LN622@compressRo
  06f94	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06f98	48 c1 e0 16	 shl	 rax, 22
  06f9c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06fa0	48 0b c8	 or	 rcx, rax
  06fa3	48 8b c1	 mov	 rax, rcx
  06fa6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN622@compressRo:
; Line 891
  06faa	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06fae	48 c1 e0 03	 shl	 rax, 3
  06fb2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06fb6	48 23 c8	 and	 rcx, rax
  06fb9	48 8b c1	 mov	 rax, rcx
  06fbc	48 85 c0	 test	 rax, rax
  06fbf	74 16		 je	 SHORT $LN623@compressRo
  06fc1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06fc5	48 c1 e0 06	 shl	 rax, 6
  06fc9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06fcd	48 0b c8	 or	 rcx, rax
  06fd0	48 8b c1	 mov	 rax, rcx
  06fd3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN623@compressRo:
; Line 892
  06fd7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06fdb	48 d1 e0	 shl	 rax, 1
  06fde	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  06fe2	48 23 c8	 and	 rcx, rax
  06fe5	48 8b c1	 mov	 rax, rcx
  06fe8	48 85 c0	 test	 rax, rax
  06feb	74 16		 je	 SHORT $LN624@compressRo
  06fed	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  06ff1	48 c1 e0 12	 shl	 rax, 18
  06ff5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  06ff9	48 0b c8	 or	 rcx, rax
  06ffc	48 8b c1	 mov	 rax, rcx
  06fff	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN624@compressRo:
; Line 893
  07003	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07007	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0700b	48 23 c8	 and	 rcx, rax
  0700e	48 8b c1	 mov	 rax, rcx
  07011	48 85 c0	 test	 rax, rax
  07014	74 16		 je	 SHORT $LN625@compressRo
  07016	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0701a	48 c1 e0 08	 shl	 rax, 8
  0701e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07022	48 0b c8	 or	 rcx, rax
  07025	48 8b c1	 mov	 rax, rcx
  07028	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN625@compressRo:
; Line 894
  0702c	b8 08 00 00 00	 mov	 eax, 8
  07031	48 6b c0 0d	 imul	 rax, rax, 13
  07035	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  0703c	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  07040	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 896
  07044	b8 08 00 00 00	 mov	 eax, 8
  07049	48 6b c0 0e	 imul	 rax, rax, 14
  0704d	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  07054	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  07058	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 897
  0705c	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 900
  07064	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07068	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  0706c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07070	48 23 c8	 and	 rcx, rax
  07073	48 8b c1	 mov	 rax, rcx
  07076	48 85 c0	 test	 rax, rax
  07079	74 16		 je	 SHORT $LN626@compressRo
  0707b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0707f	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  07083	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07087	48 0b c8	 or	 rcx, rax
  0708a	48 8b c1	 mov	 rax, rcx
  0708d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN626@compressRo:
; Line 901
  07091	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07095	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  07099	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0709d	48 23 c8	 and	 rcx, rax
  070a0	48 8b c1	 mov	 rax, rcx
  070a3	48 85 c0	 test	 rax, rax
  070a6	74 16		 je	 SHORT $LN627@compressRo
  070a8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  070ac	48 c1 e0 18	 shl	 rax, 24
  070b0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  070b4	48 0b c8	 or	 rcx, rax
  070b7	48 8b c1	 mov	 rax, rcx
  070ba	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN627@compressRo:
; Line 902
  070be	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  070c2	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  070c6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  070ca	48 23 c8	 and	 rcx, rax
  070cd	48 8b c1	 mov	 rax, rcx
  070d0	48 85 c0	 test	 rax, rax
  070d3	74 16		 je	 SHORT $LN628@compressRo
  070d5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  070d9	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  070dd	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  070e1	48 0b c8	 or	 rcx, rax
  070e4	48 8b c1	 mov	 rax, rcx
  070e7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN628@compressRo:
; Line 903
  070eb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  070ef	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  070f3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  070f7	48 23 c8	 and	 rcx, rax
  070fa	48 8b c1	 mov	 rax, rcx
  070fd	48 85 c0	 test	 rax, rax
  07100	74 16		 je	 SHORT $LN629@compressRo
  07102	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07106	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0710a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0710e	48 0b c8	 or	 rcx, rax
  07111	48 8b c1	 mov	 rax, rcx
  07114	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN629@compressRo:
; Line 904
  07118	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0711c	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  07120	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07124	48 23 c8	 and	 rcx, rax
  07127	48 8b c1	 mov	 rax, rcx
  0712a	48 85 c0	 test	 rax, rax
  0712d	74 16		 je	 SHORT $LN630@compressRo
  0712f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07133	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  07137	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0713b	48 0b c8	 or	 rcx, rax
  0713e	48 8b c1	 mov	 rax, rcx
  07141	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN630@compressRo:
; Line 905
  07145	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07149	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  0714d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07151	48 23 c8	 and	 rcx, rax
  07154	48 8b c1	 mov	 rax, rcx
  07157	48 85 c0	 test	 rax, rax
  0715a	74 16		 je	 SHORT $LN631@compressRo
  0715c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07160	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  07164	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07168	48 0b c8	 or	 rcx, rax
  0716b	48 8b c1	 mov	 rax, rcx
  0716e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN631@compressRo:
; Line 906
  07172	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07176	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  0717a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0717e	48 23 c8	 and	 rcx, rax
  07181	48 8b c1	 mov	 rax, rcx
  07184	48 85 c0	 test	 rax, rax
  07187	74 16		 je	 SHORT $LN632@compressRo
  07189	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0718d	48 c1 e0 1c	 shl	 rax, 28
  07191	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07195	48 0b c8	 or	 rcx, rax
  07198	48 8b c1	 mov	 rax, rcx
  0719b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN632@compressRo:
; Line 907
  0719f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  071a3	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  071a7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  071ab	48 23 c8	 and	 rcx, rax
  071ae	48 8b c1	 mov	 rax, rcx
  071b1	48 85 c0	 test	 rax, rax
  071b4	74 16		 je	 SHORT $LN633@compressRo
  071b6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  071ba	48 c1 e0 1e	 shl	 rax, 30
  071be	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  071c2	48 0b c8	 or	 rcx, rax
  071c5	48 8b c1	 mov	 rax, rcx
  071c8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN633@compressRo:
; Line 908
  071cc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  071d0	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  071d4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  071d8	48 23 c8	 and	 rcx, rax
  071db	48 8b c1	 mov	 rax, rcx
  071de	48 85 c0	 test	 rax, rax
  071e1	74 16		 je	 SHORT $LN634@compressRo
  071e3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  071e7	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  071eb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  071ef	48 0b c8	 or	 rcx, rax
  071f2	48 8b c1	 mov	 rax, rcx
  071f5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN634@compressRo:
; Line 909
  071f9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  071fd	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  07201	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07205	48 23 c8	 and	 rcx, rax
  07208	48 8b c1	 mov	 rax, rcx
  0720b	48 85 c0	 test	 rax, rax
  0720e	74 16		 je	 SHORT $LN635@compressRo
  07210	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07214	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  07218	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0721c	48 0b c8	 or	 rcx, rax
  0721f	48 8b c1	 mov	 rax, rcx
  07222	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN635@compressRo:
; Line 910
  07226	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0722a	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  0722e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07232	48 23 c8	 and	 rcx, rax
  07235	48 8b c1	 mov	 rax, rcx
  07238	48 85 c0	 test	 rax, rax
  0723b	74 16		 je	 SHORT $LN636@compressRo
  0723d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07241	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  07245	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07249	48 0b c8	 or	 rcx, rax
  0724c	48 8b c1	 mov	 rax, rcx
  0724f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN636@compressRo:
; Line 911
  07253	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07257	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  0725b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0725f	48 23 c8	 and	 rcx, rax
  07262	48 8b c1	 mov	 rax, rcx
  07265	48 85 c0	 test	 rax, rax
  07268	74 16		 je	 SHORT $LN637@compressRo
  0726a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0726e	48 c1 e0 19	 shl	 rax, 25
  07272	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07276	48 0b c8	 or	 rcx, rax
  07279	48 8b c1	 mov	 rax, rcx
  0727c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN637@compressRo:
; Line 912
  07280	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07284	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  07288	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0728c	48 23 c8	 and	 rcx, rax
  0728f	48 8b c1	 mov	 rax, rcx
  07292	48 85 c0	 test	 rax, rax
  07295	74 16		 je	 SHORT $LN638@compressRo
  07297	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0729b	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  0729f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  072a3	48 0b c8	 or	 rcx, rax
  072a6	48 8b c1	 mov	 rax, rcx
  072a9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN638@compressRo:
; Line 913
  072ad	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  072b1	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  072b5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  072b9	48 23 c8	 and	 rcx, rax
  072bc	48 8b c1	 mov	 rax, rcx
  072bf	48 85 c0	 test	 rax, rax
  072c2	74 16		 je	 SHORT $LN639@compressRo
  072c4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  072c8	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  072cc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  072d0	48 0b c8	 or	 rcx, rax
  072d3	48 8b c1	 mov	 rax, rcx
  072d6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN639@compressRo:
; Line 914
  072da	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  072de	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  072e2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  072e6	48 23 c8	 and	 rcx, rax
  072e9	48 8b c1	 mov	 rax, rcx
  072ec	48 85 c0	 test	 rax, rax
  072ef	74 16		 je	 SHORT $LN640@compressRo
  072f1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  072f5	48 c1 e0 1d	 shl	 rax, 29
  072f9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  072fd	48 0b c8	 or	 rcx, rax
  07300	48 8b c1	 mov	 rax, rcx
  07303	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN640@compressRo:
; Line 915
  07307	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0730b	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  0730f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07313	48 23 c8	 and	 rcx, rax
  07316	48 8b c1	 mov	 rax, rcx
  07319	48 85 c0	 test	 rax, rax
  0731c	74 16		 je	 SHORT $LN641@compressRo
  0731e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07322	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  07326	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0732a	48 0b c8	 or	 rcx, rax
  0732d	48 8b c1	 mov	 rax, rcx
  07330	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN641@compressRo:
; Line 916
  07334	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07338	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  0733c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07340	48 23 c8	 and	 rcx, rax
  07343	48 8b c1	 mov	 rax, rcx
  07346	48 85 c0	 test	 rax, rax
  07349	74 16		 je	 SHORT $LN642@compressRo
  0734b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0734f	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  07353	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07357	48 0b c8	 or	 rcx, rax
  0735a	48 8b c1	 mov	 rax, rcx
  0735d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN642@compressRo:
; Line 917
  07361	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07365	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  07369	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0736d	48 23 c8	 and	 rcx, rax
  07370	48 8b c1	 mov	 rax, rcx
  07373	48 85 c0	 test	 rax, rax
  07376	74 16		 je	 SHORT $LN643@compressRo
  07378	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0737c	48 c1 e0 1a	 shl	 rax, 26
  07380	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07384	48 0b c8	 or	 rcx, rax
  07387	48 8b c1	 mov	 rax, rcx
  0738a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN643@compressRo:
; Line 918
  0738e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07392	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  07396	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0739a	48 23 c8	 and	 rcx, rax
  0739d	48 8b c1	 mov	 rax, rcx
  073a0	48 85 c0	 test	 rax, rax
  073a3	74 16		 je	 SHORT $LN644@compressRo
  073a5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  073a9	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  073ad	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  073b1	48 0b c8	 or	 rcx, rax
  073b4	48 8b c1	 mov	 rax, rcx
  073b7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN644@compressRo:
; Line 919
  073bb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  073bf	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  073c3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  073c7	48 23 c8	 and	 rcx, rax
  073ca	48 8b c1	 mov	 rax, rcx
  073cd	48 85 c0	 test	 rax, rax
  073d0	74 16		 je	 SHORT $LN645@compressRo
  073d2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  073d6	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  073da	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  073de	48 0b c8	 or	 rcx, rax
  073e1	48 8b c1	 mov	 rax, rcx
  073e4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN645@compressRo:
; Line 920
  073e8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  073ec	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  073f0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  073f4	48 23 c8	 and	 rcx, rax
  073f7	48 8b c1	 mov	 rax, rcx
  073fa	48 85 c0	 test	 rax, rax
  073fd	74 16		 je	 SHORT $LN646@compressRo
  073ff	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07403	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  07407	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0740b	48 0b c8	 or	 rcx, rax
  0740e	48 8b c1	 mov	 rax, rcx
  07411	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN646@compressRo:
; Line 921
  07415	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07419	48 c1 e0 1e	 shl	 rax, 30
  0741d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07421	48 23 c8	 and	 rcx, rax
  07424	48 8b c1	 mov	 rax, rcx
  07427	48 85 c0	 test	 rax, rax
  0742a	74 16		 je	 SHORT $LN647@compressRo
  0742c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07430	48 c1 e0 1f	 shl	 rax, 31
  07434	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07438	48 0b c8	 or	 rcx, rax
  0743b	48 8b c1	 mov	 rax, rcx
  0743e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN647@compressRo:
; Line 922
  07442	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07446	48 c1 e0 1d	 shl	 rax, 29
  0744a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0744e	48 23 c8	 and	 rcx, rax
  07451	48 8b c1	 mov	 rax, rcx
  07454	48 85 c0	 test	 rax, rax
  07457	74 16		 je	 SHORT $LN648@compressRo
  07459	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0745d	48 c1 e0 1b	 shl	 rax, 27
  07461	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07465	48 0b c8	 or	 rcx, rax
  07468	48 8b c1	 mov	 rax, rcx
  0746b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN648@compressRo:
; Line 923
  0746f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07473	48 c1 e0 1c	 shl	 rax, 28
  07477	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0747b	48 23 c8	 and	 rcx, rax
  0747e	48 8b c1	 mov	 rax, rcx
  07481	48 85 c0	 test	 rax, rax
  07484	74 16		 je	 SHORT $LN649@compressRo
  07486	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0748a	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  0748e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07492	48 0b c8	 or	 rcx, rax
  07495	48 8b c1	 mov	 rax, rcx
  07498	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN649@compressRo:
; Line 924
  0749c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  074a0	48 c1 e0 1b	 shl	 rax, 27
  074a4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  074a8	48 23 c8	 and	 rcx, rax
  074ab	48 8b c1	 mov	 rax, rcx
  074ae	48 85 c0	 test	 rax, rax
  074b1	74 15		 je	 SHORT $LN650@compressRo
  074b3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  074b7	48 d1 e0	 shl	 rax, 1
  074ba	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  074be	48 0b c8	 or	 rcx, rax
  074c1	48 8b c1	 mov	 rax, rcx
  074c4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN650@compressRo:
; Line 925
  074c8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  074cc	48 c1 e0 1a	 shl	 rax, 26
  074d0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  074d4	48 23 c8	 and	 rcx, rax
  074d7	48 8b c1	 mov	 rax, rcx
  074da	48 85 c0	 test	 rax, rax
  074dd	74 16		 je	 SHORT $LN651@compressRo
  074df	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  074e3	48 c1 e0 11	 shl	 rax, 17
  074e7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  074eb	48 0b c8	 or	 rcx, rax
  074ee	48 8b c1	 mov	 rax, rcx
  074f1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN651@compressRo:
; Line 926
  074f5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  074f9	48 c1 e0 19	 shl	 rax, 25
  074fd	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07501	48 23 c8	 and	 rcx, rax
  07504	48 8b c1	 mov	 rax, rcx
  07507	48 85 c0	 test	 rax, rax
  0750a	74 16		 je	 SHORT $LN652@compressRo
  0750c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07510	48 c1 e0 15	 shl	 rax, 21
  07514	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07518	48 0b c8	 or	 rcx, rax
  0751b	48 8b c1	 mov	 rax, rcx
  0751e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN652@compressRo:
; Line 927
  07522	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07526	48 c1 e0 18	 shl	 rax, 24
  0752a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0752e	48 23 c8	 and	 rcx, rax
  07531	48 8b c1	 mov	 rax, rcx
  07534	48 85 c0	 test	 rax, rax
  07537	74 12		 je	 SHORT $LN653@compressRo
  07539	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0753d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07541	48 0b c8	 or	 rcx, rax
  07544	48 8b c1	 mov	 rax, rcx
  07547	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN653@compressRo:
; Line 928
  0754b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0754f	48 c1 e0 17	 shl	 rax, 23
  07553	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07557	48 23 c8	 and	 rcx, rax
  0755a	48 8b c1	 mov	 rax, rcx
  0755d	48 85 c0	 test	 rax, rax
  07560	74 16		 je	 SHORT $LN654@compressRo
  07562	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07566	48 c1 e0 0d	 shl	 rax, 13
  0756a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0756e	48 0b c8	 or	 rcx, rax
  07571	48 8b c1	 mov	 rax, rcx
  07574	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN654@compressRo:
; Line 929
  07578	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0757c	48 c1 e0 16	 shl	 rax, 22
  07580	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07584	48 23 c8	 and	 rcx, rax
  07587	48 8b c1	 mov	 rax, rcx
  0758a	48 85 c0	 test	 rax, rax
  0758d	74 16		 je	 SHORT $LN655@compressRo
  0758f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07593	48 c1 e0 07	 shl	 rax, 7
  07597	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0759b	48 0b c8	 or	 rcx, rax
  0759e	48 8b c1	 mov	 rax, rcx
  075a1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN655@compressRo:
; Line 930
  075a5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  075a9	48 c1 e0 14	 shl	 rax, 20
  075ad	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  075b1	48 23 c8	 and	 rcx, rax
  075b4	48 8b c1	 mov	 rax, rcx
  075b7	48 85 c0	 test	 rax, rax
  075ba	74 16		 je	 SHORT $LN656@compressRo
  075bc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  075c0	48 c1 e0 02	 shl	 rax, 2
  075c4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  075c8	48 0b c8	 or	 rcx, rax
  075cb	48 8b c1	 mov	 rax, rcx
  075ce	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN656@compressRo:
; Line 931
  075d2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  075d6	48 c1 e0 13	 shl	 rax, 19
  075da	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  075de	48 23 c8	 and	 rcx, rax
  075e1	48 8b c1	 mov	 rax, rcx
  075e4	48 85 c0	 test	 rax, rax
  075e7	74 16		 je	 SHORT $LN657@compressRo
  075e9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  075ed	48 c1 e0 14	 shl	 rax, 20
  075f1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  075f5	48 0b c8	 or	 rcx, rax
  075f8	48 8b c1	 mov	 rax, rcx
  075fb	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN657@compressRo:
; Line 932
  075ff	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07603	48 c1 e0 11	 shl	 rax, 17
  07607	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0760b	48 23 c8	 and	 rcx, rax
  0760e	48 8b c1	 mov	 rax, rcx
  07611	48 85 c0	 test	 rax, rax
  07614	74 16		 je	 SHORT $LN658@compressRo
  07616	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0761a	48 c1 e0 09	 shl	 rax, 9
  0761e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07622	48 0b c8	 or	 rcx, rax
  07625	48 8b c1	 mov	 rax, rcx
  07628	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN658@compressRo:
; Line 933
  0762c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07630	48 c1 e0 10	 shl	 rax, 16
  07634	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07638	48 23 c8	 and	 rcx, rax
  0763b	48 8b c1	 mov	 rax, rcx
  0763e	48 85 c0	 test	 rax, rax
  07641	74 16		 je	 SHORT $LN659@compressRo
  07643	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07647	48 c1 e0 10	 shl	 rax, 16
  0764b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0764f	48 0b c8	 or	 rcx, rax
  07652	48 8b c1	 mov	 rax, rcx
  07655	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN659@compressRo:
; Line 934
  07659	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0765d	48 c1 e0 0f	 shl	 rax, 15
  07661	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07665	48 23 c8	 and	 rcx, rax
  07668	48 8b c1	 mov	 rax, rcx
  0766b	48 85 c0	 test	 rax, rax
  0766e	74 16		 je	 SHORT $LN660@compressRo
  07670	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07674	48 c1 e0 17	 shl	 rax, 23
  07678	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0767c	48 0b c8	 or	 rcx, rax
  0767f	48 8b c1	 mov	 rax, rcx
  07682	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN660@compressRo:
; Line 935
  07686	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0768a	48 c1 e0 0e	 shl	 rax, 14
  0768e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07692	48 23 c8	 and	 rcx, rax
  07695	48 8b c1	 mov	 rax, rcx
  07698	48 85 c0	 test	 rax, rax
  0769b	74 16		 je	 SHORT $LN661@compressRo
  0769d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  076a1	48 c1 e0 04	 shl	 rax, 4
  076a5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  076a9	48 0b c8	 or	 rcx, rax
  076ac	48 8b c1	 mov	 rax, rcx
  076af	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN661@compressRo:
; Line 936
  076b3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  076b7	48 c1 e0 0c	 shl	 rax, 12
  076bb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  076bf	48 23 c8	 and	 rcx, rax
  076c2	48 8b c1	 mov	 rax, rcx
  076c5	48 85 c0	 test	 rax, rax
  076c8	74 16		 je	 SHORT $LN662@compressRo
  076ca	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  076ce	48 c1 e0 0b	 shl	 rax, 11
  076d2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  076d6	48 0b c8	 or	 rcx, rax
  076d9	48 8b c1	 mov	 rax, rcx
  076dc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN662@compressRo:
; Line 937
  076e0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  076e4	48 c1 e0 0b	 shl	 rax, 11
  076e8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  076ec	48 23 c8	 and	 rcx, rax
  076ef	48 8b c1	 mov	 rax, rcx
  076f2	48 85 c0	 test	 rax, rax
  076f5	74 16		 je	 SHORT $LN663@compressRo
  076f7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  076fb	48 c1 e0 0e	 shl	 rax, 14
  076ff	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07703	48 0b c8	 or	 rcx, rax
  07706	48 8b c1	 mov	 rax, rcx
  07709	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN663@compressRo:
; Line 938
  0770d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07711	48 c1 e0 0a	 shl	 rax, 10
  07715	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07719	48 23 c8	 and	 rcx, rax
  0771c	48 8b c1	 mov	 rax, rcx
  0771f	48 85 c0	 test	 rax, rax
  07722	74 16		 je	 SHORT $LN664@compressRo
  07724	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07728	48 c1 e0 05	 shl	 rax, 5
  0772c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07730	48 0b c8	 or	 rcx, rax
  07733	48 8b c1	 mov	 rax, rcx
  07736	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN664@compressRo:
; Line 939
  0773a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0773e	48 c1 e0 09	 shl	 rax, 9
  07742	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07746	48 23 c8	 and	 rcx, rax
  07749	48 8b c1	 mov	 rax, rcx
  0774c	48 85 c0	 test	 rax, rax
  0774f	74 16		 je	 SHORT $LN665@compressRo
  07751	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07755	48 c1 e0 13	 shl	 rax, 19
  07759	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0775d	48 0b c8	 or	 rcx, rax
  07760	48 8b c1	 mov	 rax, rcx
  07763	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN665@compressRo:
; Line 940
  07767	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0776b	48 c1 e0 08	 shl	 rax, 8
  0776f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07773	48 23 c8	 and	 rcx, rax
  07776	48 8b c1	 mov	 rax, rcx
  07779	48 85 c0	 test	 rax, rax
  0777c	74 16		 je	 SHORT $LN666@compressRo
  0777e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07782	48 c1 e0 0c	 shl	 rax, 12
  07786	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0778a	48 0b c8	 or	 rcx, rax
  0778d	48 8b c1	 mov	 rax, rcx
  07790	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN666@compressRo:
; Line 941
  07794	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07798	48 c1 e0 07	 shl	 rax, 7
  0779c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  077a0	48 23 c8	 and	 rcx, rax
  077a3	48 8b c1	 mov	 rax, rcx
  077a6	48 85 c0	 test	 rax, rax
  077a9	74 16		 je	 SHORT $LN667@compressRo
  077ab	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  077af	48 c1 e0 0a	 shl	 rax, 10
  077b3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  077b7	48 0b c8	 or	 rcx, rax
  077ba	48 8b c1	 mov	 rax, rcx
  077bd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN667@compressRo:
; Line 942
  077c1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  077c5	48 c1 e0 06	 shl	 rax, 6
  077c9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  077cd	48 23 c8	 and	 rcx, rax
  077d0	48 8b c1	 mov	 rax, rcx
  077d3	48 85 c0	 test	 rax, rax
  077d6	74 16		 je	 SHORT $LN668@compressRo
  077d8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  077dc	48 c1 e0 03	 shl	 rax, 3
  077e0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  077e4	48 0b c8	 or	 rcx, rax
  077e7	48 8b c1	 mov	 rax, rcx
  077ea	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN668@compressRo:
; Line 943
  077ee	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  077f2	48 c1 e0 05	 shl	 rax, 5
  077f6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  077fa	48 23 c8	 and	 rcx, rax
  077fd	48 8b c1	 mov	 rax, rcx
  07800	48 85 c0	 test	 rax, rax
  07803	74 16		 je	 SHORT $LN669@compressRo
  07805	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07809	48 c1 e0 0f	 shl	 rax, 15
  0780d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07811	48 0b c8	 or	 rcx, rax
  07814	48 8b c1	 mov	 rax, rcx
  07817	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN669@compressRo:
; Line 944
  0781b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0781f	48 c1 e0 04	 shl	 rax, 4
  07823	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07827	48 23 c8	 and	 rcx, rax
  0782a	48 8b c1	 mov	 rax, rcx
  0782d	48 85 c0	 test	 rax, rax
  07830	74 16		 je	 SHORT $LN670@compressRo
  07832	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07836	48 c1 e0 16	 shl	 rax, 22
  0783a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0783e	48 0b c8	 or	 rcx, rax
  07841	48 8b c1	 mov	 rax, rcx
  07844	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN670@compressRo:
; Line 945
  07848	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0784c	48 c1 e0 03	 shl	 rax, 3
  07850	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07854	48 23 c8	 and	 rcx, rax
  07857	48 8b c1	 mov	 rax, rcx
  0785a	48 85 c0	 test	 rax, rax
  0785d	74 16		 je	 SHORT $LN671@compressRo
  0785f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07863	48 c1 e0 06	 shl	 rax, 6
  07867	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0786b	48 0b c8	 or	 rcx, rax
  0786e	48 8b c1	 mov	 rax, rcx
  07871	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN671@compressRo:
; Line 946
  07875	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07879	48 d1 e0	 shl	 rax, 1
  0787c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07880	48 23 c8	 and	 rcx, rax
  07883	48 8b c1	 mov	 rax, rcx
  07886	48 85 c0	 test	 rax, rax
  07889	74 16		 je	 SHORT $LN672@compressRo
  0788b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0788f	48 c1 e0 12	 shl	 rax, 18
  07893	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07897	48 0b c8	 or	 rcx, rax
  0789a	48 8b c1	 mov	 rax, rcx
  0789d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN672@compressRo:
; Line 947
  078a1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  078a5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  078a9	48 23 c8	 and	 rcx, rax
  078ac	48 8b c1	 mov	 rax, rcx
  078af	48 85 c0	 test	 rax, rax
  078b2	74 16		 je	 SHORT $LN673@compressRo
  078b4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  078b8	48 c1 e0 08	 shl	 rax, 8
  078bc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  078c0	48 0b c8	 or	 rcx, rax
  078c3	48 8b c1	 mov	 rax, rcx
  078c6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN673@compressRo:
; Line 948
  078ca	b8 08 00 00 00	 mov	 eax, 8
  078cf	48 6b c0 0e	 imul	 rax, rax, 14
  078d3	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  078da	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  078de	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 950
  078e2	b8 08 00 00 00	 mov	 eax, 8
  078e7	48 6b c0 0f	 imul	 rax, rax, 15
  078eb	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  078f2	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  078f6	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 951
  078fa	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 954
  07902	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07906	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  0790a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0790e	48 23 c8	 and	 rcx, rax
  07911	48 8b c1	 mov	 rax, rcx
  07914	48 85 c0	 test	 rax, rax
  07917	74 16		 je	 SHORT $LN674@compressRo
  07919	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0791d	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  07921	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07925	48 0b c8	 or	 rcx, rax
  07928	48 8b c1	 mov	 rax, rcx
  0792b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN674@compressRo:
; Line 955
  0792f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07933	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  07937	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0793b	48 23 c8	 and	 rcx, rax
  0793e	48 8b c1	 mov	 rax, rcx
  07941	48 85 c0	 test	 rax, rax
  07944	74 16		 je	 SHORT $LN675@compressRo
  07946	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0794a	48 c1 e0 18	 shl	 rax, 24
  0794e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07952	48 0b c8	 or	 rcx, rax
  07955	48 8b c1	 mov	 rax, rcx
  07958	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN675@compressRo:
; Line 956
  0795c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07960	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  07964	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07968	48 23 c8	 and	 rcx, rax
  0796b	48 8b c1	 mov	 rax, rcx
  0796e	48 85 c0	 test	 rax, rax
  07971	74 16		 je	 SHORT $LN676@compressRo
  07973	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07977	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  0797b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0797f	48 0b c8	 or	 rcx, rax
  07982	48 8b c1	 mov	 rax, rcx
  07985	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN676@compressRo:
; Line 957
  07989	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0798d	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  07991	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07995	48 23 c8	 and	 rcx, rax
  07998	48 8b c1	 mov	 rax, rcx
  0799b	48 85 c0	 test	 rax, rax
  0799e	74 16		 je	 SHORT $LN677@compressRo
  079a0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  079a4	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  079a8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  079ac	48 0b c8	 or	 rcx, rax
  079af	48 8b c1	 mov	 rax, rcx
  079b2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN677@compressRo:
; Line 958
  079b6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  079ba	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  079be	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  079c2	48 23 c8	 and	 rcx, rax
  079c5	48 8b c1	 mov	 rax, rcx
  079c8	48 85 c0	 test	 rax, rax
  079cb	74 16		 je	 SHORT $LN678@compressRo
  079cd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  079d1	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  079d5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  079d9	48 0b c8	 or	 rcx, rax
  079dc	48 8b c1	 mov	 rax, rcx
  079df	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN678@compressRo:
; Line 959
  079e3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  079e7	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  079eb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  079ef	48 23 c8	 and	 rcx, rax
  079f2	48 8b c1	 mov	 rax, rcx
  079f5	48 85 c0	 test	 rax, rax
  079f8	74 16		 je	 SHORT $LN679@compressRo
  079fa	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  079fe	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  07a02	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07a06	48 0b c8	 or	 rcx, rax
  07a09	48 8b c1	 mov	 rax, rcx
  07a0c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN679@compressRo:
; Line 960
  07a10	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07a14	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  07a18	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07a1c	48 23 c8	 and	 rcx, rax
  07a1f	48 8b c1	 mov	 rax, rcx
  07a22	48 85 c0	 test	 rax, rax
  07a25	74 16		 je	 SHORT $LN680@compressRo
  07a27	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07a2b	48 c1 e0 1c	 shl	 rax, 28
  07a2f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07a33	48 0b c8	 or	 rcx, rax
  07a36	48 8b c1	 mov	 rax, rcx
  07a39	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN680@compressRo:
; Line 961
  07a3d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07a41	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  07a45	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07a49	48 23 c8	 and	 rcx, rax
  07a4c	48 8b c1	 mov	 rax, rcx
  07a4f	48 85 c0	 test	 rax, rax
  07a52	74 16		 je	 SHORT $LN681@compressRo
  07a54	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07a58	48 c1 e0 1e	 shl	 rax, 30
  07a5c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07a60	48 0b c8	 or	 rcx, rax
  07a63	48 8b c1	 mov	 rax, rcx
  07a66	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN681@compressRo:
; Line 962
  07a6a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07a6e	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  07a72	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07a76	48 23 c8	 and	 rcx, rax
  07a79	48 8b c1	 mov	 rax, rcx
  07a7c	48 85 c0	 test	 rax, rax
  07a7f	74 16		 je	 SHORT $LN682@compressRo
  07a81	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07a85	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  07a89	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07a8d	48 0b c8	 or	 rcx, rax
  07a90	48 8b c1	 mov	 rax, rcx
  07a93	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN682@compressRo:
; Line 963
  07a97	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07a9b	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  07a9f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07aa3	48 23 c8	 and	 rcx, rax
  07aa6	48 8b c1	 mov	 rax, rcx
  07aa9	48 85 c0	 test	 rax, rax
  07aac	74 16		 je	 SHORT $LN683@compressRo
  07aae	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ab2	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  07ab6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07aba	48 0b c8	 or	 rcx, rax
  07abd	48 8b c1	 mov	 rax, rcx
  07ac0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN683@compressRo:
; Line 964
  07ac4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ac8	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  07acc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07ad0	48 23 c8	 and	 rcx, rax
  07ad3	48 8b c1	 mov	 rax, rcx
  07ad6	48 85 c0	 test	 rax, rax
  07ad9	74 16		 je	 SHORT $LN684@compressRo
  07adb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07adf	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  07ae3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07ae7	48 0b c8	 or	 rcx, rax
  07aea	48 8b c1	 mov	 rax, rcx
  07aed	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN684@compressRo:
; Line 965
  07af1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07af5	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  07af9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07afd	48 23 c8	 and	 rcx, rax
  07b00	48 8b c1	 mov	 rax, rcx
  07b03	48 85 c0	 test	 rax, rax
  07b06	74 16		 je	 SHORT $LN685@compressRo
  07b08	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07b0c	48 c1 e0 19	 shl	 rax, 25
  07b10	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07b14	48 0b c8	 or	 rcx, rax
  07b17	48 8b c1	 mov	 rax, rcx
  07b1a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN685@compressRo:
; Line 966
  07b1e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07b22	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  07b26	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07b2a	48 23 c8	 and	 rcx, rax
  07b2d	48 8b c1	 mov	 rax, rcx
  07b30	48 85 c0	 test	 rax, rax
  07b33	74 16		 je	 SHORT $LN686@compressRo
  07b35	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07b39	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  07b3d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07b41	48 0b c8	 or	 rcx, rax
  07b44	48 8b c1	 mov	 rax, rcx
  07b47	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN686@compressRo:
; Line 967
  07b4b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07b4f	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  07b53	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07b57	48 23 c8	 and	 rcx, rax
  07b5a	48 8b c1	 mov	 rax, rcx
  07b5d	48 85 c0	 test	 rax, rax
  07b60	74 16		 je	 SHORT $LN687@compressRo
  07b62	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07b66	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  07b6a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07b6e	48 0b c8	 or	 rcx, rax
  07b71	48 8b c1	 mov	 rax, rcx
  07b74	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN687@compressRo:
; Line 968
  07b78	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07b7c	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  07b80	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07b84	48 23 c8	 and	 rcx, rax
  07b87	48 8b c1	 mov	 rax, rcx
  07b8a	48 85 c0	 test	 rax, rax
  07b8d	74 16		 je	 SHORT $LN688@compressRo
  07b8f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07b93	48 c1 e0 1d	 shl	 rax, 29
  07b97	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07b9b	48 0b c8	 or	 rcx, rax
  07b9e	48 8b c1	 mov	 rax, rcx
  07ba1	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN688@compressRo:
; Line 969
  07ba5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ba9	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  07bad	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07bb1	48 23 c8	 and	 rcx, rax
  07bb4	48 8b c1	 mov	 rax, rcx
  07bb7	48 85 c0	 test	 rax, rax
  07bba	74 16		 je	 SHORT $LN689@compressRo
  07bbc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07bc0	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  07bc4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07bc8	48 0b c8	 or	 rcx, rax
  07bcb	48 8b c1	 mov	 rax, rcx
  07bce	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN689@compressRo:
; Line 970
  07bd2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07bd6	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  07bda	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07bde	48 23 c8	 and	 rcx, rax
  07be1	48 8b c1	 mov	 rax, rcx
  07be4	48 85 c0	 test	 rax, rax
  07be7	74 16		 je	 SHORT $LN690@compressRo
  07be9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07bed	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  07bf1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07bf5	48 0b c8	 or	 rcx, rax
  07bf8	48 8b c1	 mov	 rax, rcx
  07bfb	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN690@compressRo:
; Line 971
  07bff	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07c03	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  07c07	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07c0b	48 23 c8	 and	 rcx, rax
  07c0e	48 8b c1	 mov	 rax, rcx
  07c11	48 85 c0	 test	 rax, rax
  07c14	74 16		 je	 SHORT $LN691@compressRo
  07c16	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07c1a	48 c1 e0 1a	 shl	 rax, 26
  07c1e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07c22	48 0b c8	 or	 rcx, rax
  07c25	48 8b c1	 mov	 rax, rcx
  07c28	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN691@compressRo:
; Line 972
  07c2c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07c30	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  07c34	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07c38	48 23 c8	 and	 rcx, rax
  07c3b	48 8b c1	 mov	 rax, rcx
  07c3e	48 85 c0	 test	 rax, rax
  07c41	74 16		 je	 SHORT $LN692@compressRo
  07c43	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07c47	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  07c4b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07c4f	48 0b c8	 or	 rcx, rax
  07c52	48 8b c1	 mov	 rax, rcx
  07c55	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN692@compressRo:
; Line 973
  07c59	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07c5d	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  07c61	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07c65	48 23 c8	 and	 rcx, rax
  07c68	48 8b c1	 mov	 rax, rcx
  07c6b	48 85 c0	 test	 rax, rax
  07c6e	74 16		 je	 SHORT $LN693@compressRo
  07c70	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07c74	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  07c78	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07c7c	48 0b c8	 or	 rcx, rax
  07c7f	48 8b c1	 mov	 rax, rcx
  07c82	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN693@compressRo:
; Line 974
  07c86	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07c8a	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  07c8e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07c92	48 23 c8	 and	 rcx, rax
  07c95	48 8b c1	 mov	 rax, rcx
  07c98	48 85 c0	 test	 rax, rax
  07c9b	74 16		 je	 SHORT $LN694@compressRo
  07c9d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ca1	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  07ca5	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07ca9	48 0b c8	 or	 rcx, rax
  07cac	48 8b c1	 mov	 rax, rcx
  07caf	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN694@compressRo:
; Line 975
  07cb3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07cb7	48 c1 e0 1e	 shl	 rax, 30
  07cbb	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07cbf	48 23 c8	 and	 rcx, rax
  07cc2	48 8b c1	 mov	 rax, rcx
  07cc5	48 85 c0	 test	 rax, rax
  07cc8	74 16		 je	 SHORT $LN695@compressRo
  07cca	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07cce	48 c1 e0 1f	 shl	 rax, 31
  07cd2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07cd6	48 0b c8	 or	 rcx, rax
  07cd9	48 8b c1	 mov	 rax, rcx
  07cdc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN695@compressRo:
; Line 976
  07ce0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ce4	48 c1 e0 1d	 shl	 rax, 29
  07ce8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07cec	48 23 c8	 and	 rcx, rax
  07cef	48 8b c1	 mov	 rax, rcx
  07cf2	48 85 c0	 test	 rax, rax
  07cf5	74 16		 je	 SHORT $LN696@compressRo
  07cf7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07cfb	48 c1 e0 1b	 shl	 rax, 27
  07cff	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07d03	48 0b c8	 or	 rcx, rax
  07d06	48 8b c1	 mov	 rax, rcx
  07d09	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN696@compressRo:
; Line 977
  07d0d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07d11	48 c1 e0 1c	 shl	 rax, 28
  07d15	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07d19	48 23 c8	 and	 rcx, rax
  07d1c	48 8b c1	 mov	 rax, rcx
  07d1f	48 85 c0	 test	 rax, rax
  07d22	74 16		 je	 SHORT $LN697@compressRo
  07d24	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07d28	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  07d2c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07d30	48 0b c8	 or	 rcx, rax
  07d33	48 8b c1	 mov	 rax, rcx
  07d36	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN697@compressRo:
; Line 978
  07d3a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07d3e	48 c1 e0 1b	 shl	 rax, 27
  07d42	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07d46	48 23 c8	 and	 rcx, rax
  07d49	48 8b c1	 mov	 rax, rcx
  07d4c	48 85 c0	 test	 rax, rax
  07d4f	74 15		 je	 SHORT $LN698@compressRo
  07d51	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07d55	48 d1 e0	 shl	 rax, 1
  07d58	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07d5c	48 0b c8	 or	 rcx, rax
  07d5f	48 8b c1	 mov	 rax, rcx
  07d62	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN698@compressRo:
; Line 979
  07d66	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07d6a	48 c1 e0 1a	 shl	 rax, 26
  07d6e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07d72	48 23 c8	 and	 rcx, rax
  07d75	48 8b c1	 mov	 rax, rcx
  07d78	48 85 c0	 test	 rax, rax
  07d7b	74 16		 je	 SHORT $LN699@compressRo
  07d7d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07d81	48 c1 e0 11	 shl	 rax, 17
  07d85	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07d89	48 0b c8	 or	 rcx, rax
  07d8c	48 8b c1	 mov	 rax, rcx
  07d8f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN699@compressRo:
; Line 980
  07d93	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07d97	48 c1 e0 19	 shl	 rax, 25
  07d9b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07d9f	48 23 c8	 and	 rcx, rax
  07da2	48 8b c1	 mov	 rax, rcx
  07da5	48 85 c0	 test	 rax, rax
  07da8	74 16		 je	 SHORT $LN700@compressRo
  07daa	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07dae	48 c1 e0 15	 shl	 rax, 21
  07db2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07db6	48 0b c8	 or	 rcx, rax
  07db9	48 8b c1	 mov	 rax, rcx
  07dbc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN700@compressRo:
; Line 981
  07dc0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07dc4	48 c1 e0 18	 shl	 rax, 24
  07dc8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07dcc	48 23 c8	 and	 rcx, rax
  07dcf	48 8b c1	 mov	 rax, rcx
  07dd2	48 85 c0	 test	 rax, rax
  07dd5	74 12		 je	 SHORT $LN701@compressRo
  07dd7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ddb	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07ddf	48 0b c8	 or	 rcx, rax
  07de2	48 8b c1	 mov	 rax, rcx
  07de5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN701@compressRo:
; Line 982
  07de9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ded	48 c1 e0 17	 shl	 rax, 23
  07df1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07df5	48 23 c8	 and	 rcx, rax
  07df8	48 8b c1	 mov	 rax, rcx
  07dfb	48 85 c0	 test	 rax, rax
  07dfe	74 16		 je	 SHORT $LN702@compressRo
  07e00	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07e04	48 c1 e0 0d	 shl	 rax, 13
  07e08	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07e0c	48 0b c8	 or	 rcx, rax
  07e0f	48 8b c1	 mov	 rax, rcx
  07e12	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN702@compressRo:
; Line 983
  07e16	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07e1a	48 c1 e0 16	 shl	 rax, 22
  07e1e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07e22	48 23 c8	 and	 rcx, rax
  07e25	48 8b c1	 mov	 rax, rcx
  07e28	48 85 c0	 test	 rax, rax
  07e2b	74 16		 je	 SHORT $LN703@compressRo
  07e2d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07e31	48 c1 e0 07	 shl	 rax, 7
  07e35	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07e39	48 0b c8	 or	 rcx, rax
  07e3c	48 8b c1	 mov	 rax, rcx
  07e3f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN703@compressRo:
; Line 984
  07e43	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07e47	48 c1 e0 14	 shl	 rax, 20
  07e4b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07e4f	48 23 c8	 and	 rcx, rax
  07e52	48 8b c1	 mov	 rax, rcx
  07e55	48 85 c0	 test	 rax, rax
  07e58	74 16		 je	 SHORT $LN704@compressRo
  07e5a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07e5e	48 c1 e0 02	 shl	 rax, 2
  07e62	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07e66	48 0b c8	 or	 rcx, rax
  07e69	48 8b c1	 mov	 rax, rcx
  07e6c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN704@compressRo:
; Line 985
  07e70	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07e74	48 c1 e0 13	 shl	 rax, 19
  07e78	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07e7c	48 23 c8	 and	 rcx, rax
  07e7f	48 8b c1	 mov	 rax, rcx
  07e82	48 85 c0	 test	 rax, rax
  07e85	74 16		 je	 SHORT $LN705@compressRo
  07e87	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07e8b	48 c1 e0 14	 shl	 rax, 20
  07e8f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07e93	48 0b c8	 or	 rcx, rax
  07e96	48 8b c1	 mov	 rax, rcx
  07e99	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN705@compressRo:
; Line 986
  07e9d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ea1	48 c1 e0 11	 shl	 rax, 17
  07ea5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07ea9	48 23 c8	 and	 rcx, rax
  07eac	48 8b c1	 mov	 rax, rcx
  07eaf	48 85 c0	 test	 rax, rax
  07eb2	74 16		 je	 SHORT $LN706@compressRo
  07eb4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07eb8	48 c1 e0 09	 shl	 rax, 9
  07ebc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07ec0	48 0b c8	 or	 rcx, rax
  07ec3	48 8b c1	 mov	 rax, rcx
  07ec6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN706@compressRo:
; Line 987
  07eca	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ece	48 c1 e0 10	 shl	 rax, 16
  07ed2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07ed6	48 23 c8	 and	 rcx, rax
  07ed9	48 8b c1	 mov	 rax, rcx
  07edc	48 85 c0	 test	 rax, rax
  07edf	74 16		 je	 SHORT $LN707@compressRo
  07ee1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ee5	48 c1 e0 10	 shl	 rax, 16
  07ee9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07eed	48 0b c8	 or	 rcx, rax
  07ef0	48 8b c1	 mov	 rax, rcx
  07ef3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN707@compressRo:
; Line 988
  07ef7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07efb	48 c1 e0 0f	 shl	 rax, 15
  07eff	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07f03	48 23 c8	 and	 rcx, rax
  07f06	48 8b c1	 mov	 rax, rcx
  07f09	48 85 c0	 test	 rax, rax
  07f0c	74 16		 je	 SHORT $LN708@compressRo
  07f0e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07f12	48 c1 e0 17	 shl	 rax, 23
  07f16	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07f1a	48 0b c8	 or	 rcx, rax
  07f1d	48 8b c1	 mov	 rax, rcx
  07f20	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN708@compressRo:
; Line 989
  07f24	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07f28	48 c1 e0 0e	 shl	 rax, 14
  07f2c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07f30	48 23 c8	 and	 rcx, rax
  07f33	48 8b c1	 mov	 rax, rcx
  07f36	48 85 c0	 test	 rax, rax
  07f39	74 16		 je	 SHORT $LN709@compressRo
  07f3b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07f3f	48 c1 e0 04	 shl	 rax, 4
  07f43	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07f47	48 0b c8	 or	 rcx, rax
  07f4a	48 8b c1	 mov	 rax, rcx
  07f4d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN709@compressRo:
; Line 990
  07f51	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07f55	48 c1 e0 0c	 shl	 rax, 12
  07f59	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07f5d	48 23 c8	 and	 rcx, rax
  07f60	48 8b c1	 mov	 rax, rcx
  07f63	48 85 c0	 test	 rax, rax
  07f66	74 16		 je	 SHORT $LN710@compressRo
  07f68	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07f6c	48 c1 e0 0b	 shl	 rax, 11
  07f70	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07f74	48 0b c8	 or	 rcx, rax
  07f77	48 8b c1	 mov	 rax, rcx
  07f7a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN710@compressRo:
; Line 991
  07f7e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07f82	48 c1 e0 0b	 shl	 rax, 11
  07f86	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07f8a	48 23 c8	 and	 rcx, rax
  07f8d	48 8b c1	 mov	 rax, rcx
  07f90	48 85 c0	 test	 rax, rax
  07f93	74 16		 je	 SHORT $LN711@compressRo
  07f95	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07f99	48 c1 e0 0e	 shl	 rax, 14
  07f9d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07fa1	48 0b c8	 or	 rcx, rax
  07fa4	48 8b c1	 mov	 rax, rcx
  07fa7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN711@compressRo:
; Line 992
  07fab	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07faf	48 c1 e0 0a	 shl	 rax, 10
  07fb3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07fb7	48 23 c8	 and	 rcx, rax
  07fba	48 8b c1	 mov	 rax, rcx
  07fbd	48 85 c0	 test	 rax, rax
  07fc0	74 16		 je	 SHORT $LN712@compressRo
  07fc2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07fc6	48 c1 e0 05	 shl	 rax, 5
  07fca	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07fce	48 0b c8	 or	 rcx, rax
  07fd1	48 8b c1	 mov	 rax, rcx
  07fd4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN712@compressRo:
; Line 993
  07fd8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07fdc	48 c1 e0 09	 shl	 rax, 9
  07fe0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  07fe4	48 23 c8	 and	 rcx, rax
  07fe7	48 8b c1	 mov	 rax, rcx
  07fea	48 85 c0	 test	 rax, rax
  07fed	74 16		 je	 SHORT $LN713@compressRo
  07fef	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  07ff3	48 c1 e0 13	 shl	 rax, 19
  07ff7	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  07ffb	48 0b c8	 or	 rcx, rax
  07ffe	48 8b c1	 mov	 rax, rcx
  08001	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN713@compressRo:
; Line 994
  08005	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08009	48 c1 e0 08	 shl	 rax, 8
  0800d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08011	48 23 c8	 and	 rcx, rax
  08014	48 8b c1	 mov	 rax, rcx
  08017	48 85 c0	 test	 rax, rax
  0801a	74 16		 je	 SHORT $LN714@compressRo
  0801c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08020	48 c1 e0 0c	 shl	 rax, 12
  08024	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08028	48 0b c8	 or	 rcx, rax
  0802b	48 8b c1	 mov	 rax, rcx
  0802e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN714@compressRo:
; Line 995
  08032	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08036	48 c1 e0 07	 shl	 rax, 7
  0803a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0803e	48 23 c8	 and	 rcx, rax
  08041	48 8b c1	 mov	 rax, rcx
  08044	48 85 c0	 test	 rax, rax
  08047	74 16		 je	 SHORT $LN715@compressRo
  08049	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0804d	48 c1 e0 0a	 shl	 rax, 10
  08051	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08055	48 0b c8	 or	 rcx, rax
  08058	48 8b c1	 mov	 rax, rcx
  0805b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN715@compressRo:
; Line 996
  0805f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08063	48 c1 e0 06	 shl	 rax, 6
  08067	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0806b	48 23 c8	 and	 rcx, rax
  0806e	48 8b c1	 mov	 rax, rcx
  08071	48 85 c0	 test	 rax, rax
  08074	74 16		 je	 SHORT $LN716@compressRo
  08076	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0807a	48 c1 e0 03	 shl	 rax, 3
  0807e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08082	48 0b c8	 or	 rcx, rax
  08085	48 8b c1	 mov	 rax, rcx
  08088	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN716@compressRo:
; Line 997
  0808c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08090	48 c1 e0 05	 shl	 rax, 5
  08094	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08098	48 23 c8	 and	 rcx, rax
  0809b	48 8b c1	 mov	 rax, rcx
  0809e	48 85 c0	 test	 rax, rax
  080a1	74 16		 je	 SHORT $LN717@compressRo
  080a3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  080a7	48 c1 e0 0f	 shl	 rax, 15
  080ab	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  080af	48 0b c8	 or	 rcx, rax
  080b2	48 8b c1	 mov	 rax, rcx
  080b5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN717@compressRo:
; Line 998
  080b9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  080bd	48 c1 e0 04	 shl	 rax, 4
  080c1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  080c5	48 23 c8	 and	 rcx, rax
  080c8	48 8b c1	 mov	 rax, rcx
  080cb	48 85 c0	 test	 rax, rax
  080ce	74 16		 je	 SHORT $LN718@compressRo
  080d0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  080d4	48 c1 e0 16	 shl	 rax, 22
  080d8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  080dc	48 0b c8	 or	 rcx, rax
  080df	48 8b c1	 mov	 rax, rcx
  080e2	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN718@compressRo:
; Line 999
  080e6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  080ea	48 c1 e0 03	 shl	 rax, 3
  080ee	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  080f2	48 23 c8	 and	 rcx, rax
  080f5	48 8b c1	 mov	 rax, rcx
  080f8	48 85 c0	 test	 rax, rax
  080fb	74 16		 je	 SHORT $LN719@compressRo
  080fd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08101	48 c1 e0 06	 shl	 rax, 6
  08105	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08109	48 0b c8	 or	 rcx, rax
  0810c	48 8b c1	 mov	 rax, rcx
  0810f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN719@compressRo:
; Line 1000
  08113	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08117	48 d1 e0	 shl	 rax, 1
  0811a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0811e	48 23 c8	 and	 rcx, rax
  08121	48 8b c1	 mov	 rax, rcx
  08124	48 85 c0	 test	 rax, rax
  08127	74 16		 je	 SHORT $LN720@compressRo
  08129	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0812d	48 c1 e0 12	 shl	 rax, 18
  08131	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08135	48 0b c8	 or	 rcx, rax
  08138	48 8b c1	 mov	 rax, rcx
  0813b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN720@compressRo:
; Line 1001
  0813f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08143	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08147	48 23 c8	 and	 rcx, rax
  0814a	48 8b c1	 mov	 rax, rcx
  0814d	48 85 c0	 test	 rax, rax
  08150	74 16		 je	 SHORT $LN721@compressRo
  08152	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08156	48 c1 e0 08	 shl	 rax, 8
  0815a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0815e	48 0b c8	 or	 rcx, rax
  08161	48 8b c1	 mov	 rax, rcx
  08164	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN721@compressRo:
; Line 1002
  08168	b8 08 00 00 00	 mov	 eax, 8
  0816d	48 6b c0 0f	 imul	 rax, rax, 15
  08171	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  08178	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  0817c	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 1004
  08180	b8 08 00 00 00	 mov	 eax, 8
  08185	48 6b c0 10	 imul	 rax, rax, 16
  08189	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  08190	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  08194	48 89 45 08	 mov	 QWORD PTR key$[rbp], rax
; Line 1005
  08198	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR newKey$[rbp], 0
; Line 1008
  081a0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  081a4	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  081a8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  081ac	48 23 c8	 and	 rcx, rax
  081af	48 8b c1	 mov	 rax, rcx
  081b2	48 85 c0	 test	 rax, rax
  081b5	74 16		 je	 SHORT $LN722@compressRo
  081b7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  081bb	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  081bf	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  081c3	48 0b c8	 or	 rcx, rax
  081c6	48 8b c1	 mov	 rax, rcx
  081c9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN722@compressRo:
; Line 1009
  081cd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  081d1	48 c1 e0 36	 shl	 rax, 54			; 00000036H
  081d5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  081d9	48 23 c8	 and	 rcx, rax
  081dc	48 8b c1	 mov	 rax, rcx
  081df	48 85 c0	 test	 rax, rax
  081e2	74 16		 je	 SHORT $LN723@compressRo
  081e4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  081e8	48 c1 e0 18	 shl	 rax, 24
  081ec	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  081f0	48 0b c8	 or	 rcx, rax
  081f3	48 8b c1	 mov	 rax, rcx
  081f6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN723@compressRo:
; Line 1010
  081fa	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  081fe	48 c1 e0 35	 shl	 rax, 53			; 00000035H
  08202	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08206	48 23 c8	 and	 rcx, rax
  08209	48 8b c1	 mov	 rax, rcx
  0820c	48 85 c0	 test	 rax, rax
  0820f	74 16		 je	 SHORT $LN724@compressRo
  08211	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08215	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  08219	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0821d	48 0b c8	 or	 rcx, rax
  08220	48 8b c1	 mov	 rax, rcx
  08223	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN724@compressRo:
; Line 1011
  08227	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0822b	48 c1 e0 34	 shl	 rax, 52			; 00000034H
  0822f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08233	48 23 c8	 and	 rcx, rax
  08236	48 8b c1	 mov	 rax, rcx
  08239	48 85 c0	 test	 rax, rax
  0823c	74 16		 je	 SHORT $LN725@compressRo
  0823e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08242	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  08246	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0824a	48 0b c8	 or	 rcx, rax
  0824d	48 8b c1	 mov	 rax, rcx
  08250	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN725@compressRo:
; Line 1012
  08254	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08258	48 c1 e0 33	 shl	 rax, 51			; 00000033H
  0825c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08260	48 23 c8	 and	 rcx, rax
  08263	48 8b c1	 mov	 rax, rcx
  08266	48 85 c0	 test	 rax, rax
  08269	74 16		 je	 SHORT $LN726@compressRo
  0826b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0826f	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  08273	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08277	48 0b c8	 or	 rcx, rax
  0827a	48 8b c1	 mov	 rax, rcx
  0827d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN726@compressRo:
; Line 1013
  08281	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08285	48 c1 e0 32	 shl	 rax, 50			; 00000032H
  08289	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0828d	48 23 c8	 and	 rcx, rax
  08290	48 8b c1	 mov	 rax, rcx
  08293	48 85 c0	 test	 rax, rax
  08296	74 16		 je	 SHORT $LN727@compressRo
  08298	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0829c	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  082a0	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  082a4	48 0b c8	 or	 rcx, rax
  082a7	48 8b c1	 mov	 rax, rcx
  082aa	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN727@compressRo:
; Line 1014
  082ae	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  082b2	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  082b6	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  082ba	48 23 c8	 and	 rcx, rax
  082bd	48 8b c1	 mov	 rax, rcx
  082c0	48 85 c0	 test	 rax, rax
  082c3	74 16		 je	 SHORT $LN728@compressRo
  082c5	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  082c9	48 c1 e0 1c	 shl	 rax, 28
  082cd	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  082d1	48 0b c8	 or	 rcx, rax
  082d4	48 8b c1	 mov	 rax, rcx
  082d7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN728@compressRo:
; Line 1015
  082db	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  082df	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  082e3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  082e7	48 23 c8	 and	 rcx, rax
  082ea	48 8b c1	 mov	 rax, rcx
  082ed	48 85 c0	 test	 rax, rax
  082f0	74 16		 je	 SHORT $LN729@compressRo
  082f2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  082f6	48 c1 e0 1e	 shl	 rax, 30
  082fa	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  082fe	48 0b c8	 or	 rcx, rax
  08301	48 8b c1	 mov	 rax, rcx
  08304	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN729@compressRo:
; Line 1016
  08308	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0830c	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  08310	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08314	48 23 c8	 and	 rcx, rax
  08317	48 8b c1	 mov	 rax, rcx
  0831a	48 85 c0	 test	 rax, rax
  0831d	74 16		 je	 SHORT $LN730@compressRo
  0831f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08323	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  08327	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0832b	48 0b c8	 or	 rcx, rax
  0832e	48 8b c1	 mov	 rax, rcx
  08331	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN730@compressRo:
; Line 1017
  08335	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08339	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  0833d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08341	48 23 c8	 and	 rcx, rax
  08344	48 8b c1	 mov	 rax, rcx
  08347	48 85 c0	 test	 rax, rax
  0834a	74 16		 je	 SHORT $LN731@compressRo
  0834c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08350	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  08354	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08358	48 0b c8	 or	 rcx, rax
  0835b	48 8b c1	 mov	 rax, rcx
  0835e	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN731@compressRo:
; Line 1018
  08362	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08366	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  0836a	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0836e	48 23 c8	 and	 rcx, rax
  08371	48 8b c1	 mov	 rax, rcx
  08374	48 85 c0	 test	 rax, rax
  08377	74 16		 je	 SHORT $LN732@compressRo
  08379	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0837d	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  08381	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08385	48 0b c8	 or	 rcx, rax
  08388	48 8b c1	 mov	 rax, rcx
  0838b	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN732@compressRo:
; Line 1019
  0838f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08393	48 c1 e0 2b	 shl	 rax, 43			; 0000002bH
  08397	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0839b	48 23 c8	 and	 rcx, rax
  0839e	48 8b c1	 mov	 rax, rcx
  083a1	48 85 c0	 test	 rax, rax
  083a4	74 16		 je	 SHORT $LN733@compressRo
  083a6	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  083aa	48 c1 e0 19	 shl	 rax, 25
  083ae	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  083b2	48 0b c8	 or	 rcx, rax
  083b5	48 8b c1	 mov	 rax, rcx
  083b8	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN733@compressRo:
; Line 1020
  083bc	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  083c0	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  083c4	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  083c8	48 23 c8	 and	 rcx, rax
  083cb	48 8b c1	 mov	 rax, rcx
  083ce	48 85 c0	 test	 rax, rax
  083d1	74 16		 je	 SHORT $LN734@compressRo
  083d3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  083d7	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  083db	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  083df	48 0b c8	 or	 rcx, rax
  083e2	48 8b c1	 mov	 rax, rcx
  083e5	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN734@compressRo:
; Line 1021
  083e9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  083ed	48 c1 e0 29	 shl	 rax, 41			; 00000029H
  083f1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  083f5	48 23 c8	 and	 rcx, rax
  083f8	48 8b c1	 mov	 rax, rcx
  083fb	48 85 c0	 test	 rax, rax
  083fe	74 16		 je	 SHORT $LN735@compressRo
  08400	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08404	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  08408	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0840c	48 0b c8	 or	 rcx, rax
  0840f	48 8b c1	 mov	 rax, rcx
  08412	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN735@compressRo:
; Line 1022
  08416	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0841a	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  0841e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08422	48 23 c8	 and	 rcx, rax
  08425	48 8b c1	 mov	 rax, rcx
  08428	48 85 c0	 test	 rax, rax
  0842b	74 16		 je	 SHORT $LN736@compressRo
  0842d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08431	48 c1 e0 1d	 shl	 rax, 29
  08435	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08439	48 0b c8	 or	 rcx, rax
  0843c	48 8b c1	 mov	 rax, rcx
  0843f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN736@compressRo:
; Line 1023
  08443	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08447	48 c1 e0 27	 shl	 rax, 39			; 00000027H
  0844b	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0844f	48 23 c8	 and	 rcx, rax
  08452	48 8b c1	 mov	 rax, rcx
  08455	48 85 c0	 test	 rax, rax
  08458	74 16		 je	 SHORT $LN737@compressRo
  0845a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0845e	48 c1 e0 2e	 shl	 rax, 46			; 0000002eH
  08462	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08466	48 0b c8	 or	 rcx, rax
  08469	48 8b c1	 mov	 rax, rcx
  0846c	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN737@compressRo:
; Line 1024
  08470	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08474	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  08478	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0847c	48 23 c8	 and	 rcx, rax
  0847f	48 8b c1	 mov	 rax, rcx
  08482	48 85 c0	 test	 rax, rax
  08485	74 16		 je	 SHORT $LN738@compressRo
  08487	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0848b	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  0848f	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08493	48 0b c8	 or	 rcx, rax
  08496	48 8b c1	 mov	 rax, rcx
  08499	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN738@compressRo:
; Line 1025
  0849d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  084a1	48 c1 e0 24	 shl	 rax, 36			; 00000024H
  084a5	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  084a9	48 23 c8	 and	 rcx, rax
  084ac	48 8b c1	 mov	 rax, rcx
  084af	48 85 c0	 test	 rax, rax
  084b2	74 16		 je	 SHORT $LN739@compressRo
  084b4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  084b8	48 c1 e0 1a	 shl	 rax, 26
  084bc	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  084c0	48 0b c8	 or	 rcx, rax
  084c3	48 8b c1	 mov	 rax, rcx
  084c6	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN739@compressRo:
; Line 1026
  084ca	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  084ce	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  084d2	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  084d6	48 23 c8	 and	 rcx, rax
  084d9	48 8b c1	 mov	 rax, rcx
  084dc	48 85 c0	 test	 rax, rax
  084df	74 16		 je	 SHORT $LN740@compressRo
  084e1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  084e5	48 c1 e0 25	 shl	 rax, 37			; 00000025H
  084e9	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  084ed	48 0b c8	 or	 rcx, rax
  084f0	48 8b c1	 mov	 rax, rcx
  084f3	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN740@compressRo:
; Line 1027
  084f7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  084fb	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  084ff	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08503	48 23 c8	 and	 rcx, rax
  08506	48 8b c1	 mov	 rax, rcx
  08509	48 85 c0	 test	 rax, rax
  0850c	74 16		 je	 SHORT $LN741@compressRo
  0850e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08512	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  08516	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0851a	48 0b c8	 or	 rcx, rax
  0851d	48 8b c1	 mov	 rax, rcx
  08520	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN741@compressRo:
; Line 1028
  08524	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08528	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0852c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08530	48 23 c8	 and	 rcx, rax
  08533	48 8b c1	 mov	 rax, rcx
  08536	48 85 c0	 test	 rax, rax
  08539	74 16		 je	 SHORT $LN742@compressRo
  0853b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0853f	48 c1 e0 2c	 shl	 rax, 44			; 0000002cH
  08543	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08547	48 0b c8	 or	 rcx, rax
  0854a	48 8b c1	 mov	 rax, rcx
  0854d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN742@compressRo:
; Line 1029
  08551	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08555	48 c1 e0 1e	 shl	 rax, 30
  08559	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0855d	48 23 c8	 and	 rcx, rax
  08560	48 8b c1	 mov	 rax, rcx
  08563	48 85 c0	 test	 rax, rax
  08566	74 16		 je	 SHORT $LN743@compressRo
  08568	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0856c	48 c1 e0 1f	 shl	 rax, 31
  08570	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08574	48 0b c8	 or	 rcx, rax
  08577	48 8b c1	 mov	 rax, rcx
  0857a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN743@compressRo:
; Line 1030
  0857e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08582	48 c1 e0 1d	 shl	 rax, 29
  08586	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0858a	48 23 c8	 and	 rcx, rax
  0858d	48 8b c1	 mov	 rax, rcx
  08590	48 85 c0	 test	 rax, rax
  08593	74 16		 je	 SHORT $LN744@compressRo
  08595	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08599	48 c1 e0 1b	 shl	 rax, 27
  0859d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  085a1	48 0b c8	 or	 rcx, rax
  085a4	48 8b c1	 mov	 rax, rcx
  085a7	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN744@compressRo:
; Line 1031
  085ab	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  085af	48 c1 e0 1c	 shl	 rax, 28
  085b3	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  085b7	48 23 c8	 and	 rcx, rax
  085ba	48 8b c1	 mov	 rax, rcx
  085bd	48 85 c0	 test	 rax, rax
  085c0	74 16		 je	 SHORT $LN745@compressRo
  085c2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  085c6	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  085ca	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  085ce	48 0b c8	 or	 rcx, rax
  085d1	48 8b c1	 mov	 rax, rcx
  085d4	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN745@compressRo:
; Line 1032
  085d8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  085dc	48 c1 e0 1b	 shl	 rax, 27
  085e0	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  085e4	48 23 c8	 and	 rcx, rax
  085e7	48 8b c1	 mov	 rax, rcx
  085ea	48 85 c0	 test	 rax, rax
  085ed	74 15		 je	 SHORT $LN746@compressRo
  085ef	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  085f3	48 d1 e0	 shl	 rax, 1
  085f6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  085fa	48 0b c8	 or	 rcx, rax
  085fd	48 8b c1	 mov	 rax, rcx
  08600	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN746@compressRo:
; Line 1033
  08604	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08608	48 c1 e0 1a	 shl	 rax, 26
  0860c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08610	48 23 c8	 and	 rcx, rax
  08613	48 8b c1	 mov	 rax, rcx
  08616	48 85 c0	 test	 rax, rax
  08619	74 16		 je	 SHORT $LN747@compressRo
  0861b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0861f	48 c1 e0 11	 shl	 rax, 17
  08623	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08627	48 0b c8	 or	 rcx, rax
  0862a	48 8b c1	 mov	 rax, rcx
  0862d	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN747@compressRo:
; Line 1034
  08631	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08635	48 c1 e0 19	 shl	 rax, 25
  08639	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0863d	48 23 c8	 and	 rcx, rax
  08640	48 8b c1	 mov	 rax, rcx
  08643	48 85 c0	 test	 rax, rax
  08646	74 16		 je	 SHORT $LN748@compressRo
  08648	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0864c	48 c1 e0 15	 shl	 rax, 21
  08650	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08654	48 0b c8	 or	 rcx, rax
  08657	48 8b c1	 mov	 rax, rcx
  0865a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN748@compressRo:
; Line 1035
  0865e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08662	48 c1 e0 18	 shl	 rax, 24
  08666	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0866a	48 23 c8	 and	 rcx, rax
  0866d	48 8b c1	 mov	 rax, rcx
  08670	48 85 c0	 test	 rax, rax
  08673	74 12		 je	 SHORT $LN749@compressRo
  08675	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08679	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0867d	48 0b c8	 or	 rcx, rax
  08680	48 8b c1	 mov	 rax, rcx
  08683	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN749@compressRo:
; Line 1036
  08687	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0868b	48 c1 e0 17	 shl	 rax, 23
  0868f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08693	48 23 c8	 and	 rcx, rax
  08696	48 8b c1	 mov	 rax, rcx
  08699	48 85 c0	 test	 rax, rax
  0869c	74 16		 je	 SHORT $LN750@compressRo
  0869e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  086a2	48 c1 e0 0d	 shl	 rax, 13
  086a6	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  086aa	48 0b c8	 or	 rcx, rax
  086ad	48 8b c1	 mov	 rax, rcx
  086b0	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN750@compressRo:
; Line 1037
  086b4	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  086b8	48 c1 e0 16	 shl	 rax, 22
  086bc	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  086c0	48 23 c8	 and	 rcx, rax
  086c3	48 8b c1	 mov	 rax, rcx
  086c6	48 85 c0	 test	 rax, rax
  086c9	74 16		 je	 SHORT $LN751@compressRo
  086cb	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  086cf	48 c1 e0 07	 shl	 rax, 7
  086d3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  086d7	48 0b c8	 or	 rcx, rax
  086da	48 8b c1	 mov	 rax, rcx
  086dd	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN751@compressRo:
; Line 1038
  086e1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  086e5	48 c1 e0 14	 shl	 rax, 20
  086e9	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  086ed	48 23 c8	 and	 rcx, rax
  086f0	48 8b c1	 mov	 rax, rcx
  086f3	48 85 c0	 test	 rax, rax
  086f6	74 16		 je	 SHORT $LN752@compressRo
  086f8	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  086fc	48 c1 e0 02	 shl	 rax, 2
  08700	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08704	48 0b c8	 or	 rcx, rax
  08707	48 8b c1	 mov	 rax, rcx
  0870a	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN752@compressRo:
; Line 1039
  0870e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08712	48 c1 e0 13	 shl	 rax, 19
  08716	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  0871a	48 23 c8	 and	 rcx, rax
  0871d	48 8b c1	 mov	 rax, rcx
  08720	48 85 c0	 test	 rax, rax
  08723	74 16		 je	 SHORT $LN753@compressRo
  08725	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08729	48 c1 e0 14	 shl	 rax, 20
  0872d	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08731	48 0b c8	 or	 rcx, rax
  08734	48 8b c1	 mov	 rax, rcx
  08737	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN753@compressRo:
; Line 1040
  0873b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0873f	48 c1 e0 11	 shl	 rax, 17
  08743	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08747	48 23 c8	 and	 rcx, rax
  0874a	48 8b c1	 mov	 rax, rcx
  0874d	48 85 c0	 test	 rax, rax
  08750	74 16		 je	 SHORT $LN754@compressRo
  08752	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08756	48 c1 e0 09	 shl	 rax, 9
  0875a	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0875e	48 0b c8	 or	 rcx, rax
  08761	48 8b c1	 mov	 rax, rcx
  08764	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN754@compressRo:
; Line 1041
  08768	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0876c	48 c1 e0 10	 shl	 rax, 16
  08770	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08774	48 23 c8	 and	 rcx, rax
  08777	48 8b c1	 mov	 rax, rcx
  0877a	48 85 c0	 test	 rax, rax
  0877d	74 16		 je	 SHORT $LN755@compressRo
  0877f	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08783	48 c1 e0 10	 shl	 rax, 16
  08787	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0878b	48 0b c8	 or	 rcx, rax
  0878e	48 8b c1	 mov	 rax, rcx
  08791	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN755@compressRo:
; Line 1042
  08795	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08799	48 c1 e0 0f	 shl	 rax, 15
  0879d	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  087a1	48 23 c8	 and	 rcx, rax
  087a4	48 8b c1	 mov	 rax, rcx
  087a7	48 85 c0	 test	 rax, rax
  087aa	74 16		 je	 SHORT $LN756@compressRo
  087ac	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  087b0	48 c1 e0 17	 shl	 rax, 23
  087b4	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  087b8	48 0b c8	 or	 rcx, rax
  087bb	48 8b c1	 mov	 rax, rcx
  087be	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN756@compressRo:
; Line 1043
  087c2	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  087c6	48 c1 e0 0e	 shl	 rax, 14
  087ca	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  087ce	48 23 c8	 and	 rcx, rax
  087d1	48 8b c1	 mov	 rax, rcx
  087d4	48 85 c0	 test	 rax, rax
  087d7	74 16		 je	 SHORT $LN757@compressRo
  087d9	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  087dd	48 c1 e0 04	 shl	 rax, 4
  087e1	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  087e5	48 0b c8	 or	 rcx, rax
  087e8	48 8b c1	 mov	 rax, rcx
  087eb	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN757@compressRo:
; Line 1044
  087ef	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  087f3	48 c1 e0 0c	 shl	 rax, 12
  087f7	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  087fb	48 23 c8	 and	 rcx, rax
  087fe	48 8b c1	 mov	 rax, rcx
  08801	48 85 c0	 test	 rax, rax
  08804	74 16		 je	 SHORT $LN758@compressRo
  08806	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0880a	48 c1 e0 0b	 shl	 rax, 11
  0880e	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08812	48 0b c8	 or	 rcx, rax
  08815	48 8b c1	 mov	 rax, rcx
  08818	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN758@compressRo:
; Line 1045
  0881c	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08820	48 c1 e0 0b	 shl	 rax, 11
  08824	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08828	48 23 c8	 and	 rcx, rax
  0882b	48 8b c1	 mov	 rax, rcx
  0882e	48 85 c0	 test	 rax, rax
  08831	74 16		 je	 SHORT $LN759@compressRo
  08833	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08837	48 c1 e0 0e	 shl	 rax, 14
  0883b	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0883f	48 0b c8	 or	 rcx, rax
  08842	48 8b c1	 mov	 rax, rcx
  08845	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN759@compressRo:
; Line 1046
  08849	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0884d	48 c1 e0 0a	 shl	 rax, 10
  08851	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08855	48 23 c8	 and	 rcx, rax
  08858	48 8b c1	 mov	 rax, rcx
  0885b	48 85 c0	 test	 rax, rax
  0885e	74 16		 je	 SHORT $LN760@compressRo
  08860	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08864	48 c1 e0 05	 shl	 rax, 5
  08868	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0886c	48 0b c8	 or	 rcx, rax
  0886f	48 8b c1	 mov	 rax, rcx
  08872	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN760@compressRo:
; Line 1047
  08876	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0887a	48 c1 e0 09	 shl	 rax, 9
  0887e	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08882	48 23 c8	 and	 rcx, rax
  08885	48 8b c1	 mov	 rax, rcx
  08888	48 85 c0	 test	 rax, rax
  0888b	74 16		 je	 SHORT $LN761@compressRo
  0888d	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08891	48 c1 e0 13	 shl	 rax, 19
  08895	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08899	48 0b c8	 or	 rcx, rax
  0889c	48 8b c1	 mov	 rax, rcx
  0889f	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN761@compressRo:
; Line 1048
  088a3	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  088a7	48 c1 e0 08	 shl	 rax, 8
  088ab	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  088af	48 23 c8	 and	 rcx, rax
  088b2	48 8b c1	 mov	 rax, rcx
  088b5	48 85 c0	 test	 rax, rax
  088b8	74 16		 je	 SHORT $LN762@compressRo
  088ba	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  088be	48 c1 e0 0c	 shl	 rax, 12
  088c2	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  088c6	48 0b c8	 or	 rcx, rax
  088c9	48 8b c1	 mov	 rax, rcx
  088cc	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN762@compressRo:
; Line 1049
  088d0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  088d4	48 c1 e0 07	 shl	 rax, 7
  088d8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  088dc	48 23 c8	 and	 rcx, rax
  088df	48 8b c1	 mov	 rax, rcx
  088e2	48 85 c0	 test	 rax, rax
  088e5	74 16		 je	 SHORT $LN763@compressRo
  088e7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  088eb	48 c1 e0 0a	 shl	 rax, 10
  088ef	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  088f3	48 0b c8	 or	 rcx, rax
  088f6	48 8b c1	 mov	 rax, rcx
  088f9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN763@compressRo:
; Line 1050
  088fd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08901	48 c1 e0 06	 shl	 rax, 6
  08905	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08909	48 23 c8	 and	 rcx, rax
  0890c	48 8b c1	 mov	 rax, rcx
  0890f	48 85 c0	 test	 rax, rax
  08912	74 16		 je	 SHORT $LN764@compressRo
  08914	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08918	48 c1 e0 03	 shl	 rax, 3
  0891c	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  08920	48 0b c8	 or	 rcx, rax
  08923	48 8b c1	 mov	 rax, rcx
  08926	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN764@compressRo:
; Line 1051
  0892a	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0892e	48 c1 e0 05	 shl	 rax, 5
  08932	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08936	48 23 c8	 and	 rcx, rax
  08939	48 8b c1	 mov	 rax, rcx
  0893c	48 85 c0	 test	 rax, rax
  0893f	74 16		 je	 SHORT $LN765@compressRo
  08941	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08945	48 c1 e0 0f	 shl	 rax, 15
  08949	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0894d	48 0b c8	 or	 rcx, rax
  08950	48 8b c1	 mov	 rax, rcx
  08953	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN765@compressRo:
; Line 1052
  08957	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0895b	48 c1 e0 04	 shl	 rax, 4
  0895f	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08963	48 23 c8	 and	 rcx, rax
  08966	48 8b c1	 mov	 rax, rcx
  08969	48 85 c0	 test	 rax, rax
  0896c	74 16		 je	 SHORT $LN766@compressRo
  0896e	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08972	48 c1 e0 16	 shl	 rax, 22
  08976	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  0897a	48 0b c8	 or	 rcx, rax
  0897d	48 8b c1	 mov	 rax, rcx
  08980	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN766@compressRo:
; Line 1053
  08984	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  08988	48 c1 e0 03	 shl	 rax, 3
  0898c	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  08990	48 23 c8	 and	 rcx, rax
  08993	48 8b c1	 mov	 rax, rcx
  08996	48 85 c0	 test	 rax, rax
  08999	74 16		 je	 SHORT $LN767@compressRo
  0899b	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  0899f	48 c1 e0 06	 shl	 rax, 6
  089a3	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  089a7	48 0b c8	 or	 rcx, rax
  089aa	48 8b c1	 mov	 rax, rcx
  089ad	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN767@compressRo:
; Line 1054
  089b1	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  089b5	48 d1 e0	 shl	 rax, 1
  089b8	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  089bc	48 23 c8	 and	 rcx, rax
  089bf	48 8b c1	 mov	 rax, rcx
  089c2	48 85 c0	 test	 rax, rax
  089c5	74 16		 je	 SHORT $LN768@compressRo
  089c7	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  089cb	48 c1 e0 12	 shl	 rax, 18
  089cf	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  089d3	48 0b c8	 or	 rcx, rax
  089d6	48 8b c1	 mov	 rax, rcx
  089d9	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN768@compressRo:
; Line 1055
  089dd	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  089e1	48 8b 4d 08	 mov	 rcx, QWORD PTR key$[rbp]
  089e5	48 23 c8	 and	 rcx, rax
  089e8	48 8b c1	 mov	 rax, rcx
  089eb	48 85 c0	 test	 rax, rax
  089ee	74 16		 je	 SHORT $LN769@compressRo
  089f0	48 8b 45 48	 mov	 rax, QWORD PTR bit$[rbp]
  089f4	48 c1 e0 08	 shl	 rax, 8
  089f8	48 8b 4d 28	 mov	 rcx, QWORD PTR newKey$[rbp]
  089fc	48 0b c8	 or	 rcx, rax
  089ff	48 8b c1	 mov	 rax, rcx
  08a02	48 89 45 28	 mov	 QWORD PTR newKey$[rbp], rax
$LN769@compressRo:
; Line 1056
  08a06	b8 08 00 00 00	 mov	 eax, 8
  08a0b	48 6b c0 10	 imul	 rax, rax, 16
  08a0f	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR roundKeys$[rbp]
  08a16	48 8b 55 28	 mov	 rdx, QWORD PTR newKey$[rbp]
  08a1a	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
; Line 1057
  08a1e	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  08a25	5f		 pop	 rdi
  08a26	5d		 pop	 rbp
  08a27	c3		 ret	 0
?compressRoundKeys@@YAXQEA_K@Z ENDP			; compressRoundKeys
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?makeK0@@YA_K_K@Z
_TEXT	SEGMENT
k0$ = 8
key$ = 256
?makeK0@@YA_K_K@Z PROC					; makeK0, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 124
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 126
  00036	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR k0$[rbp], 0
; Line 127
  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00045	48 c1 e8 07	 shr	 rax, 7
  00049	48 b9 00 00 00
	00 00 00 00 01	 mov	 rcx, 72057594037927936	; 0100000000000000H
  00053	48 23 c1	 and	 rax, rcx
  00056	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0005a	48 0b c8	 or	 rcx, rax
  0005d	48 8b c1	 mov	 rax, rcx
  00060	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 128
  00064	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0006b	48 c1 e8 0e	 shr	 rax, 14
  0006f	48 b9 00 00 00
	00 00 00 01 00	 mov	 rcx, 281474976710656	; 0001000000000000H
  00079	48 23 c1	 and	 rax, rcx
  0007c	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00080	48 0b c8	 or	 rcx, rax
  00083	48 8b c1	 mov	 rax, rcx
  00086	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 129
  0008a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00091	48 c1 e8 15	 shr	 rax, 21
  00095	48 b9 00 00 00
	00 00 01 00 00	 mov	 rcx, 1099511627776	; 0000010000000000H
  0009f	48 23 c1	 and	 rax, rcx
  000a2	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  000a6	48 0b c8	 or	 rcx, rax
  000a9	48 8b c1	 mov	 rax, rcx
  000ac	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 130
  000b0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  000b7	48 c1 e8 34	 shr	 rax, 52			; 00000034H
  000bb	48 25 00 01 00
	00		 and	 rax, 256		; 00000100H
  000c1	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  000c5	48 0b c8	 or	 rcx, rax
  000c8	48 8b c1	 mov	 rax, rcx
  000cb	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 131
  000cf	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  000d6	48 c1 e8 2f	 shr	 rax, 47			; 0000002fH
  000da	48 25 00 10 00
	00		 and	 rax, 4096		; 00001000H
  000e0	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  000e4	48 0b c8	 or	 rcx, rax
  000e7	48 8b c1	 mov	 rax, rcx
  000ea	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 132
  000ee	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  000f5	48 c1 e8 26	 shr	 rax, 38			; 00000026H
  000f9	48 25 00 00 10
	00		 and	 rax, 1048576		; 00100000H
  000ff	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00103	48 0b c8	 or	 rcx, rax
  00106	48 8b c1	 mov	 rax, rcx
  00109	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 133
  0010d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00114	48 c1 e8 1d	 shr	 rax, 29
  00118	48 25 00 00 00
	10		 and	 rax, 268435456		; 10000000H
  0011e	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00122	48 0b c8	 or	 rcx, rax
  00125	48 8b c1	 mov	 rax, rcx
  00128	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 134
  0012c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00133	48 c1 e0 02	 shl	 rax, 2
  00137	48 b9 00 00 00
	00 00 00 00 02	 mov	 rcx, 144115188075855872	; 0200000000000000H
  00141	48 23 c1	 and	 rax, rcx
  00144	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00148	48 0b c8	 or	 rcx, rax
  0014b	48 8b c1	 mov	 rax, rcx
  0014e	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 135
  00152	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00159	48 c1 e8 05	 shr	 rax, 5
  0015d	48 b9 00 00 00
	00 00 00 02 00	 mov	 rcx, 562949953421312	; 0002000000000000H
  00167	48 23 c1	 and	 rax, rcx
  0016a	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0016e	48 0b c8	 or	 rcx, rax
  00171	48 8b c1	 mov	 rax, rcx
  00174	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 136
  00178	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0017f	48 c1 e8 0c	 shr	 rax, 12
  00183	48 b9 00 00 00
	00 00 02 00 00	 mov	 rcx, 2199023255552	; 0000020000000000H
  0018d	48 23 c1	 and	 rax, rcx
  00190	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00194	48 0b c8	 or	 rcx, rax
  00197	48 8b c1	 mov	 rax, rcx
  0019a	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 137
  0019e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  001a5	48 c1 e8 2b	 shr	 rax, 43			; 0000002bH
  001a9	48 25 00 02 00
	00		 and	 rax, 512		; 00000200H
  001af	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  001b3	48 0b c8	 or	 rcx, rax
  001b6	48 8b c1	 mov	 rax, rcx
  001b9	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 138
  001bd	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  001c4	48 c1 e8 26	 shr	 rax, 38			; 00000026H
  001c8	48 25 00 20 00
	00		 and	 rax, 8192		; 00002000H
  001ce	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  001d2	48 0b c8	 or	 rcx, rax
  001d5	48 8b c1	 mov	 rax, rcx
  001d8	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 139
  001dc	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  001e3	48 c1 e8 1d	 shr	 rax, 29
  001e7	48 25 00 00 20
	00		 and	 rax, 2097152		; 00200000H
  001ed	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  001f1	48 0b c8	 or	 rcx, rax
  001f4	48 8b c1	 mov	 rax, rcx
  001f7	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 140
  001fb	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00202	48 c1 e8 14	 shr	 rax, 20
  00206	48 25 00 00 00
	20		 and	 rax, 536870912		; 20000000H
  0020c	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00210	48 0b c8	 or	 rcx, rax
  00213	48 8b c1	 mov	 rax, rcx
  00216	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 141
  0021a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00221	48 c1 e0 0b	 shl	 rax, 11
  00225	48 b9 00 00 00
	00 00 00 00 04	 mov	 rcx, 288230376151711744	; 0400000000000000H
  0022f	48 23 c1	 and	 rax, rcx
  00232	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00236	48 0b c8	 or	 rcx, rax
  00239	48 8b c1	 mov	 rax, rcx
  0023c	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 142
  00240	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00247	48 c1 e0 04	 shl	 rax, 4
  0024b	48 b9 00 00 00
	00 00 00 04 00	 mov	 rcx, 1125899906842624	; 0004000000000000H
  00255	48 23 c1	 and	 rax, rcx
  00258	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0025c	48 0b c8	 or	 rcx, rax
  0025f	48 8b c1	 mov	 rax, rcx
  00262	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 143
  00266	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0026d	48 c1 e8 03	 shr	 rax, 3
  00271	48 b9 00 00 00
	00 00 04 00 00	 mov	 rcx, 4398046511104	; 0000040000000000H
  0027b	48 23 c1	 and	 rax, rcx
  0027e	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00282	48 0b c8	 or	 rcx, rax
  00285	48 8b c1	 mov	 rax, rcx
  00288	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 144
  0028c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00293	48 c1 e8 22	 shr	 rax, 34			; 00000022H
  00297	48 25 00 04 00
	00		 and	 rax, 1024		; 00000400H
  0029d	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  002a1	48 0b c8	 or	 rcx, rax
  002a4	48 8b c1	 mov	 rax, rcx
  002a7	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 145
  002ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  002b2	48 c1 e8 1d	 shr	 rax, 29
  002b6	48 25 00 40 00
	00		 and	 rax, 16384		; 00004000H
  002bc	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  002c0	48 0b c8	 or	 rcx, rax
  002c3	48 8b c1	 mov	 rax, rcx
  002c6	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 146
  002ca	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  002d1	48 c1 e8 14	 shr	 rax, 20
  002d5	48 25 00 00 40
	00		 and	 rax, 4194304		; 00400000H
  002db	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  002df	48 0b c8	 or	 rcx, rax
  002e2	48 8b c1	 mov	 rax, rcx
  002e5	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 147
  002e9	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  002f0	48 c1 e8 0b	 shr	 rax, 11
  002f4	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  002fa	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  002fe	48 0b c8	 or	 rcx, rax
  00301	48 8b c1	 mov	 rax, rcx
  00304	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 148
  00308	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0030f	48 c1 e0 14	 shl	 rax, 20
  00313	48 b9 00 00 00
	00 00 00 00 08	 mov	 rcx, 576460752303423488	; 0800000000000000H
  0031d	48 23 c1	 and	 rax, rcx
  00320	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00324	48 0b c8	 or	 rcx, rax
  00327	48 8b c1	 mov	 rax, rcx
  0032a	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 149
  0032e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00335	48 c1 e0 0d	 shl	 rax, 13
  00339	48 b9 00 00 00
	00 00 00 08 00	 mov	 rcx, 2251799813685248	; 0008000000000000H
  00343	48 23 c1	 and	 rax, rcx
  00346	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0034a	48 0b c8	 or	 rcx, rax
  0034d	48 8b c1	 mov	 rax, rcx
  00350	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 150
  00354	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0035b	48 c1 e0 06	 shl	 rax, 6
  0035f	48 b9 00 00 00
	00 00 08 00 00	 mov	 rcx, 8796093022208	; 0000080000000000H
  00369	48 23 c1	 and	 rax, rcx
  0036c	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00370	48 0b c8	 or	 rcx, rax
  00373	48 8b c1	 mov	 rax, rcx
  00376	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 151
  0037a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00381	48 c1 e8 19	 shr	 rax, 25
  00385	48 25 00 08 00
	00		 and	 rax, 2048		; 00000800H
  0038b	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0038f	48 0b c8	 or	 rcx, rax
  00392	48 8b c1	 mov	 rax, rcx
  00395	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 152
  00399	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  003a0	48 c1 e8 14	 shr	 rax, 20
  003a4	48 25 00 80 00
	00		 and	 rax, 32768		; 00008000H
  003aa	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  003ae	48 0b c8	 or	 rcx, rax
  003b1	48 8b c1	 mov	 rax, rcx
  003b4	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 153
  003b8	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  003bf	48 c1 e8 0b	 shr	 rax, 11
  003c3	48 25 00 00 80
	00		 and	 rax, 8388608		; 00800000H
  003c9	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  003cd	48 0b c8	 or	 rcx, rax
  003d0	48 8b c1	 mov	 rax, rcx
  003d3	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 154
  003d7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  003de	48 c1 e8 02	 shr	 rax, 2
  003e2	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  003e7	48 23 c1	 and	 rax, rcx
  003ea	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  003ee	48 0b c8	 or	 rcx, rax
  003f1	48 8b c1	 mov	 rax, rcx
  003f4	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 155
  003f8	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  003ff	48 c1 e0 1d	 shl	 rax, 29
  00403	48 b9 00 00 00
	00 00 00 00 10	 mov	 rcx, 1152921504606846976 ; 1000000000000000H
  0040d	48 23 c1	 and	 rax, rcx
  00410	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00414	48 0b c8	 or	 rcx, rax
  00417	48 8b c1	 mov	 rax, rcx
  0041a	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 156
  0041e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00425	48 c1 e0 16	 shl	 rax, 22
  00429	48 b9 00 00 00
	00 00 00 10 00	 mov	 rcx, 4503599627370496	; 0010000000000000H
  00433	48 23 c1	 and	 rax, rcx
  00436	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0043a	48 0b c8	 or	 rcx, rax
  0043d	48 8b c1	 mov	 rax, rcx
  00440	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 157
  00444	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0044b	48 c1 e0 0f	 shl	 rax, 15
  0044f	48 b9 00 00 00
	00 00 10 00 00	 mov	 rcx, 17592186044416	; 0000100000000000H
  00459	48 23 c1	 and	 rax, rcx
  0045c	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00460	48 0b c8	 or	 rcx, rax
  00463	48 8b c1	 mov	 rax, rcx
  00466	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 158
  0046a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00471	48 c1 e0 08	 shl	 rax, 8
  00475	48 b9 00 00 00
	00 10 00 00 00	 mov	 rcx, 68719476736	; 0000001000000000H
  0047f	48 23 c1	 and	 rax, rcx
  00482	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00486	48 0b c8	 or	 rcx, rax
  00489	48 8b c1	 mov	 rax, rcx
  0048c	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 159
  00490	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00497	48 c1 e8 0b	 shr	 rax, 11
  0049b	48 25 00 00 01
	00		 and	 rax, 65536		; 00010000H
  004a1	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  004a5	48 0b c8	 or	 rcx, rax
  004a8	48 8b c1	 mov	 rax, rcx
  004ab	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 160
  004af	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  004b6	48 c1 e8 02	 shr	 rax, 2
  004ba	48 25 00 00 00
	01		 and	 rax, 16777216		; 01000000H
  004c0	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  004c4	48 0b c8	 or	 rcx, rax
  004c7	48 8b c1	 mov	 rax, rcx
  004ca	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 161
  004ce	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  004d5	48 c1 e0 07	 shl	 rax, 7
  004d9	48 b9 00 00 00
	00 01 00 00 00	 mov	 rcx, 4294967296		; 0000000100000000H
  004e3	48 23 c1	 and	 rax, rcx
  004e6	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  004ea	48 0b c8	 or	 rcx, rax
  004ed	48 8b c1	 mov	 rax, rcx
  004f0	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 162
  004f4	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  004fb	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  004ff	48 b9 00 00 00
	00 00 00 00 20	 mov	 rcx, 2305843009213693952 ; 2000000000000000H
  00509	48 23 c1	 and	 rax, rcx
  0050c	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00510	48 0b c8	 or	 rcx, rax
  00513	48 8b c1	 mov	 rax, rcx
  00516	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 163
  0051a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00521	48 c1 e0 1f	 shl	 rax, 31
  00525	48 b9 00 00 00
	00 00 00 20 00	 mov	 rcx, 9007199254740992	; 0020000000000000H
  0052f	48 23 c1	 and	 rax, rcx
  00532	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00536	48 0b c8	 or	 rcx, rax
  00539	48 8b c1	 mov	 rax, rcx
  0053c	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 164
  00540	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00547	48 c1 e0 18	 shl	 rax, 24
  0054b	48 b9 00 00 00
	00 00 20 00 00	 mov	 rcx, 35184372088832	; 0000200000000000H
  00555	48 23 c1	 and	 rax, rcx
  00558	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0055c	48 0b c8	 or	 rcx, rax
  0055f	48 8b c1	 mov	 rax, rcx
  00562	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 165
  00566	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0056d	48 c1 e0 11	 shl	 rax, 17
  00571	48 b9 00 00 00
	00 20 00 00 00	 mov	 rcx, 137438953472	; 0000002000000000H
  0057b	48 23 c1	 and	 rax, rcx
  0057e	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00582	48 0b c8	 or	 rcx, rax
  00585	48 8b c1	 mov	 rax, rcx
  00588	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 166
  0058c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00593	48 c1 e8 02	 shr	 rax, 2
  00597	48 25 00 00 02
	00		 and	 rax, 131072		; 00020000H
  0059d	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  005a1	48 0b c8	 or	 rcx, rax
  005a4	48 8b c1	 mov	 rax, rcx
  005a7	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 167
  005ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  005b2	48 c1 e0 07	 shl	 rax, 7
  005b6	48 25 00 00 00
	02		 and	 rax, 33554432		; 02000000H
  005bc	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  005c0	48 0b c8	 or	 rcx, rax
  005c3	48 8b c1	 mov	 rax, rcx
  005c6	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 168
  005ca	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  005d1	48 c1 e0 10	 shl	 rax, 16
  005d5	48 b9 00 00 00
	00 02 00 00 00	 mov	 rcx, 8589934592		; 0000000200000000H
  005df	48 23 c1	 and	 rax, rcx
  005e2	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  005e6	48 0b c8	 or	 rcx, rax
  005e9	48 8b c1	 mov	 rax, rcx
  005ec	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 169
  005f0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  005f7	48 c1 e0 2f	 shl	 rax, 47			; 0000002fH
  005fb	48 b9 00 00 00
	00 00 00 00 40	 mov	 rcx, 4611686018427387904 ; 4000000000000000H
  00605	48 23 c1	 and	 rax, rcx
  00608	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0060c	48 0b c8	 or	 rcx, rax
  0060f	48 8b c1	 mov	 rax, rcx
  00612	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 170
  00616	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0061d	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  00621	48 b9 00 00 00
	00 00 00 40 00	 mov	 rcx, 18014398509481984	; 0040000000000000H
  0062b	48 23 c1	 and	 rax, rcx
  0062e	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00632	48 0b c8	 or	 rcx, rax
  00635	48 8b c1	 mov	 rax, rcx
  00638	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 171
  0063c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00643	48 c1 e0 21	 shl	 rax, 33			; 00000021H
  00647	48 b9 00 00 00
	00 00 40 00 00	 mov	 rcx, 70368744177664	; 0000400000000000H
  00651	48 23 c1	 and	 rax, rcx
  00654	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00658	48 0b c8	 or	 rcx, rax
  0065b	48 8b c1	 mov	 rax, rcx
  0065e	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 172
  00662	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00669	48 c1 e0 1a	 shl	 rax, 26
  0066d	48 b9 00 00 00
	00 40 00 00 00	 mov	 rcx, 274877906944	; 0000004000000000H
  00677	48 23 c1	 and	 rax, rcx
  0067a	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0067e	48 0b c8	 or	 rcx, rax
  00681	48 8b c1	 mov	 rax, rcx
  00684	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 173
  00688	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0068f	48 c1 e0 07	 shl	 rax, 7
  00693	48 25 00 00 04
	00		 and	 rax, 262144		; 00040000H
  00699	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0069d	48 0b c8	 or	 rcx, rax
  006a0	48 8b c1	 mov	 rax, rcx
  006a3	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 174
  006a7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  006ae	48 c1 e0 10	 shl	 rax, 16
  006b2	48 25 00 00 00
	04		 and	 rax, 67108864		; 04000000H
  006b8	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  006bc	48 0b c8	 or	 rcx, rax
  006bf	48 8b c1	 mov	 rax, rcx
  006c2	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 175
  006c6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  006cd	48 c1 e0 19	 shl	 rax, 25
  006d1	48 b9 00 00 00
	00 04 00 00 00	 mov	 rcx, 17179869184	; 0000000400000000H
  006db	48 23 c1	 and	 rax, rcx
  006de	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  006e2	48 0b c8	 or	 rcx, rax
  006e5	48 8b c1	 mov	 rax, rcx
  006e8	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 176
  006ec	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  006f3	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  006f7	48 b9 00 00 00
	00 00 00 00 80	 mov	 rcx, -9223372036854775808 ; 8000000000000000H
  00701	48 23 c1	 and	 rax, rcx
  00704	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00708	48 0b c8	 or	 rcx, rax
  0070b	48 8b c1	 mov	 rax, rcx
  0070e	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 177
  00712	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00719	48 c1 e0 31	 shl	 rax, 49			; 00000031H
  0071d	48 b9 00 00 00
	00 00 00 80 00	 mov	 rcx, 36028797018963968	; 0080000000000000H
  00727	48 23 c1	 and	 rax, rcx
  0072a	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0072e	48 0b c8	 or	 rcx, rax
  00731	48 8b c1	 mov	 rax, rcx
  00734	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 178
  00738	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0073f	48 c1 e0 2a	 shl	 rax, 42			; 0000002aH
  00743	48 b9 00 00 00
	00 00 80 00 00	 mov	 rcx, 140737488355328	; 0000800000000000H
  0074d	48 23 c1	 and	 rax, rcx
  00750	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00754	48 0b c8	 or	 rcx, rax
  00757	48 8b c1	 mov	 rax, rcx
  0075a	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 179
  0075e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  00765	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  00769	48 b9 00 00 00
	00 80 00 00 00	 mov	 rcx, 549755813888	; 0000008000000000H
  00773	48 23 c1	 and	 rax, rcx
  00776	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  0077a	48 0b c8	 or	 rcx, rax
  0077d	48 8b c1	 mov	 rax, rcx
  00780	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 180
  00784	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  0078b	48 c1 e0 10	 shl	 rax, 16
  0078f	48 25 00 00 08
	00		 and	 rax, 524288		; 00080000H
  00795	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  00799	48 0b c8	 or	 rcx, rax
  0079c	48 8b c1	 mov	 rax, rcx
  0079f	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 181
  007a3	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  007aa	48 c1 e0 19	 shl	 rax, 25
  007ae	48 25 00 00 00
	08		 and	 rax, 134217728		; 08000000H
  007b4	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  007b8	48 0b c8	 or	 rcx, rax
  007bb	48 8b c1	 mov	 rax, rcx
  007be	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 182
  007c2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR key$[rbp]
  007c9	48 c1 e0 22	 shl	 rax, 34			; 00000022H
  007cd	48 b9 00 00 00
	00 08 00 00 00	 mov	 rcx, 34359738368	; 0000000800000000H
  007d7	48 23 c1	 and	 rax, rcx
  007da	48 8b 4d 08	 mov	 rcx, QWORD PTR k0$[rbp]
  007de	48 0b c8	 or	 rcx, rax
  007e1	48 8b c1	 mov	 rax, rcx
  007e4	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 183
  007e8	48 8b 45 08	 mov	 rax, QWORD PTR k0$[rbp]
  007ec	48 c1 e8 08	 shr	 rax, 8
  007f0	48 89 45 08	 mov	 QWORD PTR k0$[rbp], rax
; Line 184
  007f4	48 8b 45 08	 mov	 rax, QWORD PTR k0$[rbp]
; Line 185
  007f8	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  007ff	5f		 pop	 rdi
  00800	5d		 pop	 rbp
  00801	c3		 ret	 0
?makeK0@@YA_K_K@Z ENDP					; makeK0
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
length$ = 4
keyToReturn$ = 40
$T1 = 264
$T2 = 296
tv78 = 308
tv86 = 312
key$ = 352
?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; prepUserKey, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 76
$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0002a	48 c7 85 28 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 78
  00041	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00048	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  0004d	89 45 04	 mov	 DWORD PTR length$[rbp], eax
; Line 79
  00050	83 7d 04 10	 cmp	 DWORD PTR length$[rbp], 16
  00054	74 24		 je	 SHORT $LN2@prepUserKe
  00056	83 7d 04 0a	 cmp	 DWORD PTR length$[rbp], 10
  0005a	74 1e		 je	 SHORT $LN2@prepUserKe
; Line 80
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0HA@LOPPIJEF@Error?3?5Bad?5Input?4?5Specify?5a?516?5@
  00063	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0006a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
; Line 81
  0006f	b9 01 00 00 00	 mov	 ecx, 1
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN2@prepUserKe:
; Line 86
  0007a	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR keyToReturn$[rbp], 0
; Line 87
  00082	33 d2		 xor	 edx, edx
  00084	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  0008b	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00090	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00093	83 f8 27	 cmp	 eax, 39			; 00000027H
  00096	75 0c		 jne	 SHORT $LN6@prepUserKe
  00098	c7 85 34 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv78[rbp], 1
  000a2	eb 0a		 jmp	 SHORT $LN7@prepUserKe
$LN6@prepUserKe:
  000a4	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv78[rbp], 0
$LN7@prepUserKe:
  000ae	8b 45 04	 mov	 eax, DWORD PTR length$[rbp]
  000b1	ff c8		 dec	 eax
  000b3	48 98		 cdqe
  000b5	48 8b d0	 mov	 rdx, rax
  000b8	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  000bf	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  000c4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000c7	83 f8 27	 cmp	 eax, 39			; 00000027H
  000ca	75 0c		 jne	 SHORT $LN8@prepUserKe
  000cc	c7 85 38 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv86[rbp], 1
  000d6	eb 0a		 jmp	 SHORT $LN9@prepUserKe
$LN8@prepUserKe:
  000d8	c7 85 38 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv86[rbp], 0
$LN9@prepUserKe:
  000e2	8b 85 38 01 00
	00		 mov	 eax, DWORD PTR tv86[rbp]
  000e8	8b 8d 34 01 00
	00		 mov	 ecx, DWORD PTR tv78[rbp]
  000ee	23 c8		 and	 ecx, eax
  000f0	8b c1		 mov	 eax, ecx
  000f2	85 c0		 test	 eax, eax
  000f4	0f 84 28 01 00
	00		 je	 $LN3@prepUserKe
; Line 90
  000fa	ba 01 00 00 00	 mov	 edx, 1
  000ff	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00106	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0010b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0010e	c1 e0 08	 shl	 eax, 8
  00111	48 98		 cdqe
  00113	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 91
  00117	ba 02 00 00 00	 mov	 edx, 2
  0011c	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00123	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00128	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0012b	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  0012f	48 0b c8	 or	 rcx, rax
  00132	48 8b c1	 mov	 rax, rcx
  00135	48 c1 e0 08	 shl	 rax, 8
  00139	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 92
  0013d	ba 03 00 00 00	 mov	 edx, 3
  00142	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00149	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0014e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00151	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  00155	48 0b c8	 or	 rcx, rax
  00158	48 8b c1	 mov	 rax, rcx
  0015b	48 c1 e0 08	 shl	 rax, 8
  0015f	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 93
  00163	ba 04 00 00 00	 mov	 edx, 4
  00168	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  0016f	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00174	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00177	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  0017b	48 0b c8	 or	 rcx, rax
  0017e	48 8b c1	 mov	 rax, rcx
  00181	48 c1 e0 08	 shl	 rax, 8
  00185	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 94
  00189	ba 05 00 00 00	 mov	 edx, 5
  0018e	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00195	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0019a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0019d	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  001a1	48 0b c8	 or	 rcx, rax
  001a4	48 8b c1	 mov	 rax, rcx
  001a7	48 c1 e0 08	 shl	 rax, 8
  001ab	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 95
  001af	ba 06 00 00 00	 mov	 edx, 6
  001b4	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  001bb	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001c0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001c3	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  001c7	48 0b c8	 or	 rcx, rax
  001ca	48 8b c1	 mov	 rax, rcx
  001cd	48 c1 e0 08	 shl	 rax, 8
  001d1	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 96
  001d5	ba 07 00 00 00	 mov	 edx, 7
  001da	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  001e1	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001e6	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001e9	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  001ed	48 0b c8	 or	 rcx, rax
  001f0	48 8b c1	 mov	 rax, rcx
  001f3	48 c1 e0 08	 shl	 rax, 8
  001f7	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 97
  001fb	ba 08 00 00 00	 mov	 edx, 8
  00200	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00207	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0020c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0020f	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  00213	48 0b c8	 or	 rcx, rax
  00216	48 8b c1	 mov	 rax, rcx
  00219	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 99
  0021d	e9 d0 02 00 00	 jmp	 $LN4@prepUserKe
$LN3@prepUserKe:
; Line 102
  00222	33 d2		 xor	 edx, edx
  00224	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  0022b	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00230	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00233	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  00238	0f b6 c0	 movzx	 eax, al
  0023b	c1 e0 04	 shl	 eax, 4
  0023e	48 98		 cdqe
  00240	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 103
  00244	ba 01 00 00 00	 mov	 edx, 1
  00249	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00250	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00255	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00258	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  0025d	0f b6 c0	 movzx	 eax, al
  00260	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  00264	48 0b c8	 or	 rcx, rax
  00267	48 8b c1	 mov	 rax, rcx
  0026a	48 c1 e0 04	 shl	 rax, 4
  0026e	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 104
  00272	ba 02 00 00 00	 mov	 edx, 2
  00277	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  0027e	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00283	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00286	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  0028b	0f b6 c0	 movzx	 eax, al
  0028e	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  00292	48 0b c8	 or	 rcx, rax
  00295	48 8b c1	 mov	 rax, rcx
  00298	48 c1 e0 04	 shl	 rax, 4
  0029c	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 105
  002a0	ba 03 00 00 00	 mov	 edx, 3
  002a5	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  002ac	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  002b1	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  002b4	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  002b9	0f b6 c0	 movzx	 eax, al
  002bc	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  002c0	48 0b c8	 or	 rcx, rax
  002c3	48 8b c1	 mov	 rax, rcx
  002c6	48 c1 e0 04	 shl	 rax, 4
  002ca	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 106
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  002da	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  002df	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  002e2	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  002e7	0f b6 c0	 movzx	 eax, al
  002ea	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  002ee	48 0b c8	 or	 rcx, rax
  002f1	48 8b c1	 mov	 rax, rcx
  002f4	48 c1 e0 04	 shl	 rax, 4
  002f8	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 107
  002fc	ba 05 00 00 00	 mov	 edx, 5
  00301	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00308	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0030d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00310	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  00315	0f b6 c0	 movzx	 eax, al
  00318	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  0031c	48 0b c8	 or	 rcx, rax
  0031f	48 8b c1	 mov	 rax, rcx
  00322	48 c1 e0 04	 shl	 rax, 4
  00326	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 108
  0032a	ba 06 00 00 00	 mov	 edx, 6
  0032f	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00336	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0033b	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0033e	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  00343	0f b6 c0	 movzx	 eax, al
  00346	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  0034a	48 0b c8	 or	 rcx, rax
  0034d	48 8b c1	 mov	 rax, rcx
  00350	48 c1 e0 04	 shl	 rax, 4
  00354	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 109
  00358	ba 07 00 00 00	 mov	 edx, 7
  0035d	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00364	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00369	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0036c	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  00371	0f b6 c0	 movzx	 eax, al
  00374	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  00378	48 0b c8	 or	 rcx, rax
  0037b	48 8b c1	 mov	 rax, rcx
  0037e	48 c1 e0 04	 shl	 rax, 4
  00382	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 110
  00386	ba 08 00 00 00	 mov	 edx, 8
  0038b	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00392	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00397	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0039a	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  0039f	0f b6 c0	 movzx	 eax, al
  003a2	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  003a6	48 0b c8	 or	 rcx, rax
  003a9	48 8b c1	 mov	 rax, rcx
  003ac	48 c1 e0 04	 shl	 rax, 4
  003b0	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 111
  003b4	ba 09 00 00 00	 mov	 edx, 9
  003b9	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  003c0	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  003c5	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  003c8	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  003cd	0f b6 c0	 movzx	 eax, al
  003d0	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  003d4	48 0b c8	 or	 rcx, rax
  003d7	48 8b c1	 mov	 rax, rcx
  003da	48 c1 e0 04	 shl	 rax, 4
  003de	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 112
  003e2	ba 0a 00 00 00	 mov	 edx, 10
  003e7	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  003ee	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  003f3	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  003f6	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  003fb	0f b6 c0	 movzx	 eax, al
  003fe	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  00402	48 0b c8	 or	 rcx, rax
  00405	48 8b c1	 mov	 rax, rcx
  00408	48 c1 e0 04	 shl	 rax, 4
  0040c	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 113
  00410	ba 0b 00 00 00	 mov	 edx, 11
  00415	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  0041c	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00421	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00424	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  00429	0f b6 c0	 movzx	 eax, al
  0042c	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  00430	48 0b c8	 or	 rcx, rax
  00433	48 8b c1	 mov	 rax, rcx
  00436	48 c1 e0 04	 shl	 rax, 4
  0043a	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 114
  0043e	ba 0c 00 00 00	 mov	 edx, 12
  00443	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  0044a	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0044f	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00452	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  00457	0f b6 c0	 movzx	 eax, al
  0045a	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  0045e	48 0b c8	 or	 rcx, rax
  00461	48 8b c1	 mov	 rax, rcx
  00464	48 c1 e0 04	 shl	 rax, 4
  00468	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 115
  0046c	ba 0d 00 00 00	 mov	 edx, 13
  00471	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00478	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0047d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00480	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  00485	0f b6 c0	 movzx	 eax, al
  00488	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  0048c	48 0b c8	 or	 rcx, rax
  0048f	48 8b c1	 mov	 rax, rcx
  00492	48 c1 e0 04	 shl	 rax, 4
  00496	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 116
  0049a	ba 0e 00 00 00	 mov	 edx, 14
  0049f	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  004a6	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  004ab	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  004ae	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  004b3	0f b6 c0	 movzx	 eax, al
  004b6	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  004ba	48 0b c8	 or	 rcx, rax
  004bd	48 8b c1	 mov	 rax, rcx
  004c0	48 c1 e0 04	 shl	 rax, 4
  004c4	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
; Line 117
  004c8	ba 0f 00 00 00	 mov	 edx, 15
  004cd	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  004d4	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  004d9	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  004dc	e8 00 00 00 00	 call	 ?charHexValue@@YAEE@Z	; charHexValue
  004e1	0f b6 c0	 movzx	 eax, al
  004e4	48 8b 4d 28	 mov	 rcx, QWORD PTR keyToReturn$[rbp]
  004e8	48 0b c8	 or	 rcx, rax
  004eb	48 8b c1	 mov	 rax, rcx
  004ee	48 89 45 28	 mov	 QWORD PTR keyToReturn$[rbp], rax
$LN4@prepUserKe:
; Line 119
  004f2	48 8b 45 28	 mov	 rax, QWORD PTR keyToReturn$[rbp]
  004f6	48 89 85 08 01
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  004fd	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  00504	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00509	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
; Line 120
  00510	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00517	5f		 pop	 rdi
  00518	5d		 pop	 rbp
  00519	c3		 ret	 0
$LN11@prepUserKe:
?prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; prepUserKey
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
length$ = 4
keyToReturn$ = 40
$T1 = 264
$T2 = 296
tv78 = 308
tv86 = 312
key$ = 352
?dtor$0@?0??prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `prepUserKey'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `prepUserKey'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
length$ = 4
keyToReturn$ = 40
$T1 = 264
$T2 = 296
tv78 = 308
tv86 = 312
key$ = 352
?dtor$0@?0??prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `prepUserKey'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR key$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??prepUserKey@@YA_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `prepUserKey'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv300 = 516
tv295 = 516
tv139 = 516
tv301 = 520
tv298 = 520
tv296 = 520
tv137 = 520
tv302 = 528
tv299 = 528
tv297 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Val$ = 584
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
; Line 790
$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 92 00 00 00	 mov	 ecx, 146		; 00000092H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  0002f	48 c7 85 f8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T9[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 18 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__375B2D08_ostream
  00052	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 793
  00057	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0
; Line 794
  0005e	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  00065	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KQEBD@Z ; std::char_traits<char>::length
  0006a	48 89 45 28	 mov	 QWORD PTR _Count$[rbp], rax
; Line 795
  0006e	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00075	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00078	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0007c	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00083	48 03 c8	 add	 rcx, rax
  00086	48 8b c1	 mov	 rax, rcx
  00089	48 8b c8	 mov	 rcx, rax
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00092	48 85 c0	 test	 rax, rax
  00095	7e 5b		 jle	 SHORT $LN17@operator
  00097	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0009e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a1	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a5	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000ac	48 03 c8	 add	 rcx, rax
  000af	48 8b c1	 mov	 rax, rcx
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000bb	48 3b 45 28	 cmp	 rax, QWORD PTR _Count$[rbp]
  000bf	7e 31		 jle	 SHORT $LN17@operator
  000c1	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cb	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000cf	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000d6	48 03 c8	 add	 rcx, rax
  000d9	48 8b c1	 mov	 rax, rcx
  000dc	48 8b c8	 mov	 rcx, rax
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000e5	48 2b 45 28	 sub	 rax, QWORD PTR _Count$[rbp]
  000e9	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv137[rbp], rax
  000f0	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000f2	48 c7 85 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR tv137[rbp], 0
$LN18@operator:
  000fd	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR tv137[rbp]
  00104	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
; Line 797
  00108	48 8b 95 40 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0010f	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00113	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00118	90		 npad	 1
; Line 799
  00119	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0011d	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00122	0f b6 c0	 movzx	 eax, al
  00125	85 c0		 test	 eax, eax
  00127	75 0e		 jne	 SHORT $LN8@operator
; Line 800
  00129	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0012c	83 c8 04	 or	 eax, 4
  0012f	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
; Line 801
  00132	e9 67 02 00 00	 jmp	 $LN9@operator
$LN8@operator:
; Line 804
  00137	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0013e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00141	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00145	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0014c	48 03 c8	 add	 rcx, rax
  0014f	48 8b c1	 mov	 rax, rcx
  00152	48 8b c8	 mov	 rcx, rax
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0015b	89 85 04 02 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  00161	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv139[rbp]
  00167	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0016c	83 f8 40	 cmp	 eax, 64			; 00000040H
  0016f	0f 84 c8 00 00
	00		 je	 $LN11@operator
; Line 805
  00175	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00177	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  0017b	48 ff c8	 dec	 rax
  0017e	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@operator:
  00182	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  00187	0f 8e b0 00 00
	00		 jle	 $LN11@operator
; Line 806
  0018d	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00194	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00197	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0019b	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001a2	48 03 c8	 add	 rcx, rax
  001a5	48 8b c1	 mov	 rax, rcx
  001a8	48 8b c8	 mov	 rcx, rax
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  001b1	88 85 04 02 00
	00		 mov	 BYTE PTR tv295[rbp], al
  001b7	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001be	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c1	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001c5	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001cc	48 03 c8	 add	 rcx, rax
  001cf	48 8b c1	 mov	 rax, rcx
  001d2	48 8b c8	 mov	 rcx, rax
  001d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001db	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv296[rbp], rax
  001e2	0f b6 95 04 02
	00 00		 movzx	 edx, BYTE PTR tv295[rbp]
  001e9	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv296[rbp]
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001f6	89 85 10 02 00
	00		 mov	 DWORD PTR tv297[rbp], eax
  001fc	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR tv297[rbp]
  00202	89 85 54 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  00208	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0020d	89 85 74 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  00213	48 8d 95 54 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  0021a	48 8d 8d 74 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00221	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00226	0f b6 c0	 movzx	 eax, al
  00229	85 c0		 test	 eax, eax
  0022b	74 0b		 je	 SHORT $LN12@operator
; Line 809
  0022d	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00230	83 c8 04	 or	 eax, 4
  00233	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
; Line 810
  00236	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:
; Line 813
  00238	e9 3a ff ff ff	 jmp	 $LN2@operator
$LN11@operator:
; Line 814
  0023d	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00241	75 60		 jne	 SHORT $LN13@operator
  00243	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0024a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0024d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00251	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00258	48 03 c8	 add	 rcx, rax
  0025b	48 8b c1	 mov	 rax, rcx
  0025e	48 8b c8	 mov	 rcx, rax
  00261	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00267	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv298[rbp], rax
  0026e	4c 8b 45 28	 mov	 r8, QWORD PTR _Count$[rbp]
  00272	48 8b 95 48 02
	00 00		 mov	 rdx, QWORD PTR _Val$[rbp]
  00279	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv298[rbp]
  00280	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00286	48 89 85 10 02
	00 00		 mov	 QWORD PTR tv299[rbp], rax
  0028d	48 8b 45 28	 mov	 rax, QWORD PTR _Count$[rbp]
  00291	48 39 85 10 02
	00 00		 cmp	 QWORD PTR tv299[rbp], rax
  00298	74 09		 je	 SHORT $LN13@operator
; Line 815
  0029a	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0029d	83 c8 04	 or	 eax, 4
  002a0	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:
; Line 817
  002a3	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  002a7	0f 85 c8 00 00
	00		 jne	 $LN14@operator
; Line 818
  002ad	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002af	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  002b3	48 ff c8	 dec	 rax
  002b6	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@operator:
  002ba	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  002bf	0f 8e b0 00 00
	00		 jle	 $LN14@operator
; Line 819
  002c5	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002cf	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002d3	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002da	48 03 c8	 add	 rcx, rax
  002dd	48 8b c1	 mov	 rax, rcx
  002e0	48 8b c8	 mov	 rcx, rax
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002e9	88 85 04 02 00
	00		 mov	 BYTE PTR tv300[rbp], al
  002ef	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f9	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002fd	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00304	48 03 c8	 add	 rcx, rax
  00307	48 8b c1	 mov	 rax, rcx
  0030a	48 8b c8	 mov	 rcx, rax
  0030d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00313	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv301[rbp], rax
  0031a	0f b6 95 04 02
	00 00		 movzx	 edx, BYTE PTR tv300[rbp]
  00321	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv301[rbp]
  00328	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  0032e	89 85 10 02 00
	00		 mov	 DWORD PTR tv302[rbp], eax
  00334	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR tv302[rbp]
  0033a	89 85 94 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00340	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00345	89 85 b4 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  0034b	48 8d 95 94 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  00352	48 8d 8d b4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00359	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  0035e	0f b6 c0	 movzx	 eax, al
  00361	85 c0		 test	 eax, eax
  00363	74 0b		 je	 SHORT $LN15@operator
; Line 822
  00365	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00368	83 c8 04	 or	 eax, 4
  0036b	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
; Line 823
  0036e	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:
; Line 824
  00370	e9 3a ff ff ff	 jmp	 $LN5@operator
$LN14@operator:
; Line 825
  00375	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0037c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0037f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00383	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0038a	48 03 c8	 add	 rcx, rax
  0038d	48 8b c1	 mov	 rax, rcx
  00390	33 d2		 xor	 edx, edx
  00392	48 8b c8	 mov	 rcx, rax
  00395	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  0039b	90		 npad	 1
  0039c	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:
; Line 829
  0039e	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003a8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003ac	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003b3	48 03 c8	 add	 rcx, rax
  003b6	48 8b c1	 mov	 rax, rcx
  003b9	45 33 c0	 xor	 r8d, r8d
  003bc	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  003bf	48 8b c8	 mov	 rcx, rax
  003c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
; Line 830
  003c8	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003cf	48 89 85 d8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  003d6	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  003da	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003df	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]
; Line 831
  003e6	48 8b f8	 mov	 rdi, rax
  003e9	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  003f4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003f9	48 8b c7	 mov	 rax, rdi
  003fc	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00403	48 33 cd	 xor	 rcx, rbp
  00406	e8 00 00 00 00	 call	 __security_check_cookie
  0040b	48 8d a5 28 02
	00 00		 lea	 rsp, QWORD PTR [rbp+552]
  00412	5f		 pop	 rdi
  00413	5d		 pop	 rbp
  00414	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv300 = 516
tv295 = 516
tv139 = 516
tv301 = 520
tv298 = 520
tv296 = 520
tv137 = 520
tv302 = 528
tv299 = 528
tv297 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Val$ = 584
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv300 = 516
tv295 = 516
tv139 = 516
tv301 = 520
tv298 = 520
tv296 = 520
tv137 = 520
tv302 = 528
tv299 = 528
tv297 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Val$ = 584
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
; Line 826
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv300 = 516
tv295 = 516
tv139 = 516
tv301 = 520
tv298 = 520
tv296 = 520
tv137 = 520
tv302 = 528
tv299 = 528
tv297 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Val$ = 584
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv300 = 516
tv295 = 516
tv139 = 516
tv301 = 520
tv298 = 520
tv296 = 520
tv137 = 520
tv302 = 528
tv299 = 528
tv297 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Val$ = 584
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
; Line 826
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?charHexValue@@YAEE@Z
_TEXT	SEGMENT
c$ = 224
?charHexValue@@YAEE@Z PROC				; charHexValue, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 58
$LN9:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00030	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 59
  00035	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]
  0003c	83 f8 30	 cmp	 eax, 48			; 00000030H
  0003f	7c 1e		 jl	 SHORT $LN2@charHexVal
  00041	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]
  00048	83 f8 39	 cmp	 eax, 57			; 00000039H
  0004b	7f 12		 jg	 SHORT $LN2@charHexVal
; Line 60
  0004d	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]
  00054	83 e8 30	 sub	 eax, 48			; 00000030H
  00057	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al
  0005d	eb 75		 jmp	 SHORT $LN3@charHexVal
$LN2@charHexVal:
; Line 61
  0005f	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]
  00066	83 f8 41	 cmp	 eax, 65			; 00000041H
  00069	7c 0c		 jl	 SHORT $LN7@charHexVal
  0006b	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]
  00072	83 f8 46	 cmp	 eax, 70			; 00000046H
  00075	7e 18		 jle	 SHORT $LN6@charHexVal
$LN7@charHexVal:
  00077	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]
  0007e	83 f8 61	 cmp	 eax, 97			; 00000061H
  00081	7c 33		 jl	 SHORT $LN4@charHexVal
  00083	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]
  0008a	83 f8 66	 cmp	 eax, 102		; 00000066H
  0008d	7f 27		 jg	 SHORT $LN4@charHexVal
$LN6@charHexVal:
; Line 63
  0008f	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]
  00096	8b c8		 mov	 ecx, eax
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  0009e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al
; Line 64
  000a4	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]
  000ab	83 e8 37	 sub	 eax, 55			; 00000037H
  000ae	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al
; Line 66
  000b4	eb 1e		 jmp	 SHORT $LN5@charHexVal
$LN4@charHexVal:
; Line 67
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@PFIBPPKP@Error?3?5Invalid?5hex?5character?4@
  000bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000c4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
; Line 68
  000c9	b9 01 00 00 00	 mov	 ecx, 1
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN5@charHexVal:
$LN3@charHexVal:
; Line 70
  000d4	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]
$LN8@charHexVal:
; Line 71
  000db	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000e2	5f		 pop	 rdi
  000e3	5d		 pop	 rbp
  000e4	c3		 ret	 0
?charHexValue@@YAEE@Z ENDP				; charHexValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = 192
_Byte$ = 240
_File$ = 248
??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 128
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 129
  0003b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Byte$[rbp]
  00042	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00045	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _File$[rbp]
  0004c	8b c8		 mov	 ecx, eax
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ungetc
  00054	83 f8 ff	 cmp	 eax, -1
  00057	74 0c		 je	 SHORT $LN3@Ungetc
  00059	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv69[rbp], 1
  00063	eb 0a		 jmp	 SHORT $LN4@Ungetc
$LN3@Ungetc:
  00065	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv69[rbp], 0
$LN4@Ungetc:
  0006f	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]
; Line 130
  00076	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = 192
_Byte$ = 240
_File$ = 248
??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 104
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	0f b6 8c 24 18
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+280]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 105
  0003a	0f be 85 f0 00
	00 00		 movsx	 eax, BYTE PTR _Byte$[rbp]
  00041	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _File$[rbp]
  00048	8b c8		 mov	 ecx, eax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputc
  00050	83 f8 ff	 cmp	 eax, -1
  00053	74 0c		 je	 SHORT $LN3@Fputc
  00055	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv69[rbp], 1
  0005f	eb 0a		 jmp	 SHORT $LN4@Fputc
$LN3@Fputc:
  00061	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv69[rbp], 0
$LN4@Fputc:
  0006b	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]
; Line 106
  00072	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z
_TEXT	SEGMENT
_Meta$ = 4
_Byte$ = 256
_File$ = 264
??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
; Line 59
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2C368DB_fstream
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 61
  0003b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _File$[rbp]
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgetc
  00048	89 45 04	 mov	 DWORD PTR _Meta$[rbp], eax
  0004b	83 7d 04 ff	 cmp	 DWORD PTR _Meta$[rbp], -1
  0004f	75 06		 jne	 SHORT $LN2@Fgetc
; Line 62
  00051	32 c0		 xor	 al, al
  00053	eb 11		 jmp	 SHORT $LN1@Fgetc
; Line 63
  00055	eb 0f		 jmp	 SHORT $LN3@Fgetc
$LN2@Fgetc:
; Line 65
  00057	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Byte$[rbp]
  0005e	0f b6 4d 04	 movzx	 ecx, BYTE PTR _Meta$[rbp]
  00062	88 08		 mov	 BYTE PTR [rax], cl
; Line 66
  00064	b0 01		 mov	 al, 1
$LN3@Fgetc:
$LN1@Fgetc:
; Line 68
  00066	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 224
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 52
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 55
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
; Line 56
  0004b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ
_TEXT	SEGMENT
this$ = 224
__$ReturnUdt$ = 232
?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ PROC ; std::fpos<_Mbstatet>::state, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 42
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 43
  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00046	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  0004d	48 89 01	 mov	 QWORD PTR [rcx], rax
  00050	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
; Line 44
  00057	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ ENDP ; std::fpos<_Mbstatet>::state
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z
_TEXT	SEGMENT
this$ = 224
_State$ = 232
_Fileposition$ = 240
??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z PROC	; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 38
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 37
  00040	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Fileposition$[rbp]
  0004e	48 89 08	 mov	 QWORD PTR [rax], rcx
  00051	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _State$[rbp]
  0006e	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
; Line 39
  00072	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00079	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00080	5f		 pop	 rdi
  00081	5d		 pop	 rbp
  00082	c3		 ret	 0
??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ENDP	; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 33
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 32
  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00049	48 89 08	 mov	 QWORD PTR [rax], rcx
  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  0005b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 83 c0 10	 add	 rax, 16
  00066	48 8b f8	 mov	 rdi, rax
  00069	33 c0		 xor	 eax, eax
  0006b	b9 08 00 00 00	 mov	 ecx, 8
  00070	f3 aa		 rep stosb
; Line 34
  00072	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00079	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00080	5f		 pop	 rdi
  00081	5d		 pop	 rbp
  00082	c3		 ret	 0
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
_TEXT	SEGMENT
_Facptr$ = 8
_Ptr0$1 = 40
tv83 = 248
tv71 = 248
this$ = 288
_Id$ = 296
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z PROC	; std::locale::_Getfacet, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
; Line 435
$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__244BF7CC_xlocale
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 436
  0003b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00046	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0004a	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Id$[rbp], rax
  00051	73 23		 jae	 SHORT $LN6@Getfacet
  00053	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00062	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Id$[rbp]
  00069	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0006d	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  00074	eb 0b		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00076	48 c7 85 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv71[rbp], 0
$LN7@Getfacet:
  00081	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv71[rbp]
  00088	48 89 45 08	 mov	 QWORD PTR _Facptr$[rbp], rax
; Line 438
  0008c	48 83 7d 08 00	 cmp	 QWORD PTR _Facptr$[rbp], 0
  00091	75 13		 jne	 SHORT $LN4@Getfacet
  00093	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0009e	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000a2	85 c0		 test	 eax, eax
  000a4	75 08		 jne	 SHORT $LN2@Getfacet
$LN4@Getfacet:
; Line 439
  000a6	48 8b 45 08	 mov	 rax, QWORD PTR _Facptr$[rbp]
  000aa	eb 4a		 jmp	 SHORT $LN1@Getfacet
; Line 440
  000ac	eb 48		 jmp	 SHORT $LN3@Getfacet
$LN2@Getfacet:
; Line 442
  000ae	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  000b3	48 89 45 28	 mov	 QWORD PTR _Ptr0$1[rbp], rax
; Line 443
  000b7	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr0$1[rbp]
  000bb	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000bf	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Id$[rbp], rax
  000c6	73 1c		 jae	 SHORT $LN8@Getfacet
  000c8	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr0$1[rbp]
  000cc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000d0	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Id$[rbp]
  000d7	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000db	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  000e2	eb 0b		 jmp	 SHORT $LN9@Getfacet
$LN8@Getfacet:
  000e4	48 c7 85 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv83[rbp], 0
$LN9@Getfacet:
  000ef	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv83[rbp]
$LN3@Getfacet:
$LN1@Getfacet:
; Line 447
  000f6	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000fd	5f		 pop	 rdi
  000fe	5d		 pop	 rbp
  000ff	c3		 ret	 0
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ENDP	; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1locale@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 264
tv84 = 280
this$ = 320
??1locale@std@@QEAA@XZ PROC				; std::locale::~locale, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
; Line 408
$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002a	48 c7 85 08 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T3[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__244BF7CC_xlocale
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 409
  00042	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0004e	74 69		 je	 SHORT $LN2@locale
; Line 410
  00050	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00062	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00066	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00069	ff 50 10	 call	 QWORD PTR [rax+16]
  0006c	90		 npad	 1
  0006d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  00074	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR $T2[rbp]
  0007b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00082	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR $T1[rbp], 0
  0008a	74 22		 je	 SHORT $LN4@locale
  0008c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	ba 01 00 00 00	 mov	 edx, 1
  0009b	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  000a2	ff 10		 call	 QWORD PTR [rax]
  000a4	90		 npad	 1
  000a5	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv84[rbp], rax
  000ac	eb 0b		 jmp	 SHORT $LN2@locale
$LN4@locale:
  000ae	48 c7 85 18 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv84[rbp], 0
$LN2@locale:
; Line 411
  000b9	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c0	5f		 pop	 rdi
  000c1	5d		 pop	 rbp
  000c2	c3		 ret	 0
??1locale@std@@QEAA@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_cast@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_cast@std@@UEAAPEAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1bad_cast@std@@UEAA@XZ
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 18 00 00 00	 mov	 edx, 24
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_Gbad_cast@std@@UEAAPEAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_cast@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_cast@std@@QEAA@AEBV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
??0bad_cast@std@@QEAA@AEBV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_cast@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_cast@std@@UEAA@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
??1bad_cast@std@@UEAA@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_cast@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0bad_cast@std@@QEAA@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_typeinfo.h
; Line 131
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C42C8B73_vcruntime_typeinfo@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 130
  00042	41 b8 01 00 00
	00		 mov	 r8d, 1
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast@
  0004f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00056	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception
  0005b	90		 npad	 1
; Line 131
  0005c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
  0006a	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 132
  0006d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00074	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007b	5f		 pop	 rdi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
??0bad_cast@std@@QEAA@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 4003
$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 4004
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
  00031	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen:
; Line 4005
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
_Ptr$1 = 40
_Al$2 = 72
$T3 = 292
this$ = 352
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3984
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 3985
  00036	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
; Line 3986
  00042	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004e	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
; Line 3987
  00052	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00056	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0005b	0f b6 c0	 movzx	 eax, al
  0005e	85 c0		 test	 eax, eax
  00060	74 53		 je	 SHORT $LN2@Tidy_deall
; Line 3989
  00062	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00066	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0006a	48 89 45 28	 mov	 QWORD PTR _Ptr$1[rbp], rax
; Line 3990
  0006e	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00075	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0007a	48 89 45 48	 mov	 QWORD PTR _Al$2[rbp], rax
; Line 3991
  0007e	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00082	48 83 c0 08	 add	 rax, 8
  00086	48 8b c8	 mov	 rcx, rax
  00089	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
  0008e	48 8b d0	 mov	 rdx, rax
  00091	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$2[rbp]
  00095	e8 00 00 00 00	 call	 ??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
; Line 3992
  0009a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0009e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000a2	48 ff c0	 inc	 rax
  000a5	4c 8b c0	 mov	 r8, rax
  000a8	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr$1[rbp]
  000ac	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$2[rbp]
  000b0	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:
; Line 3995
  000b5	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000b9	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
; Line 3996
  000c1	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000c5	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15
; Line 3999
  000cd	c6 85 24 01 00
	00 00		 mov	 BYTE PTR $T3[rbp], 0
  000d4	b8 01 00 00 00	 mov	 eax, 1
  000d9	48 6b c0 00	 imul	 rax, rax, 0
  000dd	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000e1	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  000e6	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR $T3[rbp]
  000ed	48 8b c8	 mov	 rcx, rax
  000f0	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign
; Line 4000
  000f5	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000fc	5f		 pop	 rdi
  000fd	5d		 pop	 rbp
  000fe	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 228
this$ = 288
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3974
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 3975
  00036	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00042	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
; Line 3976
  00046	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0004a	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
; Line 3977
  00052	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00056	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15
; Line 3980
  0005e	c6 85 e4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	48 6b c0 00	 imul	 rax, rax, 0
  0006e	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00072	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  00077	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign
; Line 3981
  00086	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008d	5f		 pop	 rdi
  0008e	5d		 pop	 rbp
  0008f	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z
_TEXT	SEGMENT
_Max$ = 8
_My_data$ = 40
_Masked$ = 72
_Old$ = 104
$T4 = 328
__$ArrayPad$ = 344
this$ = 384
_Requested$ = 392
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3866
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00047	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 3867
  0004c	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00058	48 89 45 08	 mov	 QWORD PTR _Max$[rbp], rax
; Line 3868
  0005c	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00068	48 89 45 28	 mov	 QWORD PTR _My_data$[rbp], rax
; Line 3869
  0006c	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR _Requested$[rbp]
  00073	48 83 c8 0f	 or	 rax, 15
  00077	48 89 45 48	 mov	 QWORD PTR _Masked$[rbp], rax
; Line 3870
  0007b	48 8b 45 08	 mov	 rax, QWORD PTR _Max$[rbp]
  0007f	48 39 45 48	 cmp	 QWORD PTR _Masked$[rbp], rax
  00083	76 06		 jbe	 SHORT $LN2@Calculate_
; Line 3872
  00085	48 8b 45 08	 mov	 rax, QWORD PTR _Max$[rbp]
  00089	eb 62		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:
; Line 3875
  0008b	48 8b 45 28	 mov	 rax, QWORD PTR _My_data$[rbp]
  0008f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00093	48 89 45 68	 mov	 QWORD PTR _Old$[rbp], rax
; Line 3876
  00097	33 d2		 xor	 edx, edx
  00099	48 8b 45 68	 mov	 rax, QWORD PTR _Old$[rbp]
  0009d	b9 02 00 00 00	 mov	 ecx, 2
  000a2	48 f7 f1	 div	 rcx
  000a5	48 8b 4d 08	 mov	 rcx, QWORD PTR _Max$[rbp]
  000a9	48 2b c8	 sub	 rcx, rax
  000ac	48 8b c1	 mov	 rax, rcx
  000af	48 39 45 68	 cmp	 QWORD PTR _Old$[rbp], rax
  000b3	76 06		 jbe	 SHORT $LN3@Calculate_
; Line 3878
  000b5	48 8b 45 08	 mov	 rax, QWORD PTR _Max$[rbp]
  000b9	eb 32		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:
; Line 3881
  000bb	33 d2		 xor	 edx, edx
  000bd	48 8b 45 68	 mov	 rax, QWORD PTR _Old$[rbp]
  000c1	b9 02 00 00 00	 mov	 ecx, 2
  000c6	48 f7 f1	 div	 rcx
  000c9	48 8b 4d 68	 mov	 rcx, QWORD PTR _Old$[rbp]
  000cd	48 03 c8	 add	 rcx, rax
  000d0	48 8b c1	 mov	 rax, rcx
  000d3	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000da	48 8d 95 48 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000e1	48 8d 4d 48	 lea	 rcx, QWORD PTR _Masked$[rbp]
  000e5	e8 00 00 00 00	 call	 ??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Max_value<unsigned __int64>
  000ea	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN1@Calculate_:
; Line 3882
  000ed	48 8b f8	 mov	 rdi, rax
  000f0	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcFrameData
  000fb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00100	48 8b c7	 mov	 rax, rdi
  00103	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0010a	48 33 cd	 xor	 rcx, rbp
  0010d	e8 00 00 00 00	 call	 __security_check_cookie
  00112	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00119	5f		 pop	 rdi
  0011a	5d		 pop	 rbp
  0011b	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 232
tv71 = 248
this$ = 288
_Ptr$ = 296
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3767
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
; Line 3768
  00047	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00053	90		 npad	 1
  00054	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
; Line 3769
  00058	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0005f	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KQEBD@Z ; std::char_traits<char>::length
  00064	90		 npad	 1
  00065	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  0006c	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00070	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00075	90		 npad	 1
  00076	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv71[rbp]
  0007d	4c 8b c9	 mov	 r9, rcx
  00080	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR _Ptr$[rbp]
  00087	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0008b	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z ; std::_Traits_equal<std::char_traits<char> >
  00097	90		 npad	 1
; Line 3770
  00098	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0009f	5f		 pop	 rdi
  000a0	5d		 pop	 rbp
  000a1	c3		 ret	 0
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 8
_Storage_max$ = 40
$T4 = 264
$T5 = 296
$T6 = 328
$T7 = 360
__$ArrayPad$ = 376
this$ = 416
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3306
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  0002a	48 c7 85 68 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T7[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 78 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0004d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00052	90		 npad	 1
; Line 3307
  00053	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0005f	90		 npad	 1
  00060	48 8b c8	 mov	 rcx, rax
  00063	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  00068	90		 npad	 1
  00069	48 89 45 08	 mov	 QWORD PTR _Alloc_max$[rbp], rax
; Line 3309
  0006d	48 c7 85 08 01
	00 00 10 00 00
	00		 mov	 QWORD PTR $T4[rbp], 16
  00078	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  0007f	48 8d 4d 08	 lea	 rcx, QWORD PTR _Alloc_max$[rbp]
  00083	e8 00 00 00 00	 call	 ??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Max_value<unsigned __int64>
  00088	90		 npad	 1
  00089	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008c	48 89 45 28	 mov	 QWORD PTR _Storage_max$[rbp], rax
; Line 3310
  00090	48 8b 45 28	 mov	 rax, QWORD PTR _Storage_max$[rbp]
  00094	48 ff c8	 dec	 rax
  00097	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  0009e	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  000a3	90		 npad	 1
  000a4	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  000ab	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  000b2	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000b9	e8 00 00 00 00	 call	 ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Min_value<unsigned __int64>
  000be	90		 npad	 1
  000bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
; Line 3315
  000c2	48 8b f8	 mov	 rdi, rax
  000c5	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData
  000d0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000d5	90		 npad	 1
  000d6	48 8b c7	 mov	 rax, rdi
  000d9	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000e0	48 33 cd	 xor	 rcx, rbp
  000e3	e8 00 00 00 00	 call	 __security_check_cookie
  000e8	90		 npad	 1
  000e9	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  000f0	5f		 pop	 rdi
  000f1	5d		 pop	 rbp
  000f2	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3301
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 3302
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004e	90		 npad	 1
  0004f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
; Line 3303
  00053	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3296
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 3297
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004e	90		 npad	 1
  0004f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
; Line 3298
  00053	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3284
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 3285
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004e	90		 npad	 1
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00057	90		 npad	 1
; Line 3286
  00058	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3279
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 3280
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004e	90		 npad	 1
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00057	90		 npad	 1
; Line 3281
  00058	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ
_TEXT	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 280
tv74 = 296
tv73 = 304
this$ = 352
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3259
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0002a	48 c7 85 18 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T3[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 3260
  00041	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00048	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00054	48 89 85 28 01
	00 00		 mov	 QWORD PTR tv74[rbp], rax
  0005b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR tv74[rbp]
  00062	48 89 85 30 01
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00069	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  00070	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00075	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0007c	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00083	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00088	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
; Line 3261
  0008f	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 280
tv74 = 296
tv73 = 304
this$ = 352
?dtor$0@?0??front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 280
tv74 = 296
tv73 = 304
this$ = 352
?dtor$0@?0??front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_Ptr$1 = 72
$T2 = 292
$T3 = 324
this$ = 384
_Ch$ = 392
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3227
$LN4:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 3228
  0003a	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00041	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00046	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
; Line 3229
  0004a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0004e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00052	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax
; Line 3230
  00056	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0005a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005e	48 39 45 28	 cmp	 QWORD PTR _Old_size$[rbp], rax
  00062	73 5e		 jae	 SHORT $LN2@push_back
; Line 3232
  00064	48 8b 45 28	 mov	 rax, QWORD PTR _Old_size$[rbp]
  00068	48 ff c0	 inc	 rax
  0006b	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0006f	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
; Line 3233
  00073	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00077	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0007c	48 89 45 48	 mov	 QWORD PTR _Ptr$1[rbp], rax
; Line 3234
  00080	48 8b 45 28	 mov	 rax, QWORD PTR _Old_size$[rbp]
  00084	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$1[rbp]
  00088	48 03 c8	 add	 rcx, rax
  0008b	48 8b c1	 mov	 rax, rcx
  0008e	48 8d 95 88 01
	00 00		 lea	 rdx, QWORD PTR _Ch$[rbp]
  00095	48 8b c8	 mov	 rcx, rax
  00098	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign
; Line 3235
  0009d	c6 85 24 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  000a4	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr$1[rbp]
  000a8	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  000ac	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  000b1	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000b8	48 8b c8	 mov	 rcx, rax
  000bb	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign
; Line 3236
  000c0	eb 34		 jmp	 SHORT $LN1@push_back
$LN2@push_back:
; Line 3239
  000c2	48 8d 85 44 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000c9	48 8b f8	 mov	 rdi, rax
  000cc	33 c0		 xor	 eax, eax
  000ce	b9 01 00 00 00	 mov	 ecx, 1
  000d3	f3 aa		 rep stosb
  000d5	44 0f b6 8d 88
	01 00 00	 movzx	 r9d, BYTE PTR _Ch$[rbp]
  000dd	44 0f b6 85 44
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000e5	ba 01 00 00 00	 mov	 edx, 1
  000ea	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
$LN1@push_back:
; Line 3246
  000f6	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  000fd	5f		 pop	 rdi
  000fe	5d		 pop	 rbp
  000ff	c3		 ret	 0
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
_TEXT	SEGMENT
_My_data$ = 8
this$ = 256
_Off$ = 264
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3201
$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 3202
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00047	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
$LN4@operator:
; Line 3204
  0004b	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0004f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00053	48 39 85 08 01
	00 00		 cmp	 QWORD PTR _Off$[rbp], rax
  0005a	77 02		 ja	 SHORT $LN8@operator
  0005c	eb 6b		 jmp	 SHORT $LN9@operator
$LN8@operator:
$LN7@operator:
  0005e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
  00065	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0006a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00071	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 84 0c 00
	00		 mov	 r8d, 3204		; 00000c84H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00086	b9 02 00 00 00	 mov	 ecx, 2
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00091	83 f8 01	 cmp	 eax, 1
  00094	75 03		 jne	 SHORT $LN11@operator
  00096	cc		 int	 3
  00097	33 c0		 xor	 eax, eax
$LN11@operator:
  00099	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000a2	41 b9 84 0c 00
	00		 mov	 r9d, 3204		; 00000c84H
  000a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000c3	33 c0		 xor	 eax, eax
  000c5	85 c0		 test	 eax, eax
  000c7	75 95		 jne	 SHORT $LN7@operator
$LN9@operator:
  000c9	33 c0		 xor	 eax, eax
  000cb	85 c0		 test	 eax, eax
  000cd	0f 85 78 ff ff
	ff		 jne	 $LN4@operator
; Line 3206
  000d3	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000d7	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  000dc	48 03 85 08 01
	00 00		 add	 rax, QWORD PTR _Off$[rbp]
; Line 3207
  000e3	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000ea	5f		 pop	 rdi
  000eb	5d		 pop	 rbp
  000ec	c3		 ret	 0
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 232
this$ = 288
__$ReturnUdt$ = 296
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 3072
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
; Line 3073
  00047	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00053	90		 npad	 1
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  0005c	90		 npad	 1
  0005d	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
; Line 3074
  00061	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00065	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0006a	90		 npad	 1
  0006b	48 8b c8	 mov	 rcx, rax
  0006e	e8 00 00 00 00	 call	 ??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z ; std::_Refancy<char *,0>
  00073	90		 npad	 1
  00074	4c 8b 45 08	 mov	 r8, QWORD PTR _My_data$[rbp]
  00078	48 8b d0	 mov	 rdx, rax
  0007b	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00082	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
  00087	90		 npad	 1
  00088	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
; Line 3075
  0008f	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_My_ptr$ = 72
_Erase_at$ = 104
_New_size$ = 136
this$ = 384
_Off$ = 392
_Count$ = 400
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2841
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 2842
  00040	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004c	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
; Line 2843
  00050	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  00057	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0005b	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
; Line 2844
  00060	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00067	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  0006e	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00072	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  00077	48 89 85 90 01
	00 00		 mov	 QWORD PTR _Count$[rbp], rax
; Line 2845
  0007e	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00082	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00086	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax
; Line 2846
  0008a	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0008e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00093	48 89 45 48	 mov	 QWORD PTR _My_ptr$[rbp], rax
; Line 2847
  00097	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  0009e	48 8b 4d 48	 mov	 rcx, QWORD PTR _My_ptr$[rbp]
  000a2	48 03 c8	 add	 rcx, rax
  000a5	48 8b c1	 mov	 rax, rcx
  000a8	48 89 45 68	 mov	 QWORD PTR _Erase_at$[rbp], rax
; Line 2848
  000ac	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000b3	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  000b7	48 2b c8	 sub	 rcx, rax
  000ba	48 8b c1	 mov	 rax, rcx
  000bd	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_size$[rbp], rax
; Line 2849
  000c4	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000c8	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000cf	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
; Line 2850
  000d3	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  000da	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000e1	48 2b c8	 sub	 rcx, rax
  000e4	48 8b c1	 mov	 rax, rcx
  000e7	48 ff c0	 inc	 rax
  000ea	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  000f1	48 8b 55 68	 mov	 rdx, QWORD PTR _Erase_at$[rbp]
  000f5	48 03 d1	 add	 rdx, rcx
  000f8	48 8b ca	 mov	 rcx, rdx
  000fb	4c 8b c0	 mov	 r8, rax
  000fe	48 8b d1	 mov	 rdx, rcx
  00101	48 8b 4d 68	 mov	 rcx, QWORD PTR _Erase_at$[rbp]
  00105	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::move
; Line 2851
  0010a	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
; Line 2852
  00111	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00118	5f		 pop	 rdi
  00119	5d		 pop	 rbp
  0011a	c3		 ret	 0
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2675
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 2676
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00042	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KQEBD@Z ; std::char_traits<char>::length
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ??$_Convert_size@_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64>
  0004f	4c 8b c0	 mov	 r8, rax
  00052	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00059	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 2677
  00065	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_ptr$1 = 40
$T2 = 260
$T3 = 292
this$ = 352
_Ptr$ = 360
_Count$ = 368
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2657
$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 2658
  00040	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004c	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
; Line 2659
  00050	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00054	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00058	48 39 85 70 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  0005f	77 63		 ja	 SHORT $LN2@assign
; Line 2661
  00061	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00065	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0006a	48 89 45 28	 mov	 QWORD PTR _Old_ptr$1[rbp], rax
; Line 2662
  0006e	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00072	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00079	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
; Line 2663
  0007d	4c 8b 85 70 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00084	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0008b	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  0008f	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::move
; Line 2664
  00094	c6 85 04 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  0009b	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000a2	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  000a6	48 03 c8	 add	 rcx, rax
  000a9	48 8b c1	 mov	 rax, rcx
  000ac	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000b3	48 8b c8	 mov	 rcx, rax
  000b6	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign
; Line 2665
  000bb	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c2	eb 35		 jmp	 SHORT $LN1@assign
$LN2@assign:
; Line 2668
  000c4	48 8d 85 24 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000cb	48 8b f8	 mov	 rdi, rax
  000ce	33 c0		 xor	 eax, eax
  000d0	b9 01 00 00 00	 mov	 ecx, 1
  000d5	f3 aa		 rep stosb
  000d7	4c 8b 8d 68 01
	00 00		 mov	 r9, QWORD PTR _Ptr$[rbp]
  000de	44 0f b6 85 24
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000e6	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000ed	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f4	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
$LN1@assign:
; Line 2672
  000f9	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00100	5f		 pop	 rdi
  00101	5d		 pop	 rbp
  00102	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z
_TEXT	SEGMENT
this$ = 224
_Ch$ = 232
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2531
$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 2532
  0003a	0f b6 95 e8 00
	00 00		 movzx	 edx, BYTE PTR _Ch$[rbp]
  00041	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00048	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; Line 2533
  0004d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
; Line 2534
  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2459
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2460
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  0004e	90		 npad	 1
; Line 2461
  0004f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00056	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0005b	90		 npad	 1
  0005c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2183
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 2182
  00046	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00052	90		 npad	 1
; Line 2184
  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
; Line 2185
  0005f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00066	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00072	90		 npad	 1
; Line 2186
  00073	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2142
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2141
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0004e	90		 npad	 1
; Line 2143
  0004f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00056	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
  0005b	90		 npad	 1
; Line 2144
  0005c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00063	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006a	5f		 pop	 rdi
  0006b	5d		 pop	 rbp
  0006c	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 306
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 307
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
; Line 308
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 301
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 302
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
; Line 303
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 296
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 297
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
; Line 298
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 291
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 292
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
; Line 293
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2047
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2048
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
  00051	90		 npad	 1
; Line 2049
  00052	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2042
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2043
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
  00051	90		 npad	 1
; Line 2044
  00052	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2037
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2038
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
  00051	90		 npad	 1
; Line 2039
  00052	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2032
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2033
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
  00051	90		 npad	 1
; Line 2034
  00052	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2022
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 2023
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
; Line 2024
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 2011
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 2012
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004e	90		 npad	 1
; Line 2013
  0004f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
_Proxy_allocator$ = 4
__$ArrayPad$ = 216
this$ = 256
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1997
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 d8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1998
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00053	48 8b d0	 mov	 rdx, rax
  00056	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  0005a	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
; Line 1999
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
; Line 2000
  0006b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  00077	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0007a	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  0007e	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 2001
  00083	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008a	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0008f	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00092	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  00096	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
; Line 2002
  0009b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a2	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  000a7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
; Line 2003
  000ae	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcFrameData
  000b9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000be	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000c5	48 33 cd	 xor	 rcx, rbp
  000c8	e8 00 00 00 00	 call	 __security_check_cookie
  000cd	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000d4	5f		 pop	 rdi
  000d5	5d		 pop	 rbp
  000d6	c3		 ret	 0
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
_Proxy_allocator$ = 4
$T4 = 232
tv91 = 264
tv79 = 264
tv70 = 264
__$ArrayPad$ = 272
this$ = 320
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1989
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 10 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1990
  00047	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00053	48 8b d0	 mov	 rdx, rax
  00056	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  0005a	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
; Line 1991
  0005f	ba 01 00 00 00	 mov	 edx, 1
  00064	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  00068	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00075	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  0007c	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00083	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  00088	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv70[rbp]
  0008f	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 1992
  00092	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00099	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QEAA@XZ ; std::_Container_proxy::_Container_proxy
  0009e	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv79[rbp], rax
  000a5	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ac	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  000b1	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv79[rbp]
  000b8	4c 8b c1	 mov	 r8, rcx
  000bb	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000be	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  000c2	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 1993
  000c7	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ce	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  000d3	48 8b c8	 mov	 rcx, rax
  000d6	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  000db	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  000e2	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e9	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  000ee	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f1	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv91[rbp]
  000f8	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 1994
  000fb	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcFrameData
  00106	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010b	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00112	48 33 cd	 xor	 rcx, rbp
  00115	e8 00 00 00 00	 call	 __security_check_cookie
  0011a	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00121	5f		 pop	 rdi
  00122	5d		 pop	 rbp
  00123	c3		 ret	 0
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1948
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 1949
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
  0004e	90		 npad	 1
; Line 1950
  0004f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00056	48 8b c8	 mov	 rcx, rax
  00059	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  0005e	90		 npad	 1
  0005f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1934
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1933
  00041	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00057	90		 npad	 1
; Line 1935
  00058	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
  00064	90		 npad	 1
; Line 1936
  00065	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 c0 08	 add	 rax, 8
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1861
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 1862
  00042	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1856
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1858
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
_TEXT	SEGMENT
$T1 = 200
$T2 = 232
this$ = 288
_Off$ = 296
_Size$ = 304
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1850
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00034	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1
; Line 1851
  0004c	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  0005a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0005e	48 2b c1	 sub	 rax, rcx
  00061	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00068	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0006f	48 8d 8d 30 01
	00 00		 lea	 rcx, QWORD PTR _Size$[rbp]
  00076	e8 00 00 00 00	 call	 ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Min_value<unsigned __int64>
  0007b	90		 npad	 1
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
; Line 1852
  0007f	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00086	5f		 pop	 rdi
  00087	5d		 pop	 rbp
  00088	c3		 ret	 0
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1845
$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1846
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00031	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
$LN2@Xran:
; Line 1847
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1829
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1830
  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00049	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  0004d	73 05		 jae	 SHORT $LN2@Check_offs
; Line 1832
  0004f	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN2@Check_offs:
$LN3@Check_offs:
; Line 1834
  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1824
$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1825
  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 78 20 10	 cmp	 QWORD PTR [rax+32], 16
  00042	72 0c		 jb	 SHORT $LN3@Large_stri
  00044	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  0004e	eb 0a		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00050	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@Large_stri:
  0005a	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]
; Line 1826
  00061	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00068	5f		 pop	 rdi
  00069	5d		 pop	 rbp
  0006a	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1813
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1814
  00036	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 c0 08	 add	 rax, 8
  00041	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
; Line 1815
  00045	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004c	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	74 14		 je	 SHORT $LN2@Myptr
; Line 1817
  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00063	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00068	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:
; Line 1820
  0006c	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]
; Line 1821
  00070	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00077	5f		 pop	 rdi
  00078	5d		 pop	 rbp
  00079	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1802
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1803
  00036	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 c0 08	 add	 rax, 8
  00041	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
; Line 1804
  00045	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004c	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	74 14		 je	 SHORT $LN2@Myptr
; Line 1806
  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00063	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00068	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:
; Line 1809
  0006c	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]
; Line 1810
  00070	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00077	5f		 pop	 rdi
  00078	5d		 pop	 rbp
  00079	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; Line 1786
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FB7583FD_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
; Line 1783
  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 83 c0 08	 add	 rax, 8
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
; Line 1784
  00055	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005c	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
; Line 1785
  00064	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0
; Line 1787
  00073	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
$T1 = 200
__formal$ = 256
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 891
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 892
  00042	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
; Line 893
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 996
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 997
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00042	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YA_K_K@Z ; std::_Get_size_of_n<1>
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
; Line 998
  0004f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 990
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 992
  00040	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00047	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0004e	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>
; Line 993
  00053	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 979
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 981
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
$T2 = 232
tv65 = 248
_Left$ = 288
_Right$ = 296
??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z PROC		; std::_Min_value<unsigned __int64>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; Line 23
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E53366A2_utility
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
; Line 24
  00047	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0004e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00055	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00058	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0005b	73 10		 jae	 SHORT $LN3@Min_value
  0005d	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00064	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  0006b	eb 0e		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  0006d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00074	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@Min_value:
  0007b	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  00082	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00089	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
; Line 25
  00090	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00097	5f		 pop	 rdi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ENDP		; std::_Min_value<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Convert_size@_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 224
??$_Convert_size@_K@std@@YA_K_K@Z PROC			; std::_Convert_size<unsigned __int64>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 1203
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 1204
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Len$[rbp]
; Line 1205
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??$_Convert_size@_K@std@@YA_K_K@Z ENDP			; std::_Convert_size<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 8
_Ptr_container$ = 40
_Min_back_shift$ = 72
_Back_shift$ = 104
_Ptr$ = 352
_Bytes$ = 360
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 114
$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 115
  0003b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  00049	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00050	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 117
  00053	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  0005a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005d	48 89 45 08	 mov	 QWORD PTR _Ptr_user$[rbp], rax
; Line 118
  00061	b8 08 00 00 00	 mov	 eax, 8
  00066	48 6b c0 ff	 imul	 rax, rax, -1
  0006a	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  0006e	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00072	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Adjust_man:
; Line 122
  00076	b8 08 00 00 00	 mov	 eax, 8
  0007b	48 6b c0 fe	 imul	 rax, rax, -2
  0007f	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  00083	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  0008d	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  00091	75 02		 jne	 SHORT $LN14@Adjust_man
  00093	eb 77		 jmp	 SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
  00095	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  0009b	83 c0 08	 add	 eax, 8
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  000a5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  000b1	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000b6	45 33 c9	 xor	 r9d, r9d
  000b9	44 8b c0	 mov	 r8d, eax
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000c3	b9 02 00 00 00	 mov	 ecx, 2
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000ce	83 f8 01	 cmp	 eax, 1
  000d1	75 03		 jne	 SHORT $LN19@Adjust_man
  000d3	cc		 int	 3
  000d4	33 c0		 xor	 eax, eax
$LN19@Adjust_man:
  000d6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  000dc	83 c0 08	 add	 eax, 8
  000df	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000e8	44 8b c8	 mov	 r9d, eax
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00100	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00106	33 c0		 xor	 eax, eax
  00108	85 c0		 test	 eax, eax
  0010a	75 89		 jne	 SHORT $LN7@Adjust_man
$LN15@Adjust_man:
  0010c	33 c0		 xor	 eax, eax
  0010e	85 c0		 test	 eax, eax
  00110	0f 85 60 ff ff
	ff		 jne	 $LN4@Adjust_man
; Line 127
  00116	48 c7 45 48 10
	00 00 00	 mov	 QWORD PTR _Min_back_shift$[rbp], 16
; Line 131
  0011e	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00125	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  00129	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0012c	48 2b c1	 sub	 rax, rcx
  0012f	48 89 45 68	 mov	 QWORD PTR _Back_shift$[rbp], rax
$LN10@Adjust_man:
; Line 132
  00133	48 83 7d 68 10	 cmp	 QWORD PTR _Back_shift$[rbp], 16
  00138	72 09		 jb	 SHORT $LN16@Adjust_man
  0013a	48 83 7d 68 2f	 cmp	 QWORD PTR _Back_shift$[rbp], 47 ; 0000002fH
  0013f	77 02		 ja	 SHORT $LN16@Adjust_man
  00141	eb 77		 jmp	 SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
  00143	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00149	83 c0 12	 add	 eax, 18
  0014c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  00153	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00158	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0015f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00164	45 33 c9	 xor	 r9d, r9d
  00167	44 8b c0	 mov	 r8d, eax
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00171	b9 02 00 00 00	 mov	 ecx, 2
  00176	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0017c	83 f8 01	 cmp	 eax, 1
  0017f	75 03		 jne	 SHORT $LN20@Adjust_man
  00181	cc		 int	 3
  00182	33 c0		 xor	 eax, eax
$LN20@Adjust_man:
  00184	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  0018a	83 c0 12	 add	 eax, 18
  0018d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00196	44 8b c8	 mov	 r9d, eax
  00199	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  001a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  001ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  001b4	33 c0		 xor	 eax, eax
  001b6	85 c0		 test	 eax, eax
  001b8	75 89		 jne	 SHORT $LN13@Adjust_man
$LN17@Adjust_man:
  001ba	33 c0		 xor	 eax, eax
  001bc	85 c0		 test	 eax, eax
  001be	0f 85 6f ff ff
	ff		 jne	 $LN10@Adjust_man
; Line 133
  001c4	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  001cb	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  001cf	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 134
  001d2	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001d9	5f		 pop	 rdi
  001da	5d		 pop	 rbp
  001db	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 51
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 52
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  0003d	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
; Line 53
  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Get_size_of_n@$00@std@@YA_K_K@Z
_TEXT	SEGMENT
_Count$ = 224
??$_Get_size_of_n@$00@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<1>, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; Line 37
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1CE3C767_xmemory0
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 38
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
; Line 39
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 8
$T2 = 232
this$ = 288
?_Orphan_me@_Iterator_base12@std@@QEAAXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 191
$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  0002a	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 193
  00042	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0004d	0f 84 dc 00 00
	00		 je	 $LN10@Orphan_me
; Line 195
  00053	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005d	48 83 c0 08	 add	 rax, 8
  00061	48 89 45 08	 mov	 QWORD PTR _Pnext$1[rbp], rax
$LN2@Orphan_me:
; Line 196
  00065	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00069	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0006d	74 21		 je	 SHORT $LN6@Orphan_me
  0006f	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00073	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007a	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0007d	74 11		 je	 SHORT $LN6@Orphan_me
; Line 197
  0007f	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00083	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00086	48 83 c0 08	 add	 rax, 8
  0008a	48 89 45 08	 mov	 QWORD PTR _Pnext$1[rbp], rax
  0008e	eb d5		 jmp	 SHORT $LN2@Orphan_me
$LN6@Orphan_me:
; Line 199
  00090	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00094	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00098	74 02		 je	 SHORT $LN9@Orphan_me
  0009a	eb 6d		 jmp	 SHORT $LN12@Orphan_me
$LN9@Orphan_me:
  0009c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
  000a3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  000af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b4	45 33 c9	 xor	 r9d, r9d
  000b7	41 b8 c7 00 00
	00		 mov	 r8d, 199		; 000000c7H
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000c4	b9 02 00 00 00	 mov	 ecx, 2
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000cf	90		 npad	 1
  000d0	83 f8 01	 cmp	 eax, 1
  000d3	75 03		 jne	 SHORT $LN14@Orphan_me
  000d5	cc		 int	 3
  000d6	33 c0		 xor	 eax, eax
$LN14@Orphan_me:
  000d8	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000e1	41 b9 c7 00 00
	00		 mov	 r9d, 199		; 000000c7H
  000e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00102	90		 npad	 1
  00103	33 c0		 xor	 eax, eax
  00105	85 c0		 test	 eax, eax
  00107	75 93		 jne	 SHORT $LN9@Orphan_me
$LN12@Orphan_me:
  00109	33 c0		 xor	 eax, eax
  0010b	85 c0		 test	 eax, eax
  0010d	75 81		 jne	 SHORT $LN6@Orphan_me
; Line 200
  0010f	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00113	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0011e	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 201
  00121	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00128	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN10@Orphan_me:
; Line 204
  0012f	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00136	5f		 pop	 rdi
  00137	5d		 pop	 rbp
  00138	c3		 ret	 0
?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ
_TEXT	SEGMENT
$T1 = 200
tv68 = 216
this$ = 256
?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 181
$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 182
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0004d	75 0d		 jne	 SHORT $LN3@Getcont
  0004f	48 c7 85 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv68[rbp], 0
  0005a	eb 14		 jmp	 SHORT $LN4@Getcont
$LN3@Getcont:
  0005c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00063	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00066	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00069	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
$LN4@Getcont:
  00070	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv68[rbp]
; Line 183
  00077	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
_TEXT	SEGMENT
_Lock$5 = 4
_Parent_proxy$6 = 40
_Lock$7 = 68
$T8 = 296
__$ArrayPad$ = 312
this$ = 352
_Parent$ = 360
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 147
$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0002f	48 c7 85 28 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T8[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  00052	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00057	90		 npad	 1
; Line 148
  00058	48 83 bd 68 01
	00 00 00	 cmp	 QWORD PTR _Parent$[rbp], 0
  00060	75 2a		 jne	 SHORT $LN2@Adopt
; Line 151
  00062	ba 03 00 00 00	 mov	 edx, 3
  00067	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00071	90		 npad	 1
; Line 152
  00072	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00079	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ; std::_Iterator_base12::_Orphan_me
  0007e	90		 npad	 1
; Line 154
  0007f	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00089	90		 npad	 1
; Line 155
  0008a	eb 76		 jmp	 SHORT $LN3@Adopt
$LN2@Adopt:
; Line 157
  0008c	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Parent$[rbp]
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	48 89 45 28	 mov	 QWORD PTR _Parent_proxy$6[rbp], rax
; Line 160
  0009a	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	48 8b 4d 28	 mov	 rcx, QWORD PTR _Parent_proxy$6[rbp]
  000a5	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000a8	74 58		 je	 SHORT $LN3@Adopt
; Line 162
  000aa	ba 03 00 00 00	 mov	 edx, 3
  000af	48 8d 4d 44	 lea	 rcx, QWORD PTR _Lock$7[rbp]
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  000b9	90		 npad	 1
; Line 163
  000ba	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c1	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ; std::_Iterator_base12::_Orphan_me
  000c6	90		 npad	 1
; Line 164
  000c7	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ce	48 8b 4d 28	 mov	 rcx, QWORD PTR _Parent_proxy$6[rbp]
  000d2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000d6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
; Line 165
  000da	48 8b 45 28	 mov	 rax, QWORD PTR _Parent_proxy$6[rbp]
  000de	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e5	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
; Line 166
  000e9	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f0	48 8b 4d 28	 mov	 rcx, QWORD PTR _Parent_proxy$6[rbp]
  000f4	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 167
  000f7	48 8d 4d 44	 lea	 rcx, QWORD PTR _Lock$7[rbp]
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00101	90		 npad	 1
$LN3@Adopt:
; Line 173
  00102	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00106	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcFrameData
  0010d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00112	90		 npad	 1
  00113	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0011a	48 33 cd	 xor	 rcx, rbp
  0011d	e8 00 00 00 00	 call	 __security_check_cookie
  00122	90		 npad	 1
  00123	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0012a	5f		 pop	 rdi
  0012b	5d		 pop	 rbp
  0012c	c3		 ret	 0
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Iterator_base12@std@@QEAA@XZ
_TEXT	SEGMENT
_Lock$ = 4
$T4 = 232
__$ArrayPad$ = 248
this$ = 288
??1_Iterator_base12@std@@QEAA@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 139
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T4[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0004d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00052	90		 npad	 1
; Line 141
  00053	ba 03 00 00 00	 mov	 edx, 3
  00058	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00062	90		 npad	 1
; Line 142
  00063	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ; std::_Iterator_base12::_Orphan_me
  0006f	90		 npad	 1
; Line 144
  00070	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0007a	90		 npad	 1
  0007b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1_Iterator_base12@std@@QEAA@XZ$rtcFrameData
  00086	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0008b	90		 npad	 1
  0008c	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00093	48 33 cd	 xor	 rcx, rbp
  00096	e8 00 00 00 00	 call	 __security_check_cookie
  0009b	90		 npad	 1
  0009c	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000a3	5f		 pop	 rdi
  000a4	5d		 pop	 rbp
  000a5	c3		 ret	 0
??1_Iterator_base12@std@@QEAA@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0_Iterator_base12@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0_Iterator_base12@std@@QEAA@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 109
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 108
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00050	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
; Line 110
  0005f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
??0_Iterator_base12@std@@QEAA@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
_Lock$4 = 4
_Pnext$5 = 40
$T6 = 264
__$ArrayPad$ = 280
this$ = 320
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 214
$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002a	48 c7 85 08 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T6[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0004d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00052	90		 npad	 1
; Line 216
  00053	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0005e	74 6d		 je	 SHORT $LN5@Orphan_all
; Line 218
  00060	ba 03 00 00 00	 mov	 edx, 3
  00065	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  0006f	90		 npad	 1
; Line 220
  00070	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007a	48 83 c0 08	 add	 rax, 8
  0007e	48 89 45 28	 mov	 QWORD PTR _Pnext$5[rbp], rax
  00082	eb 12		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
; Line 221
  00084	48 8b 45 28	 mov	 rax, QWORD PTR _Pnext$5[rbp]
  00088	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008b	48 8b 4d 28	 mov	 rcx, QWORD PTR _Pnext$5[rbp]
  0008f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00093	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN4@Orphan_all:
  00096	48 8b 45 28	 mov	 rax, QWORD PTR _Pnext$5[rbp]
  0009a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0009e	74 10		 je	 SHORT $LN3@Orphan_all
; Line 222
  000a0	48 8b 45 28	 mov	 rax, QWORD PTR _Pnext$5[rbp]
  000a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ae	eb d4		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:
; Line 223
  000b0	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ba	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
; Line 224
  000c2	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  000cc	90		 npad	 1
$LN5@Orphan_all:
; Line 226
  000cd	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcFrameData
  000d8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000dd	90		 npad	 1
  000de	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000e5	48 33 cd	 xor	 rcx, rbp
  000e8	e8 00 00 00 00	 call	 __security_check_cookie
  000ed	90		 npad	 1
  000ee	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000f5	5f		 pop	 rdi
  000f6	5d		 pop	 rbp
  000f7	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 81
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 80
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
; Line 82
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0_Container_proxy@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0_Container_proxy@std@@QEAA@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; Line 69
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CDB00636_xutility
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 68
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00050	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
; Line 70
  0005f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
??0_Container_proxy@std@@QEAA@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
$T1 = 200
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 540
$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  00030	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00035	90		 npad	 1
; Line 541
  00036	b8 ff ff ff ff	 mov	 eax, -1
; Line 542
  0003b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHAEBH@Z
_TEXT	SEGMENT
$T1 = 200
tv69 = 212
tv68 = 216
_Meta$ = 256
?not_eof@?$char_traits@D@std@@SAHAEBH@Z PROC		; std::char_traits<char>::not_eof, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 535
$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 536
  00042	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00047	90		 npad	 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Meta$[rbp]
  0004f	39 01		 cmp	 DWORD PTR [rcx], eax
  00051	74 11		 je	 SHORT $LN5@not_eof
  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Meta$[rbp]
  0005a	8b 00		 mov	 eax, DWORD PTR [rax]
  0005c	89 85 d4 00 00
	00		 mov	 DWORD PTR tv69[rbp], eax
  00062	eb 2c		 jmp	 SHORT $LN6@not_eof
$LN5@not_eof:
  00064	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00069	90		 npad	 1
  0006a	85 c0		 test	 eax, eax
  0006c	75 0c		 jne	 SHORT $LN3@not_eof
  0006e	c7 85 d8 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv68[rbp], 1
  00078	eb 0a		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  0007a	c7 85 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv68[rbp], 0
$LN4@not_eof:
  00084	8b 85 d8 00 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
  0008a	89 85 d4 00 00
	00		 mov	 DWORD PTR tv69[rbp], eax
$LN6@not_eof:
  00090	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv69[rbp]
; Line 537
  00096	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009d	5f		 pop	 rdi
  0009e	5d		 pop	 rbp
  0009f	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHAEBH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 212
_Left$ = 256
_Right$ = 264
?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 530
$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
; Line 531
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0004e	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00055	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00057	39 08		 cmp	 DWORD PTR [rax], ecx
  00059	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0005b	c7 85 d4 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv65[rbp], 1
  00065	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00067	c7 85 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
  00071	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR tv65[rbp]
; Line 532
  00078	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007f	5f		 pop	 rdi
  00080	5d		 pop	 rbp
  00081	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z
_TEXT	SEGMENT
$T1 = 200
_Ch$ = 256
?to_int_type@?$char_traits@D@std@@SAHAEBD@Z PROC	; std::char_traits<char>::to_int_type, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 525
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 526
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Ch$[rbp]
  00049	0f b6 00	 movzx	 eax, BYTE PTR [rax]
; Line 527
  0004c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ENDP	; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADAEBH@Z
_TEXT	SEGMENT
$T1 = 200
_Meta$ = 256
?to_char_type@?$char_traits@D@std@@SADAEBH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 520
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 521
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Meta$[rbp]
  00049	0f b6 00	 movzx	 eax, BYTE PTR [rax]
; Line 522
  0004c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADAEBH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
$T1 = 200
_Left$ = 256
_Right$ = 264
?assign@?$char_traits@D@std@@SAXAEADAEBD@Z PROC		; std::char_traits<char>::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 505
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
; Line 506
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0004e	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00055	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00058	88 08		 mov	 BYTE PTR [rax], cl
; Line 507
  0005a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
$T1 = 200
_First1$ = 256
_First2$ = 264
_Count$ = 272
?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z PROC	; std::char_traits<char>::move, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 494
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1
; Line 495
  0004c	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00053	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  0005a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00061	e8 00 00 00 00	 call	 memmove
  00066	90		 npad	 1
; Line 496
  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ENDP	; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
$T1 = 200
_First1$ = 256
_First2$ = 264
_Count$ = 272
?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z PROC	; std::char_traits<char>::copy, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 470
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1
; Line 471
  0004c	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00053	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  0005a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00061	e8 00 00 00 00	 call	 memcpy
  00066	90		 npad	 1
; Line 472
  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ENDP	; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@?$char_traits@D@std@@SA_KQEBD@Z
_TEXT	SEGMENT
$T1 = 200
_First$ = 256
?length@?$char_traits@D@std@@SA_KQEBD@Z PROC		; std::char_traits<char>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 460
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
; Line 464
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00049	e8 00 00 00 00	 call	 strlen
  0004e	90		 npad	 1
; Line 466
  0004f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?length@?$char_traits@D@std@@SA_KQEBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@?$char_traits@D@std@@SAHQEBD0_K@Z
_TEXT	SEGMENT
$T1 = 200
_First1$ = 256
_First2$ = 264
_Count$ = 272
?compare@?$char_traits@D@std@@SAHQEBD0_K@Z PROC		; std::char_traits<char>::compare, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; Line 451
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7E39D651_iosfwd
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1
; Line 455
  0004c	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00053	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  0005a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00061	e8 00 00 00 00	 call	 memcmp
  00066	90		 npad	 1
; Line 457
  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHQEBD0_K@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
$T1 = 200
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\limits
; Line 893
$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B2D003D7_limits
  00030	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00035	90		 npad	 1
; Line 894
  00036	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
; Line 895
  00040	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 18 00 00 00	 mov	 edx, 24
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; Line 90
$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; Line 91
  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00042	74 14		 je	 SHORT $LN3@what
  00044	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  00056	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  0005f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  00066	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]
; Line 92
  0006d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; Line 85
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 86
  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 c0 08	 add	 rax, 8
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 __std_exception_destroy
  00066	90		 npad	 1
; Line 87
  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Other$ = 264
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; Line 68
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00055	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 67
  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 83 c0 08	 add	 rax, 8
  00063	48 8b f8	 mov	 rdi, rax
  00066	33 c0		 xor	 eax, eax
  00068	b9 10 00 00 00	 mov	 ecx, 16
  0006d	f3 aa		 rep stosb
; Line 69
  0006f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00076	48 83 c0 08	 add	 rax, 8
  0007a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Other$[rbp]
  00081	48 83 c1 08	 add	 rcx, 8
  00085	48 8b d0	 mov	 rdx, rax
  00088	e8 00 00 00 00	 call	 __std_exception_copy
  0008d	90		 npad	 1
; Line 70
  0008e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Message$ = 264
__formal$ = 272
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; Line 62
$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1
  0004c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0005a	48 89 08	 mov	 QWORD PTR [rax], rcx
; Line 61
  0005d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00064	48 83 c0 08	 add	 rax, 8
  00068	48 8b f8	 mov	 rdi, rax
  0006b	33 c0		 xor	 eax, eax
  0006d	b9 10 00 00 00	 mov	 ecx, 16
  00072	f3 aa		 rep stosb
; Line 63
  00074	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  00082	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
; Line 64
  00086	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00094	5f		 pop	 rdi
  00095	5d		 pop	 rbp
  00096	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
$T1 = 200
_Size$ = 256
_Where$ = 264
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
; Line 185
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6BC0FD35_vcruntime_new@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
; Line 187
  00047	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]
; Line 188
  0004e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 1790
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT
; File c:\users\brooke weborg\documents\des\des\des.cpp
; Line 1790
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D6BF080C_des@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
